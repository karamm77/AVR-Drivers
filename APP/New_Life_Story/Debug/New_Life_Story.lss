
New_Life_Story.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00003120  00003194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002100  00000000  00000000  000031f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bde  00000000  00000000  000052f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000600e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000617e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a61b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 92 0c 	call	0x1924	; 0x1924 <main>
      7a:	0c 94 8e 18 	jmp	0x311c	; 0x311c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e9       	ldi	r26, 0x94	; 148
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e9       	ldi	r24, 0x94	; 148
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <voidSendEnablePulse>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"


static void voidSendEnablePulse(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	62 e0       	ldi	r22, 0x02	; 2
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPinValue>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e4       	ldi	r27, 0x40	; 64
     b5c:	8b 87       	std	Y+11, r24	; 0x0b
     b5e:	9c 87       	std	Y+12, r25	; 0x0c
     b60:	ad 87       	std	Y+13, r26	; 0x0d
     b62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b64:	6b 85       	ldd	r22, Y+11	; 0x0b
     b66:	7c 85       	ldd	r23, Y+12	; 0x0c
     b68:	8d 85       	ldd	r24, Y+13	; 0x0d
     b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	4a e7       	ldi	r20, 0x7A	; 122
     b72:	55 e4       	ldi	r21, 0x45	; 69
     b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	8f 83       	std	Y+7, r24	; 0x07
     b7e:	98 87       	std	Y+8, r25	; 0x08
     b80:	a9 87       	std	Y+9, r26	; 0x09
     b82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b84:	6f 81       	ldd	r22, Y+7	; 0x07
     b86:	78 85       	ldd	r23, Y+8	; 0x08
     b88:	89 85       	ldd	r24, Y+9	; 0x09
     b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e8       	ldi	r20, 0x80	; 128
     b92:	5f e3       	ldi	r21, 0x3F	; 63
     b94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     b98:	88 23       	and	r24, r24
     b9a:	2c f4       	brge	.+10     	; 0xba6 <voidSendEnablePulse+0x70>
		__ticks = 1;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	9e 83       	std	Y+6, r25	; 0x06
     ba2:	8d 83       	std	Y+5, r24	; 0x05
     ba4:	3f c0       	rjmp	.+126    	; 0xc24 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     ba6:	6f 81       	ldd	r22, Y+7	; 0x07
     ba8:	78 85       	ldd	r23, Y+8	; 0x08
     baa:	89 85       	ldd	r24, Y+9	; 0x09
     bac:	9a 85       	ldd	r25, Y+10	; 0x0a
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	3f ef       	ldi	r19, 0xFF	; 255
     bb2:	4f e7       	ldi	r20, 0x7F	; 127
     bb4:	57 e4       	ldi	r21, 0x47	; 71
     bb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bba:	18 16       	cp	r1, r24
     bbc:	4c f5       	brge	.+82     	; 0xc10 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e2       	ldi	r20, 0x20	; 32
     bcc:	51 e4       	ldi	r21, 0x41	; 65
     bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	8d 83       	std	Y+5, r24	; 0x05
     be6:	0f c0       	rjmp	.+30     	; 0xc06 <voidSendEnablePulse+0xd0>
     be8:	80 e9       	ldi	r24, 0x90	; 144
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <voidSendEnablePulse+0xbe>
     bf8:	9c 83       	std	Y+4, r25	; 0x04
     bfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	9e 81       	ldd	r25, Y+6	; 0x06
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	9e 83       	std	Y+6, r25	; 0x06
     c04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	69 f7       	brne	.-38     	; 0xbe8 <voidSendEnablePulse+0xb2>
     c0e:	14 c0       	rjmp	.+40     	; 0xc38 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <voidSendEnablePulse+0xfa>
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPinValue>
}
     c42:	2e 96       	adiw	r28, 0x0e	; 14
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <voidSetLCDHalfDataPort>:


static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	0f 92       	push	r0
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	98 2f       	mov	r25, r24
     c64:	91 70       	andi	r25, 0x01	; 1
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	49 2f       	mov	r20, r25
     c6c:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	86 95       	lsr	r24
     c74:	98 2f       	mov	r25, r24
     c76:	91 70       	andi	r25, 0x01	; 1
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	49 2f       	mov	r20, r25
     c7e:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	86 95       	lsr	r24
     c86:	86 95       	lsr	r24
     c88:	98 2f       	mov	r25, r24
     c8a:	91 70       	andi	r25, 0x01	; 1
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	62 e0       	ldi	r22, 0x02	; 2
     c90:	49 2f       	mov	r20, r25
     c92:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	86 95       	lsr	r24
     c9a:	86 95       	lsr	r24
     c9c:	86 95       	lsr	r24
     c9e:	98 2f       	mov	r25, r24
     ca0:	91 70       	andi	r25, 0x01	; 1
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	64 e0       	ldi	r22, 0x04	; 4
     ca6:	49 2f       	mov	r20, r25
     ca8:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPinValue>
}
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <CLCD_voidSendCmd>:


void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	63 e0       	ldi	r22, 0x03	; 3
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	82 95       	swap	r24
     cce:	8f 70       	andi	r24, 0x0F	; 15
     cd0:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cd4:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cde:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
#endif
}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	0f 92       	push	r0
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	63 e0       	ldi	r22, 0x03	; 3
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	82 95       	swap	r24
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d0a:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d14:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
#endif

}
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	2e 97       	sbiw	r28, 0x0e	; 14
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61

	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN3, DIO_u8PIN_OUTPUT); //RS
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	63 e0       	ldi	r22, 0x03	; 3
     d38:	41 e0       	ldi	r20, 0x01	; 1
     d3a:	0e 94 c7 09 	call	0x138e	; 0x138e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN2, DIO_u8PIN_OUTPUT);//E
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	0e 94 c7 09 	call	0x138e	; 0x138e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_OUTPUT);//D4
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	0e 94 c7 09 	call	0x138e	; 0x138e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN1, DIO_u8PIN_OUTPUT);//D4
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	0e 94 c7 09 	call	0x138e	; 0x138e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN2, DIO_u8PIN_OUTPUT);//D4
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	62 e0       	ldi	r22, 0x02	; 2
     d60:	41 e0       	ldi	r20, 0x01	; 1
     d62:	0e 94 c7 09 	call	0x138e	; 0x138e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN4, DIO_u8PIN_OUTPUT);//D4
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	64 e0       	ldi	r22, 0x04	; 4
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	0e 94 c7 09 	call	0x138e	; 0x138e <DIO_u8SetPinDirection>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a0 e2       	ldi	r26, 0x20	; 32
     d76:	b2 e4       	ldi	r27, 0x42	; 66
     d78:	8b 87       	std	Y+11, r24	; 0x0b
     d7a:	9c 87       	std	Y+12, r25	; 0x0c
     d7c:	ad 87       	std	Y+13, r26	; 0x0d
     d7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d80:	6b 85       	ldd	r22, Y+11	; 0x0b
     d82:	7c 85       	ldd	r23, Y+12	; 0x0c
     d84:	8d 85       	ldd	r24, Y+13	; 0x0d
     d86:	9e 85       	ldd	r25, Y+14	; 0x0e
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	4a e7       	ldi	r20, 0x7A	; 122
     d8e:	55 e4       	ldi	r21, 0x45	; 69
     d90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	8f 83       	std	Y+7, r24	; 0x07
     d9a:	98 87       	std	Y+8, r25	; 0x08
     d9c:	a9 87       	std	Y+9, r26	; 0x09
     d9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     da0:	6f 81       	ldd	r22, Y+7	; 0x07
     da2:	78 85       	ldd	r23, Y+8	; 0x08
     da4:	89 85       	ldd	r24, Y+9	; 0x09
     da6:	9a 85       	ldd	r25, Y+10	; 0x0a
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e8       	ldi	r20, 0x80	; 128
     dae:	5f e3       	ldi	r21, 0x3F	; 63
     db0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     db4:	88 23       	and	r24, r24
     db6:	2c f4       	brge	.+10     	; 0xdc2 <CLCD_voidInit+0xa2>
		__ticks = 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	9e 83       	std	Y+6, r25	; 0x06
     dbe:	8d 83       	std	Y+5, r24	; 0x05
     dc0:	3f c0       	rjmp	.+126    	; 0xe40 <CLCD_voidInit+0x120>
	else if (__tmp > 65535)
     dc2:	6f 81       	ldd	r22, Y+7	; 0x07
     dc4:	78 85       	ldd	r23, Y+8	; 0x08
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	57 e4       	ldi	r21, 0x47	; 71
     dd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	4c f5       	brge	.+82     	; 0xe2c <CLCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dda:	6b 85       	ldd	r22, Y+11	; 0x0b
     ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dde:	8d 85       	ldd	r24, Y+13	; 0x0d
     de0:	9e 85       	ldd	r25, Y+14	; 0x0e
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e2       	ldi	r20, 0x20	; 32
     de8:	51 e4       	ldi	r21, 0x41	; 65
     dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	bc 01       	movw	r22, r24
     df4:	cd 01       	movw	r24, r26
     df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	9e 83       	std	Y+6, r25	; 0x06
     e00:	8d 83       	std	Y+5, r24	; 0x05
     e02:	0f c0       	rjmp	.+30     	; 0xe22 <CLCD_voidInit+0x102>
     e04:	80 e9       	ldi	r24, 0x90	; 144
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	9c 83       	std	Y+4, r25	; 0x04
     e0a:	8b 83       	std	Y+3, r24	; 0x03
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	9c 81       	ldd	r25, Y+4	; 0x04
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <CLCD_voidInit+0xf0>
     e14:	9c 83       	std	Y+4, r25	; 0x04
     e16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e18:	8d 81       	ldd	r24, Y+5	; 0x05
     e1a:	9e 81       	ldd	r25, Y+6	; 0x06
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e22:	8d 81       	ldd	r24, Y+5	; 0x05
     e24:	9e 81       	ldd	r25, Y+6	; 0x06
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	69 f7       	brne	.-38     	; 0xe04 <CLCD_voidInit+0xe4>
     e2a:	14 c0       	rjmp	.+40     	; 0xe54 <CLCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2c:	6f 81       	ldd	r22, Y+7	; 0x07
     e2e:	78 85       	ldd	r23, Y+8	; 0x08
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9e 83       	std	Y+6, r25	; 0x06
     e3e:	8d 83       	std	Y+5, r24	; 0x05
     e40:	8d 81       	ldd	r24, Y+5	; 0x05
     e42:	9e 81       	ldd	r25, Y+6	; 0x06
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <CLCD_voidInit+0x12c>
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e5a:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e64:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
     e68:	88 e0       	ldi	r24, 0x08	; 8
     e6a:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e6e:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
     e72:	8c e0       	ldi	r24, 0x0C	; 12
     e74:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
}
     e7e:	2e 96       	adiw	r28, 0x0e	; 14
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <CLCD_u8SendString>:


uint8 CLCD_u8SendString(const char* Copy_chString)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <CLCD_u8SendString+0x6>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <CLCD_u8SendString+0x8>
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	9c 83       	std	Y+4, r25	; 0x04
     e9e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState= OK;
     ea0:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chString != NULL)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	e1 f0       	breq	.+56     	; 0xee2 <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Counter=0u;
     eaa:	19 82       	std	Y+1, r1	; 0x01
     eac:	0e c0       	rjmp	.+28     	; 0xeca <CLCD_u8SendString+0x3a>
		while(Copy_chString[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	fc 01       	movw	r30, r24
     eba:	e2 0f       	add	r30, r18
     ebc:	f3 1f       	adc	r31, r19
     ebe:	80 81       	ld	r24, Z
     ec0:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
			Local_u8Counter++;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
     ec8:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState= OK;
	if(Copy_chString != NULL)
	{
		uint8 Local_u8Counter=0u;
		while(Copy_chString[Local_u8Counter] != '\0')
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	fc 01       	movw	r30, r24
     ed6:	e2 0f       	add	r30, r18
     ed8:	f3 1f       	adc	r31, r19
     eda:	80 81       	ld	r24, Z
     edc:	88 23       	and	r24, r24
     ede:	39 f7       	brne	.-50     	; 0xeae <CLCD_u8SendString+0x1e>
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	61 97       	sbiw	r28, 0x11	; 17
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	6e 87       	std	Y+14, r22	; 0x0e
     f0c:	7f 87       	std	Y+15, r23	; 0x0f
     f0e:	88 8b       	std	Y+16, r24	; 0x10
     f10:	99 8b       	std	Y+17, r25	; 0x11
	char Local_u8ChArr[10];
	uint8 Local_RightDigit;
	uint8 Local_u32Counter1 = 0;
     f12:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_u32Counter2 = 0;
     f14:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_s32Number == 0)
     f16:	8e 85       	ldd	r24, Y+14	; 0x0e
     f18:	9f 85       	ldd	r25, Y+15	; 0x0f
     f1a:	a8 89       	ldd	r26, Y+16	; 0x10
     f1c:	b9 89       	ldd	r27, Y+17	; 0x11
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	a1 05       	cpc	r26, r1
     f22:	b1 05       	cpc	r27, r1
     f24:	21 f4       	brne	.+8      	; 0xf2e <CLCD_voidSendNumber+0x38>
	{
		CLCD_voidSendData('0');
     f26:	80 e3       	ldi	r24, 0x30	; 48
     f28:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
     f2c:	69 c0       	rjmp	.+210    	; 0x1000 <CLCD_voidSendNumber+0x10a>
		return;
	}
	else if (Copy_s32Number < 0)
     f2e:	8e 85       	ldd	r24, Y+14	; 0x0e
     f30:	9f 85       	ldd	r25, Y+15	; 0x0f
     f32:	a8 89       	ldd	r26, Y+16	; 0x10
     f34:	b9 89       	ldd	r27, Y+17	; 0x11
     f36:	bb 23       	and	r27, r27
     f38:	0c f0       	brlt	.+2      	; 0xf3c <CLCD_voidSendNumber+0x46>
     f3a:	43 c0       	rjmp	.+134    	; 0xfc2 <CLCD_voidSendNumber+0xcc>
	{
		CLCD_voidSendData('-');
     f3c:	8d e2       	ldi	r24, 0x2D	; 45
     f3e:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
		Copy_s32Number *= -1;
     f42:	8e 85       	ldd	r24, Y+14	; 0x0e
     f44:	9f 85       	ldd	r25, Y+15	; 0x0f
     f46:	a8 89       	ldd	r26, Y+16	; 0x10
     f48:	b9 89       	ldd	r27, Y+17	; 0x11
     f4a:	b0 95       	com	r27
     f4c:	a0 95       	com	r26
     f4e:	90 95       	com	r25
     f50:	81 95       	neg	r24
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	af 4f       	sbci	r26, 0xFF	; 255
     f56:	bf 4f       	sbci	r27, 0xFF	; 255
     f58:	8e 87       	std	Y+14, r24	; 0x0e
     f5a:	9f 87       	std	Y+15, r25	; 0x0f
     f5c:	a8 8b       	std	Y+16, r26	; 0x10
     f5e:	b9 8b       	std	Y+17, r27	; 0x11
     f60:	30 c0       	rjmp	.+96     	; 0xfc2 <CLCD_voidSendNumber+0xcc>
	}

	while (Copy_s32Number != 0)
	{
		Local_RightDigit = Copy_s32Number % 10;
     f62:	8e 85       	ldd	r24, Y+14	; 0x0e
     f64:	9f 85       	ldd	r25, Y+15	; 0x0f
     f66:	a8 89       	ldd	r26, Y+16	; 0x10
     f68:	b9 89       	ldd	r27, Y+17	; 0x11
     f6a:	2a e0       	ldi	r18, 0x0A	; 10
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	bc 01       	movw	r22, r24
     f74:	cd 01       	movw	r24, r26
     f76:	0e 94 1a 18 	call	0x3034	; 0x3034 <__divmodsi4>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number /= 10;
     f80:	8e 85       	ldd	r24, Y+14	; 0x0e
     f82:	9f 85       	ldd	r25, Y+15	; 0x0f
     f84:	a8 89       	ldd	r26, Y+16	; 0x10
     f86:	b9 89       	ldd	r27, Y+17	; 0x11
     f88:	2a e0       	ldi	r18, 0x0A	; 10
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	0e 94 1a 18 	call	0x3034	; 0x3034 <__divmodsi4>
     f98:	da 01       	movw	r26, r20
     f9a:	c9 01       	movw	r24, r18
     f9c:	8e 87       	std	Y+14, r24	; 0x0e
     f9e:	9f 87       	std	Y+15, r25	; 0x0f
     fa0:	a8 8b       	std	Y+16, r26	; 0x10
     fa2:	b9 8b       	std	Y+17, r27	; 0x11
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	48 2f       	mov	r20, r24
     fae:	40 5d       	subi	r20, 0xD0	; 208
     fb0:	ce 01       	movw	r24, r28
     fb2:	04 96       	adiw	r24, 0x04	; 4
     fb4:	fc 01       	movw	r30, r24
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	40 83       	st	Z, r20
		Local_u32Counter1++;
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('-');
		Copy_s32Number *= -1;
	}

	while (Copy_s32Number != 0)
     fc2:	8e 85       	ldd	r24, Y+14	; 0x0e
     fc4:	9f 85       	ldd	r25, Y+15	; 0x0f
     fc6:	a8 89       	ldd	r26, Y+16	; 0x10
     fc8:	b9 89       	ldd	r27, Y+17	; 0x11
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	a1 05       	cpc	r26, r1
     fce:	b1 05       	cpc	r27, r1
     fd0:	41 f6       	brne	.-112    	; 0xf62 <CLCD_voidSendNumber+0x6c>
		Copy_s32Number /= 10;
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
		Local_u32Counter1++;
	}

	for (Local_u32Counter2 = Local_u32Counter1 - 1; Local_u32Counter2 >= 0; Local_u32Counter2--)
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	81 50       	subi	r24, 0x01	; 1
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	10 c0       	rjmp	.+32     	; 0xffa <CLCD_voidSendNumber+0x104>
	{
		CLCD_voidSendData(Local_u8ChArr[Local_u32Counter2]);
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	33 27       	eor	r19, r19
     fe0:	27 fd       	sbrc	r18, 7
     fe2:	30 95       	com	r19
     fe4:	ce 01       	movw	r24, r28
     fe6:	04 96       	adiw	r24, 0x04	; 4
     fe8:	fc 01       	movw	r30, r24
     fea:	e2 0f       	add	r30, r18
     fec:	f3 1f       	adc	r31, r19
     fee:	80 81       	ld	r24, Z
     ff0:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
		Copy_s32Number /= 10;
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
		Local_u32Counter1++;
	}

	for (Local_u32Counter2 = Local_u32Counter1 - 1; Local_u32Counter2 >= 0; Local_u32Counter2--)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	81 50       	subi	r24, 0x01	; 1
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	88 23       	and	r24, r24
     ffe:	6c f7       	brge	.-38     	; 0xfda <CLCD_voidSendNumber+0xe4>
	{
		CLCD_voidSendData(Local_u8ChArr[Local_u32Counter2]);
	}
}
    1000:	61 96       	adiw	r28, 0x11	; 17
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <CLCD_voidGotoXY>:


/************************ Go to x and y Simple *****************/

void CLCD_voidGotoXY(uint8 Copy_u8Row,uint8 Copy_u8Col)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <CLCD_voidGotoXY+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <CLCD_voidGotoXY+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_Address;

	switch(Copy_u8Row)
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3d 83       	std	Y+5, r19	; 0x05
    102c:	2c 83       	std	Y+4, r18	; 0x04
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	c1 f0       	breq	.+48     	; 0x1068 <CLCD_voidGotoXY+0x56>
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	2c f4       	brge	.+10     	; 0x104c <CLCD_voidGotoXY+0x3a>
    1042:	8c 81       	ldd	r24, Y+4	; 0x04
    1044:	9d 81       	ldd	r25, Y+5	; 0x05
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	61 f0       	breq	.+24     	; 0x1062 <CLCD_voidGotoXY+0x50>
    104a:	19 c0       	rjmp	.+50     	; 0x107e <CLCD_voidGotoXY+0x6c>
    104c:	2c 81       	ldd	r18, Y+4	; 0x04
    104e:	3d 81       	ldd	r19, Y+5	; 0x05
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	69 f0       	breq	.+26     	; 0x1070 <CLCD_voidGotoXY+0x5e>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	91 05       	cpc	r25, r1
    105e:	61 f0       	breq	.+24     	; 0x1078 <CLCD_voidGotoXY+0x66>
    1060:	0e c0       	rjmp	.+28     	; 0x107e <CLCD_voidGotoXY+0x6c>
	{
	case 0: Local_Address = 0x00+Copy_u8Col;	break;
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	0b c0       	rjmp	.+22     	; 0x107e <CLCD_voidGotoXY+0x6c>
	case 1: Local_Address = 0x40+Copy_u8Col;	break;
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	80 5c       	subi	r24, 0xC0	; 192
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	07 c0       	rjmp	.+14     	; 0x107e <CLCD_voidGotoXY+0x6c>
	case 2: Local_Address = 0x14+Copy_u8Col;	break;
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	8c 5e       	subi	r24, 0xEC	; 236
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	03 c0       	rjmp	.+6      	; 0x107e <CLCD_voidGotoXY+0x6c>
	case 3: Local_Address = 0x54+Copy_u8Col;	break;
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	8c 5a       	subi	r24, 0xAC	; 172
    107c:	89 83       	std	Y+1, r24	; 0x01

	}

	CLCD_voidSendCmd(Local_Address+DDRAM_ADDRESS);
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	80 58       	subi	r24, 0x80	; 128
    1082:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>


}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <CLCD_voidClrScr>:



void CLCD_voidClrScr(void)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
}
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <CLCD_voidCursorON>:
void CLCD_voidCursorON(void)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x0D);
    10b2:	8d e0       	ldi	r24, 0x0D	; 13
    10b4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <CLCD_voidCursorOFF>:
void CLCD_voidCursorOFF(void)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(0x0C);
    10c6:	8c e0       	ldi	r24, 0x0C	; 12
    10c8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

}
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <LCD_voidWriteSpecialChar>:
void LCD_voidWriteSpecialChar(const uint8 *Copy_u8Pattern, uint8 Copy_u8PatternNumber ,uint8 Copy_u8Row, uint8 Copy_u8Column)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	27 97       	sbiw	r28, 0x07	; 7
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	8b 83       	std	Y+3, r24	; 0x03
    10ea:	6d 83       	std	Y+5, r22	; 0x05
    10ec:	4e 83       	std	Y+6, r20	; 0x06
    10ee:	2f 83       	std	Y+7, r18	; 0x07

	uint8 Local_u8Adress=(Copy_u8PatternNumber*8);
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCmd(Local_u8Adress+64);
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	80 5c       	subi	r24, 0xC0	; 192
    1108:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

	for (uint8 i=0 ;i<8 ;i++)
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	1a c0       	rjmp	.+52     	; 0x1144 <LCD_voidWriteSpecialChar+0x72>
	{
		CLCD_voidSendData(Copy_u8Pattern[i+(Copy_u8PatternNumber*8)]);
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	9c 01       	movw	r18, r24
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	fc 01       	movw	r30, r24
    1134:	e2 0f       	add	r30, r18
    1136:	f3 1f       	adc	r31, r19
    1138:	80 81       	ld	r24, Z
    113a:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
{

	uint8 Local_u8Adress=(Copy_u8PatternNumber*8);
	CLCD_voidSendCmd(Local_u8Adress+64);

	for (uint8 i=0 ;i<8 ;i++)
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	88 30       	cpi	r24, 0x08	; 8
    1148:	18 f3       	brcs	.-58     	; 0x1110 <LCD_voidWriteSpecialChar+0x3e>
	{
		CLCD_voidSendData(Copy_u8Pattern[i+(Copy_u8PatternNumber*8)]);
	}


	CLCD_voidGotoXY(Copy_u8Row ,Copy_u8Column );
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidGotoXY>


	CLCD_voidSendData(Copy_u8PatternNumber);
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
}
    1158:	27 96       	adiw	r28, 0x07	; 7
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <DIO_u8SetPinValue>:
#include"DIO_prv.h"
#include"DIO_reg.h"


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)//which port we want to srt, and which pin
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	28 97       	sbiw	r28, 0x08	; 8
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	8a 83       	std	Y+2, r24	; 0x02
    1180:	6b 83       	std	Y+3, r22	; 0x03
    1182:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1184:	19 82       	std	Y+1, r1	; 0x01

		if (Copy_u8Pin <= DIO_u8PIN7)
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	88 30       	cpi	r24, 0x08	; 8
    118a:	08 f0       	brcs	.+2      	; 0x118e <DIO_u8SetPinValue+0x24>
    118c:	f4 c0       	rjmp	.+488    	; 0x1376 <DIO_u8SetPinValue+0x20c>
		{
			if(Copy_u8Value == DIO_u8PIN_LOW)
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	88 23       	and	r24, r24
    1192:	09 f0       	breq	.+2      	; 0x1196 <DIO_u8SetPinValue+0x2c>
    1194:	77 c0       	rjmp	.+238    	; 0x1284 <DIO_u8SetPinValue+0x11a>
			{
				switch(Copy_u8Port)//which port you want it as input
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	38 87       	std	Y+8, r19	; 0x08
    119e:	2f 83       	std	Y+7, r18	; 0x07
    11a0:	8f 81       	ldd	r24, Y+7	; 0x07
    11a2:	98 85       	ldd	r25, Y+8	; 0x08
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	59 f1       	breq	.+86     	; 0x1200 <DIO_u8SetPinValue+0x96>
    11aa:	2f 81       	ldd	r18, Y+7	; 0x07
    11ac:	38 85       	ldd	r19, Y+8	; 0x08
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	2c f4       	brge	.+10     	; 0x11be <DIO_u8SetPinValue+0x54>
    11b4:	8f 81       	ldd	r24, Y+7	; 0x07
    11b6:	98 85       	ldd	r25, Y+8	; 0x08
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	69 f0       	breq	.+26     	; 0x11d6 <DIO_u8SetPinValue+0x6c>
    11bc:	60 c0       	rjmp	.+192    	; 0x127e <DIO_u8SetPinValue+0x114>
    11be:	2f 81       	ldd	r18, Y+7	; 0x07
    11c0:	38 85       	ldd	r19, Y+8	; 0x08
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	89 f1       	breq	.+98     	; 0x122a <DIO_u8SetPinValue+0xc0>
    11c8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ca:	98 85       	ldd	r25, Y+8	; 0x08
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <DIO_u8SetPinValue+0x6a>
    11d2:	40 c0       	rjmp	.+128    	; 0x1254 <DIO_u8SetPinValue+0xea>
    11d4:	54 c0       	rjmp	.+168    	; 0x127e <DIO_u8SetPinValue+0x114>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    11d6:	ab e3       	ldi	r26, 0x3B	; 59
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_u8SetPinValue+0x8a>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_u8SetPinValue+0x86>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	bd c0       	rjmp	.+378    	; 0x137a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1200:	a8 e3       	ldi	r26, 0x38	; 56
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e8 e3       	ldi	r30, 0x38	; 56
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_u8SetPinValue+0xb4>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_u8SetPinValue+0xb0>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	a8 c0       	rjmp	.+336    	; 0x137a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    122a:	a5 e3       	ldi	r26, 0x35	; 53
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_u8SetPinValue+0xde>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_u8SetPinValue+0xda>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	93 c0       	rjmp	.+294    	; 0x137a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1254:	a2 e3       	ldi	r26, 0x32	; 50
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e2 e3       	ldi	r30, 0x32	; 50
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_u8SetPinValue+0x108>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_u8SetPinValue+0x104>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	7e c0       	rjmp	.+252    	; 0x137a <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState = NOK; break;//Not any port
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	7b c0       	rjmp	.+246    	; 0x137a <DIO_u8SetPinValue+0x210>
				}
			}
			else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	09 f0       	breq	.+2      	; 0x128c <DIO_u8SetPinValue+0x122>
    128a:	72 c0       	rjmp	.+228    	; 0x1370 <DIO_u8SetPinValue+0x206>
			{
				switch(Copy_u8Port)//which port you want it as input
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3e 83       	std	Y+6, r19	; 0x06
    1294:	2d 83       	std	Y+5, r18	; 0x05
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	49 f1       	breq	.+82     	; 0x12f2 <DIO_u8SetPinValue+0x188>
    12a0:	2d 81       	ldd	r18, Y+5	; 0x05
    12a2:	3e 81       	ldd	r19, Y+6	; 0x06
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <DIO_u8SetPinValue+0x14a>
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	61 f0       	breq	.+24     	; 0x12ca <DIO_u8SetPinValue+0x160>
    12b2:	5b c0       	rjmp	.+182    	; 0x136a <DIO_u8SetPinValue+0x200>
    12b4:	2d 81       	ldd	r18, Y+5	; 0x05
    12b6:	3e 81       	ldd	r19, Y+6	; 0x06
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	71 f1       	breq	.+92     	; 0x131a <DIO_u8SetPinValue+0x1b0>
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	91 05       	cpc	r25, r1
    12c6:	e9 f1       	breq	.+122    	; 0x1342 <DIO_u8SetPinValue+0x1d8>
    12c8:	50 c0       	rjmp	.+160    	; 0x136a <DIO_u8SetPinValue+0x200>
				{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    12ca:	ab e3       	ldi	r26, 0x3B	; 59
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e3       	ldi	r30, 0x3B	; 59
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8SetPinValue+0x17e>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_u8SetPinValue+0x17a>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	44 c0       	rjmp	.+136    	; 0x137a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    12f2:	a8 e3       	ldi	r26, 0x38	; 56
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_u8SetPinValue+0x1a6>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_u8SetPinValue+0x1a2>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	30 c0       	rjmp	.+96     	; 0x137a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    131a:	a5 e3       	ldi	r26, 0x35	; 53
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e5 e3       	ldi	r30, 0x35	; 53
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_u8SetPinValue+0x1ce>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_u8SetPinValue+0x1ca>
    133c:	84 2b       	or	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	1c c0       	rjmp	.+56     	; 0x137a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1342:	a2 e3       	ldi	r26, 0x32	; 50
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e2 e3       	ldi	r30, 0x32	; 50
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_u8SetPinValue+0x1f6>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_u8SetPinValue+0x1f2>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	08 c0       	rjmp	.+16     	; 0x137a <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState = NOK; break;//Not any port
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	05 c0       	rjmp	.+10     	; 0x137a <DIO_u8SetPinValue+0x210>
				}
			}
			else
			{
				Local_u8ErrorState = NOK;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	89 83       	std	Y+1, r24	; 0x01
		}


		return Local_u8ErrorState;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	28 96       	adiw	r28, 0x08	; 8
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <DIO_u8SetPinDirection>:




uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)//which port we want to srt, and which pin
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	28 97       	sbiw	r28, 0x08	; 8
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    13a4:	6b 83       	std	Y+3, r22	; 0x03
    13a6:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    13a8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 30       	cpi	r24, 0x08	; 8
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <DIO_u8SetPinDirection+0x24>
    13b0:	f4 c0       	rjmp	.+488    	; 0x159a <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    13b2:	8c 81       	ldd	r24, Y+4	; 0x04
    13b4:	88 23       	and	r24, r24
    13b6:	09 f0       	breq	.+2      	; 0x13ba <DIO_u8SetPinDirection+0x2c>
    13b8:	77 c0       	rjmp	.+238    	; 0x14a8 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)//which port you want it as input
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	38 87       	std	Y+8, r19	; 0x08
    13c2:	2f 83       	std	Y+7, r18	; 0x07
    13c4:	8f 81       	ldd	r24, Y+7	; 0x07
    13c6:	98 85       	ldd	r25, Y+8	; 0x08
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	91 05       	cpc	r25, r1
    13cc:	59 f1       	breq	.+86     	; 0x1424 <DIO_u8SetPinDirection+0x96>
    13ce:	2f 81       	ldd	r18, Y+7	; 0x07
    13d0:	38 85       	ldd	r19, Y+8	; 0x08
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <DIO_u8SetPinDirection+0x54>
    13d8:	8f 81       	ldd	r24, Y+7	; 0x07
    13da:	98 85       	ldd	r25, Y+8	; 0x08
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	69 f0       	breq	.+26     	; 0x13fa <DIO_u8SetPinDirection+0x6c>
    13e0:	60 c0       	rjmp	.+192    	; 0x14a2 <DIO_u8SetPinDirection+0x114>
    13e2:	2f 81       	ldd	r18, Y+7	; 0x07
    13e4:	38 85       	ldd	r19, Y+8	; 0x08
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	89 f1       	breq	.+98     	; 0x144e <DIO_u8SetPinDirection+0xc0>
    13ec:	8f 81       	ldd	r24, Y+7	; 0x07
    13ee:	98 85       	ldd	r25, Y+8	; 0x08
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	91 05       	cpc	r25, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <DIO_u8SetPinDirection+0x6a>
    13f6:	40 c0       	rjmp	.+128    	; 0x1478 <DIO_u8SetPinDirection+0xea>
    13f8:	54 c0       	rjmp	.+168    	; 0x14a2 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    13fa:	aa e3       	ldi	r26, 0x3A	; 58
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ea e3       	ldi	r30, 0x3A	; 58
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_u8SetPinDirection+0x8a>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_u8SetPinDirection+0x86>
    141c:	80 95       	com	r24
    141e:	84 23       	and	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	bd c0       	rjmp	.+378    	; 0x159e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    1424:	a7 e3       	ldi	r26, 0x37	; 55
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e7 e3       	ldi	r30, 0x37	; 55
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_u8SetPinDirection+0xb4>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_u8SetPinDirection+0xb0>
    1446:	80 95       	com	r24
    1448:	84 23       	and	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	a8 c0       	rjmp	.+336    	; 0x159e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    144e:	a4 e3       	ldi	r26, 0x34	; 52
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e4 e3       	ldi	r30, 0x34	; 52
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_u8SetPinDirection+0xde>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_u8SetPinDirection+0xda>
    1470:	80 95       	com	r24
    1472:	84 23       	and	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	93 c0       	rjmp	.+294    	; 0x159e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    1478:	a1 e3       	ldi	r26, 0x31	; 49
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e1 e3       	ldi	r30, 0x31	; 49
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_u8SetPinDirection+0x108>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_u8SetPinDirection+0x104>
    149a:	80 95       	com	r24
    149c:	84 23       	and	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	7e c0       	rjmp	.+252    	; 0x159e <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;//Not any port
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	7b c0       	rjmp	.+246    	; 0x159e <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <DIO_u8SetPinDirection+0x122>
    14ae:	72 c0       	rjmp	.+228    	; 0x1594 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)//which port you want it as input
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3e 83       	std	Y+6, r19	; 0x06
    14b8:	2d 83       	std	Y+5, r18	; 0x05
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	49 f1       	breq	.+82     	; 0x1516 <DIO_u8SetPinDirection+0x188>
    14c4:	2d 81       	ldd	r18, Y+5	; 0x05
    14c6:	3e 81       	ldd	r19, Y+6	; 0x06
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <DIO_u8SetPinDirection+0x14a>
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	61 f0       	breq	.+24     	; 0x14ee <DIO_u8SetPinDirection+0x160>
    14d6:	5b c0       	rjmp	.+182    	; 0x158e <DIO_u8SetPinDirection+0x200>
    14d8:	2d 81       	ldd	r18, Y+5	; 0x05
    14da:	3e 81       	ldd	r19, Y+6	; 0x06
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	71 f1       	breq	.+92     	; 0x153e <DIO_u8SetPinDirection+0x1b0>
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	e9 f1       	breq	.+122    	; 0x1566 <DIO_u8SetPinDirection+0x1d8>
    14ec:	50 c0       	rjmp	.+160    	; 0x158e <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    14ee:	aa e3       	ldi	r26, 0x3A	; 58
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ea e3       	ldi	r30, 0x3A	; 58
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <DIO_u8SetPinDirection+0x17e>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <DIO_u8SetPinDirection+0x17a>
    1510:	84 2b       	or	r24, r20
    1512:	8c 93       	st	X, r24
    1514:	44 c0       	rjmp	.+136    	; 0x159e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1516:	a7 e3       	ldi	r26, 0x37	; 55
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e7 e3       	ldi	r30, 0x37	; 55
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 2e       	mov	r0, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <DIO_u8SetPinDirection+0x1a6>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <DIO_u8SetPinDirection+0x1a2>
    1538:	84 2b       	or	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	30 c0       	rjmp	.+96     	; 0x159e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    153e:	a4 e3       	ldi	r26, 0x34	; 52
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e4 e3       	ldi	r30, 0x34	; 52
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_u8SetPinDirection+0x1ce>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_u8SetPinDirection+0x1ca>
    1560:	84 2b       	or	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	1c c0       	rjmp	.+56     	; 0x159e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    1566:	a1 e3       	ldi	r26, 0x31	; 49
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e1 e3       	ldi	r30, 0x31	; 49
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_u8SetPinDirection+0x1f6>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_u8SetPinDirection+0x1f2>
    1588:	84 2b       	or	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	08 c0       	rjmp	.+16     	; 0x159e <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;//Not any port
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	05 c0       	rjmp	.+10     	; 0x159e <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    159e:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a0:	28 96       	adiw	r28, 0x08	; 8
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <DIO_u8GetPinValue>:


uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)//which port we want to srt, and which pin
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	27 97       	sbiw	r28, 0x07	; 7
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	8a 83       	std	Y+2, r24	; 0x02
    15c8:	6b 83       	std	Y+3, r22	; 0x03
    15ca:	5d 83       	std	Y+5, r21	; 0x05
    15cc:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    15ce:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    15d0:	8c 81       	ldd	r24, Y+4	; 0x04
    15d2:	9d 81       	ldd	r25, Y+5	; 0x05
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	09 f4       	brne	.+2      	; 0x15da <DIO_u8GetPinValue+0x28>
    15d8:	7b c0       	rjmp	.+246    	; 0x16d0 <DIO_u8GetPinValue+0x11e>
	{
		if( Copy_u8Pin <= DIO_u8PIN7)
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	88 30       	cpi	r24, 0x08	; 8
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <DIO_u8GetPinValue+0x30>
    15e0:	74 c0       	rjmp	.+232    	; 0x16ca <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)//which port you want it as input
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	3f 83       	std	Y+7, r19	; 0x07
    15ea:	2e 83       	std	Y+6, r18	; 0x06
    15ec:	4e 81       	ldd	r20, Y+6	; 0x06
    15ee:	5f 81       	ldd	r21, Y+7	; 0x07
    15f0:	41 30       	cpi	r20, 0x01	; 1
    15f2:	51 05       	cpc	r21, r1
    15f4:	59 f1       	breq	.+86     	; 0x164c <DIO_u8GetPinValue+0x9a>
    15f6:	8e 81       	ldd	r24, Y+6	; 0x06
    15f8:	9f 81       	ldd	r25, Y+7	; 0x07
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	91 05       	cpc	r25, r1
    15fe:	34 f4       	brge	.+12     	; 0x160c <DIO_u8GetPinValue+0x5a>
    1600:	2e 81       	ldd	r18, Y+6	; 0x06
    1602:	3f 81       	ldd	r19, Y+7	; 0x07
    1604:	21 15       	cp	r18, r1
    1606:	31 05       	cpc	r19, r1
    1608:	69 f0       	breq	.+26     	; 0x1624 <DIO_u8GetPinValue+0x72>
    160a:	5c c0       	rjmp	.+184    	; 0x16c4 <DIO_u8GetPinValue+0x112>
    160c:	4e 81       	ldd	r20, Y+6	; 0x06
    160e:	5f 81       	ldd	r21, Y+7	; 0x07
    1610:	42 30       	cpi	r20, 0x02	; 2
    1612:	51 05       	cpc	r21, r1
    1614:	79 f1       	breq	.+94     	; 0x1674 <DIO_u8GetPinValue+0xc2>
    1616:	8e 81       	ldd	r24, Y+6	; 0x06
    1618:	9f 81       	ldd	r25, Y+7	; 0x07
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	91 05       	cpc	r25, r1
    161e:	09 f4       	brne	.+2      	; 0x1622 <DIO_u8GetPinValue+0x70>
    1620:	3d c0       	rjmp	.+122    	; 0x169c <DIO_u8GetPinValue+0xea>
    1622:	50 c0       	rjmp	.+160    	; 0x16c4 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:*Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
    1624:	e9 e3       	ldi	r30, 0x39	; 57
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a9 01       	movw	r20, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_u8GetPinValue+0x8a>
    1638:	55 95       	asr	r21
    163a:	47 95       	ror	r20
    163c:	8a 95       	dec	r24
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_u8GetPinValue+0x86>
    1640:	ca 01       	movw	r24, r20
    1642:	81 70       	andi	r24, 0x01	; 1
    1644:	ec 81       	ldd	r30, Y+4	; 0x04
    1646:	fd 81       	ldd	r31, Y+5	; 0x05
    1648:	80 83       	st	Z, r24
    164a:	44 c0       	rjmp	.+136    	; 0x16d4 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTB:*Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
    164c:	e6 e3       	ldi	r30, 0x36	; 54
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a9 01       	movw	r20, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_u8GetPinValue+0xb2>
    1660:	55 95       	asr	r21
    1662:	47 95       	ror	r20
    1664:	8a 95       	dec	r24
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_u8GetPinValue+0xae>
    1668:	ca 01       	movw	r24, r20
    166a:	81 70       	andi	r24, 0x01	; 1
    166c:	ec 81       	ldd	r30, Y+4	; 0x04
    166e:	fd 81       	ldd	r31, Y+5	; 0x05
    1670:	80 83       	st	Z, r24
    1672:	30 c0       	rjmp	.+96     	; 0x16d4 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTC:*Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
    1674:	e3 e3       	ldi	r30, 0x33	; 51
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a9 01       	movw	r20, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_u8GetPinValue+0xda>
    1688:	55 95       	asr	r21
    168a:	47 95       	ror	r20
    168c:	8a 95       	dec	r24
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_u8GetPinValue+0xd6>
    1690:	ca 01       	movw	r24, r20
    1692:	81 70       	andi	r24, 0x01	; 1
    1694:	ec 81       	ldd	r30, Y+4	; 0x04
    1696:	fd 81       	ldd	r31, Y+5	; 0x05
    1698:	80 83       	st	Z, r24
    169a:	1c c0       	rjmp	.+56     	; 0x16d4 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTD:*Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
    169c:	e0 e3       	ldi	r30, 0x30	; 48
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	88 2f       	mov	r24, r24
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a9 01       	movw	r20, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_u8GetPinValue+0x102>
    16b0:	55 95       	asr	r21
    16b2:	47 95       	ror	r20
    16b4:	8a 95       	dec	r24
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_u8GetPinValue+0xfe>
    16b8:	ca 01       	movw	r24, r20
    16ba:	81 70       	andi	r24, 0x01	; 1
    16bc:	ec 81       	ldd	r30, Y+4	; 0x04
    16be:	fd 81       	ldd	r31, Y+5	; 0x05
    16c0:	80 83       	st	Z, r24
    16c2:	08 c0       	rjmp	.+16     	; 0x16d4 <DIO_u8GetPinValue+0x122>
			default: Local_u8ErrorState = NOK; break;//Not any port
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_u8GetPinValue+0x122>
		}

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d6:	27 96       	adiw	r28, 0x07	; 7
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <DIO_u8SetPortDirection+0x6>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <DIO_u8SetPortDirection+0x8>
    16f0:	0f 92       	push	r0
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	8a 83       	std	Y+2, r24	; 0x02
    16f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    16fa:	19 82       	std	Y+1, r1	; 0x01


				switch(Copy_u8Port)//which port you want it as input
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3d 83       	std	Y+5, r19	; 0x05
    1704:	2c 83       	std	Y+4, r18	; 0x04
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	9d 81       	ldd	r25, Y+5	; 0x05
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	d1 f0       	breq	.+52     	; 0x1744 <DIO_u8SetPortDirection+0x5c>
    1710:	2c 81       	ldd	r18, Y+4	; 0x04
    1712:	3d 81       	ldd	r19, Y+5	; 0x05
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	2c f4       	brge	.+10     	; 0x1724 <DIO_u8SetPortDirection+0x3c>
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	9d 81       	ldd	r25, Y+5	; 0x05
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	61 f0       	breq	.+24     	; 0x173a <DIO_u8SetPortDirection+0x52>
    1722:	1f c0       	rjmp	.+62     	; 0x1762 <DIO_u8SetPortDirection+0x7a>
    1724:	2c 81       	ldd	r18, Y+4	; 0x04
    1726:	3d 81       	ldd	r19, Y+5	; 0x05
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	31 05       	cpc	r19, r1
    172c:	81 f0       	breq	.+32     	; 0x174e <DIO_u8SetPortDirection+0x66>
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	9d 81       	ldd	r25, Y+5	; 0x05
    1732:	83 30       	cpi	r24, 0x03	; 3
    1734:	91 05       	cpc	r25, r1
    1736:	81 f0       	breq	.+32     	; 0x1758 <DIO_u8SetPortDirection+0x70>
    1738:	14 c0       	rjmp	.+40     	; 0x1762 <DIO_u8SetPortDirection+0x7a>
				{
				case DIO_u8PORTA:DDRA = Copy_u8Direction; break;
    173a:	ea e3       	ldi	r30, 0x3A	; 58
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	80 83       	st	Z, r24
    1742:	11 c0       	rjmp	.+34     	; 0x1766 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTB:DDRB = Copy_u8Direction; break;
    1744:	e7 e3       	ldi	r30, 0x37	; 55
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	80 83       	st	Z, r24
    174c:	0c c0       	rjmp	.+24     	; 0x1766 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTC:DDRC = Copy_u8Direction; break;
    174e:	e4 e3       	ldi	r30, 0x34	; 52
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	80 83       	st	Z, r24
    1756:	07 c0       	rjmp	.+14     	; 0x1766 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTD:DDRD = Copy_u8Direction; break;
    1758:	e1 e3       	ldi	r30, 0x31	; 49
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	80 83       	st	Z, r24
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <DIO_u8SetPortDirection+0x7e>
				default: Local_u8ErrorState = NOK; break;//Not any port
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	89 83       	std	Y+1, r24	; 0x01
				}

		return Local_u8ErrorState;
    1766:	89 81       	ldd	r24, Y+1	; 0x01
}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <DIO_u8SetPortValue+0x6>
    177e:	00 d0       	rcall	.+0      	; 0x1780 <DIO_u8SetPortValue+0x8>
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState = OK;
    178a:	19 82       	std	Y+1, r1	; 0x01


				switch(Copy_u8Port)//which port you want it as input
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3d 83       	std	Y+5, r19	; 0x05
    1794:	2c 83       	std	Y+4, r18	; 0x04
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	91 05       	cpc	r25, r1
    179e:	d1 f0       	breq	.+52     	; 0x17d4 <DIO_u8SetPortValue+0x5c>
    17a0:	2c 81       	ldd	r18, Y+4	; 0x04
    17a2:	3d 81       	ldd	r19, Y+5	; 0x05
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <DIO_u8SetPortValue+0x3c>
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	61 f0       	breq	.+24     	; 0x17ca <DIO_u8SetPortValue+0x52>
    17b2:	1f c0       	rjmp	.+62     	; 0x17f2 <DIO_u8SetPortValue+0x7a>
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	3d 81       	ldd	r19, Y+5	; 0x05
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	81 f0       	breq	.+32     	; 0x17de <DIO_u8SetPortValue+0x66>
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	83 30       	cpi	r24, 0x03	; 3
    17c4:	91 05       	cpc	r25, r1
    17c6:	81 f0       	breq	.+32     	; 0x17e8 <DIO_u8SetPortValue+0x70>
    17c8:	14 c0       	rjmp	.+40     	; 0x17f2 <DIO_u8SetPortValue+0x7a>
				{
				case DIO_u8PORTA:PORTA = Copy_u8Value; break;
    17ca:	eb e3       	ldi	r30, 0x3B	; 59
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	80 83       	st	Z, r24
    17d2:	11 c0       	rjmp	.+34     	; 0x17f6 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTB:PORTB = Copy_u8Value; break;
    17d4:	e8 e3       	ldi	r30, 0x38	; 56
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	80 83       	st	Z, r24
    17dc:	0c c0       	rjmp	.+24     	; 0x17f6 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTC:PORTC = Copy_u8Value; break;
    17de:	e5 e3       	ldi	r30, 0x35	; 53
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	80 83       	st	Z, r24
    17e6:	07 c0       	rjmp	.+14     	; 0x17f6 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTD:PORTD = Copy_u8Value; break;
    17e8:	e2 e3       	ldi	r30, 0x32	; 50
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	80 83       	st	Z, r24
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_u8SetPortValue+0x7e>
				default: Local_u8ErrorState = NOK; break;//Not any port
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	89 83       	std	Y+1, r24	; 0x01
				}

		return Local_u8ErrorState;
    17f6:	89 81       	ldd	r24, Y+1	; 0x01

}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <DIO_u8TogglePinValue+0x6>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <DIO_u8TogglePinValue+0x8>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <DIO_u8TogglePinValue+0xa>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	8a 83       	std	Y+2, r24	; 0x02
    1818:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    181a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	88 30       	cpi	r24, 0x08	; 8
    1820:	08 f0       	brcs	.+2      	; 0x1824 <DIO_u8TogglePinValue+0x1c>
    1822:	74 c0       	rjmp	.+232    	; 0x190c <DIO_u8TogglePinValue+0x104>
	{

			switch(Copy_u8Port)//which port you want it as input
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3e 83       	std	Y+6, r19	; 0x06
    182c:	2d 83       	std	Y+5, r18	; 0x05
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	91 05       	cpc	r25, r1
    1836:	49 f1       	breq	.+82     	; 0x188a <DIO_u8TogglePinValue+0x82>
    1838:	2d 81       	ldd	r18, Y+5	; 0x05
    183a:	3e 81       	ldd	r19, Y+6	; 0x06
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	2c f4       	brge	.+10     	; 0x184c <DIO_u8TogglePinValue+0x44>
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	61 f0       	breq	.+24     	; 0x1862 <DIO_u8TogglePinValue+0x5a>
    184a:	5b c0       	rjmp	.+182    	; 0x1902 <DIO_u8TogglePinValue+0xfa>
    184c:	2d 81       	ldd	r18, Y+5	; 0x05
    184e:	3e 81       	ldd	r19, Y+6	; 0x06
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	71 f1       	breq	.+92     	; 0x18b2 <DIO_u8TogglePinValue+0xaa>
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	83 30       	cpi	r24, 0x03	; 3
    185c:	91 05       	cpc	r25, r1
    185e:	e9 f1       	breq	.+122    	; 0x18da <DIO_u8TogglePinValue+0xd2>
    1860:	50 c0       	rjmp	.+160    	; 0x1902 <DIO_u8TogglePinValue+0xfa>
			{
			case DIO_u8PORTA:TOG_BIT(PORTA,Copy_u8Pin); break;
    1862:	ab e3       	ldi	r26, 0x3B	; 59
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	eb e3       	ldi	r30, 0x3B	; 59
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_u8TogglePinValue+0x78>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_u8TogglePinValue+0x74>
    1884:	84 27       	eor	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	3e c0       	rjmp	.+124    	; 0x1906 <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTB:TOG_BIT(PORTB,Copy_u8Pin); break;
    188a:	a8 e3       	ldi	r26, 0x38	; 56
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e8 e3       	ldi	r30, 0x38	; 56
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_u8TogglePinValue+0xa0>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_u8TogglePinValue+0x9c>
    18ac:	84 27       	eor	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	2a c0       	rjmp	.+84     	; 0x1906 <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTC:TOG_BIT(PORTC,Copy_u8Pin); break;
    18b2:	a5 e3       	ldi	r26, 0x35	; 53
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e3       	ldi	r30, 0x35	; 53
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_u8TogglePinValue+0xc8>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <DIO_u8TogglePinValue+0xc4>
    18d4:	84 27       	eor	r24, r20
    18d6:	8c 93       	st	X, r24
    18d8:	16 c0       	rjmp	.+44     	; 0x1906 <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTD:TOG_BIT(PORTD,Copy_u8Pin); break;
    18da:	a2 e3       	ldi	r26, 0x32	; 50
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e2 e3       	ldi	r30, 0x32	; 50
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_u8TogglePinValue+0xf0>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_u8TogglePinValue+0xec>
    18fc:	84 27       	eor	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_u8TogglePinValue+0xfe>
			default: Local_u8ErrorState = NOK; break;//Not any port
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return Local_u8ErrorState;
	}

		return Local_u8ErrorState;
    1906:	99 81       	ldd	r25, Y+1	; 0x01
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_u8TogglePinValue+0x108>
			default: Local_u8ErrorState = NOK; break;//Not any port
			}
	}
	else
	{
		return Local_u8ErrorState;
    190c:	29 81       	ldd	r18, Y+1	; 0x01
    190e:	2c 83       	std	Y+4, r18	; 0x04
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
	}

		return Local_u8ErrorState;
}
    1912:	26 96       	adiw	r28, 0x06	; 6
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <main>:
		   0x00

};

void main(void)
{
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	ce 5e       	subi	r28, 0xEE	; 238
    1932:	d0 40       	sbci	r29, 0x00	; 0
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
CLCD_voidInit();
    193e:	0e 94 90 06 	call	0xd20	; 0xd20 <CLCD_voidInit>
LCD_voidWriteSpecialChar(Copy_u8Pattern,0,0,0);
    1942:	8c e9       	ldi	r24, 0x9C	; 156
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    1950:	fe 01       	movw	r30, r28
    1952:	e5 51       	subi	r30, 0x15	; 21
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	aa e7       	ldi	r26, 0x7A	; 122
    195c:	b4 e4       	ldi	r27, 0x44	; 68
    195e:	80 83       	st	Z, r24
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	a2 83       	std	Z+2, r26	; 0x02
    1964:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1966:	8e 01       	movw	r16, r28
    1968:	09 51       	subi	r16, 0x19	; 25
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	fe 01       	movw	r30, r28
    196e:	e5 51       	subi	r30, 0x15	; 21
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4a e7       	ldi	r20, 0x7A	; 122
    1980:	55 e4       	ldi	r21, 0x45	; 69
    1982:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	f8 01       	movw	r30, r16
    198c:	80 83       	st	Z, r24
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	a2 83       	std	Z+2, r26	; 0x02
    1992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1994:	fe 01       	movw	r30, r28
    1996:	e9 51       	subi	r30, 0x19	; 25
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	60 81       	ld	r22, Z
    199c:	71 81       	ldd	r23, Z+1	; 0x01
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	44 f4       	brge	.+16     	; 0x19c2 <main+0x9e>
		__ticks = 1;
    19b2:	fe 01       	movw	r30, r28
    19b4:	eb 51       	subi	r30, 0x1B	; 27
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	80 83       	st	Z, r24
    19c0:	64 c0       	rjmp	.+200    	; 0x1a8a <main+0x166>
	else if (__tmp > 65535)
    19c2:	fe 01       	movw	r30, r28
    19c4:	e9 51       	subi	r30, 0x19	; 25
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	3f ef       	ldi	r19, 0xFF	; 255
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	57 e4       	ldi	r21, 0x47	; 71
    19d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	0c f0       	brlt	.+2      	; 0x19e2 <main+0xbe>
    19e0:	43 c0       	rjmp	.+134    	; 0x1a68 <main+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	fe 01       	movw	r30, r28
    19e4:	e5 51       	subi	r30, 0x15	; 21
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	60 81       	ld	r22, Z
    19ea:	71 81       	ldd	r23, Z+1	; 0x01
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8e 01       	movw	r16, r28
    1a02:	0b 51       	subi	r16, 0x1B	; 27
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
    1a0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	f8 01       	movw	r30, r16
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	80 83       	st	Z, r24
    1a18:	1f c0       	rjmp	.+62     	; 0x1a58 <main+0x134>
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ed 51       	subi	r30, 0x1D	; 29
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 e9       	ldi	r24, 0x90	; 144
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	91 83       	std	Z+1, r25	; 0x01
    1a26:	80 83       	st	Z, r24
    1a28:	fe 01       	movw	r30, r28
    1a2a:	ed 51       	subi	r30, 0x1D	; 29
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <main+0x10e>
    1a36:	fe 01       	movw	r30, r28
    1a38:	ed 51       	subi	r30, 0x1D	; 29
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a40:	de 01       	movw	r26, r28
    1a42:	ab 51       	subi	r26, 0x1B	; 27
    1a44:	bf 4f       	sbci	r27, 0xFF	; 255
    1a46:	fe 01       	movw	r30, r28
    1a48:	eb 51       	subi	r30, 0x1B	; 27
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	11 96       	adiw	r26, 0x01	; 1
    1a54:	9c 93       	st	X, r25
    1a56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a58:	fe 01       	movw	r30, r28
    1a5a:	eb 51       	subi	r30, 0x1B	; 27
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	d1 f6       	brne	.-76     	; 0x1a1a <main+0xf6>
    1a66:	27 c0       	rjmp	.+78     	; 0x1ab6 <main+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a68:	8e 01       	movw	r16, r28
    1a6a:	0b 51       	subi	r16, 0x1B	; 27
    1a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e9 51       	subi	r30, 0x19	; 25
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	f8 01       	movw	r30, r16
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24
    1a8a:	de 01       	movw	r26, r28
    1a8c:	af 51       	subi	r26, 0x1F	; 31
    1a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a90:	fe 01       	movw	r30, r28
    1a92:	eb 51       	subi	r30, 0x1B	; 27
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	8d 93       	st	X+, r24
    1a9c:	9c 93       	st	X, r25
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ef 51       	subi	r30, 0x1F	; 31
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 81       	ld	r24, Z
    1aa6:	91 81       	ldd	r25, Z+1	; 0x01
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <main+0x184>
    1aac:	fe 01       	movw	r30, r28
    1aae:	ef 51       	subi	r30, 0x1F	; 31
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
_delay_ms(1000);
CLCD_voidClrScr();
    1ab6:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
LCD_voidWriteSpecialChar(Copy_u8Pattern,0,0,1);
    1aba:	8c e9       	ldi	r24, 0x9C	; 156
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	21 e0       	ldi	r18, 0x01	; 1
    1ac4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e3 52       	subi	r30, 0x23	; 35
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	aa e7       	ldi	r26, 0x7A	; 122
    1ad4:	b4 e4       	ldi	r27, 0x44	; 68
    1ad6:	80 83       	st	Z, r24
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	a2 83       	std	Z+2, r26	; 0x02
    1adc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ade:	8e 01       	movw	r16, r28
    1ae0:	07 52       	subi	r16, 0x27	; 39
    1ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e3 52       	subi	r30, 0x23	; 35
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	55 e4       	ldi	r21, 0x45	; 69
    1afa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	f8 01       	movw	r30, r16
    1b04:	80 83       	st	Z, r24
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	a2 83       	std	Z+2, r26	; 0x02
    1b0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e7 52       	subi	r30, 0x27	; 39
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	44 f4       	brge	.+16     	; 0x1b3a <main+0x216>
		__ticks = 1;
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e9 52       	subi	r30, 0x29	; 41
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
    1b38:	64 c0       	rjmp	.+200    	; 0x1c02 <main+0x2de>
	else if (__tmp > 65535)
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e7 52       	subi	r30, 0x27	; 39
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	0c f0       	brlt	.+2      	; 0x1b5a <main+0x236>
    1b58:	43 c0       	rjmp	.+134    	; 0x1be0 <main+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e3 52       	subi	r30, 0x23	; 35
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	60 81       	ld	r22, Z
    1b62:	71 81       	ldd	r23, Z+1	; 0x01
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e2       	ldi	r20, 0x20	; 32
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8e 01       	movw	r16, r28
    1b7a:	09 52       	subi	r16, 0x29	; 41
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	80 83       	st	Z, r24
    1b90:	1f c0       	rjmp	.+62     	; 0x1bd0 <main+0x2ac>
    1b92:	fe 01       	movw	r30, r28
    1b94:	eb 52       	subi	r30, 0x2B	; 43
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 e9       	ldi	r24, 0x90	; 144
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	91 83       	std	Z+1, r25	; 0x01
    1b9e:	80 83       	st	Z, r24
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	eb 52       	subi	r30, 0x2B	; 43
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <main+0x286>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	eb 52       	subi	r30, 0x2B	; 43
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb8:	de 01       	movw	r26, r28
    1bba:	a9 52       	subi	r26, 0x29	; 41
    1bbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e9 52       	subi	r30, 0x29	; 41
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 81       	ld	r24, Z
    1bc6:	91 81       	ldd	r25, Z+1	; 0x01
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	11 96       	adiw	r26, 0x01	; 1
    1bcc:	9c 93       	st	X, r25
    1bce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e9 52       	subi	r30, 0x29	; 41
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	80 81       	ld	r24, Z
    1bd8:	91 81       	ldd	r25, Z+1	; 0x01
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	d1 f6       	brne	.-76     	; 0x1b92 <main+0x26e>
    1bde:	27 c0       	rjmp	.+78     	; 0x1c2e <main+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be0:	8e 01       	movw	r16, r28
    1be2:	09 52       	subi	r16, 0x29	; 41
    1be4:	1f 4f       	sbci	r17, 0xFF	; 255
    1be6:	fe 01       	movw	r30, r28
    1be8:	e7 52       	subi	r30, 0x27	; 39
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	80 83       	st	Z, r24
    1c02:	de 01       	movw	r26, r28
    1c04:	ad 52       	subi	r26, 0x2D	; 45
    1c06:	bf 4f       	sbci	r27, 0xFF	; 255
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e9 52       	subi	r30, 0x29	; 41
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	8d 93       	st	X+, r24
    1c14:	9c 93       	st	X, r25
    1c16:	fe 01       	movw	r30, r28
    1c18:	ed 52       	subi	r30, 0x2D	; 45
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	80 81       	ld	r24, Z
    1c1e:	91 81       	ldd	r25, Z+1	; 0x01
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <main+0x2fc>
    1c24:	fe 01       	movw	r30, r28
    1c26:	ed 52       	subi	r30, 0x2D	; 45
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
_delay_ms(1000);
CLCD_voidClrScr();
    1c2e:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
LCD_voidWriteSpecialChar(Copy_u8Pattern,0,0,2);
    1c32:	8c e9       	ldi	r24, 0x9C	; 156
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	22 e0       	ldi	r18, 0x02	; 2
    1c3c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    1c40:	fe 01       	movw	r30, r28
    1c42:	e1 53       	subi	r30, 0x31	; 49
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	aa e7       	ldi	r26, 0x7A	; 122
    1c4c:	b4 e4       	ldi	r27, 0x44	; 68
    1c4e:	80 83       	st	Z, r24
    1c50:	91 83       	std	Z+1, r25	; 0x01
    1c52:	a2 83       	std	Z+2, r26	; 0x02
    1c54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c56:	8e 01       	movw	r16, r28
    1c58:	05 53       	subi	r16, 0x35	; 53
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e1 53       	subi	r30, 0x31	; 49
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a e7       	ldi	r20, 0x7A	; 122
    1c70:	55 e4       	ldi	r21, 0x45	; 69
    1c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	80 83       	st	Z, r24
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	a2 83       	std	Z+2, r26	; 0x02
    1c82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c84:	fe 01       	movw	r30, r28
    1c86:	e5 53       	subi	r30, 0x35	; 53
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	60 81       	ld	r22, Z
    1c8c:	71 81       	ldd	r23, Z+1	; 0x01
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	5f e3       	ldi	r21, 0x3F	; 63
    1c9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c9e:	88 23       	and	r24, r24
    1ca0:	44 f4       	brge	.+16     	; 0x1cb2 <main+0x38e>
		__ticks = 1;
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e7 53       	subi	r30, 0x37	; 55
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
    1cb0:	64 c0       	rjmp	.+200    	; 0x1d7a <main+0x456>
	else if (__tmp > 65535)
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e5 53       	subi	r30, 0x35	; 53
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	60 81       	ld	r22, Z
    1cba:	71 81       	ldd	r23, Z+1	; 0x01
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	0c f0       	brlt	.+2      	; 0x1cd2 <main+0x3ae>
    1cd0:	43 c0       	rjmp	.+134    	; 0x1d58 <main+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e1 53       	subi	r30, 0x31	; 49
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8e 01       	movw	r16, r28
    1cf2:	07 53       	subi	r16, 0x37	; 55
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	cd 01       	movw	r24, r26
    1cfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	f8 01       	movw	r30, r16
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	80 83       	st	Z, r24
    1d08:	1f c0       	rjmp	.+62     	; 0x1d48 <main+0x424>
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e9 53       	subi	r30, 0x39	; 57
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 e9       	ldi	r24, 0x90	; 144
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	80 83       	st	Z, r24
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e9 53       	subi	r30, 0x39	; 57
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <main+0x3fe>
    1d26:	fe 01       	movw	r30, r28
    1d28:	e9 53       	subi	r30, 0x39	; 57
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	91 83       	std	Z+1, r25	; 0x01
    1d2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d30:	de 01       	movw	r26, r28
    1d32:	a7 53       	subi	r26, 0x37	; 55
    1d34:	bf 4f       	sbci	r27, 0xFF	; 255
    1d36:	fe 01       	movw	r30, r28
    1d38:	e7 53       	subi	r30, 0x37	; 55
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	11 96       	adiw	r26, 0x01	; 1
    1d44:	9c 93       	st	X, r25
    1d46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e7 53       	subi	r30, 0x37	; 55
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	d1 f6       	brne	.-76     	; 0x1d0a <main+0x3e6>
    1d56:	27 c0       	rjmp	.+78     	; 0x1da6 <main+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d58:	8e 01       	movw	r16, r28
    1d5a:	07 53       	subi	r16, 0x37	; 55
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e5 53       	subi	r30, 0x35	; 53
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	f8 01       	movw	r30, r16
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
    1d7a:	de 01       	movw	r26, r28
    1d7c:	ab 53       	subi	r26, 0x3B	; 59
    1d7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d80:	fe 01       	movw	r30, r28
    1d82:	e7 53       	subi	r30, 0x37	; 55
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	80 81       	ld	r24, Z
    1d88:	91 81       	ldd	r25, Z+1	; 0x01
    1d8a:	8d 93       	st	X+, r24
    1d8c:	9c 93       	st	X, r25
    1d8e:	fe 01       	movw	r30, r28
    1d90:	eb 53       	subi	r30, 0x3B	; 59
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <main+0x474>
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	eb 53       	subi	r30, 0x3B	; 59
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
_delay_ms(1000);
CLCD_voidClrScr();
    1da6:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
LCD_voidWriteSpecialChar(Copy_u8Pattern,0,0,3);
    1daa:	8c e9       	ldi	r24, 0x9C	; 156
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	23 e0       	ldi	r18, 0x03	; 3
    1db4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    1db8:	fe 01       	movw	r30, r28
    1dba:	ef 53       	subi	r30, 0x3F	; 63
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	aa e7       	ldi	r26, 0x7A	; 122
    1dc4:	b4 e4       	ldi	r27, 0x44	; 68
    1dc6:	80 83       	st	Z, r24
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	a2 83       	std	Z+2, r26	; 0x02
    1dcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	8e 01       	movw	r16, r28
    1dd0:	03 54       	subi	r16, 0x43	; 67
    1dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ef 53       	subi	r30, 0x3F	; 63
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	4a e7       	ldi	r20, 0x7A	; 122
    1de8:	55 e4       	ldi	r21, 0x45	; 69
    1dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	f8 01       	movw	r30, r16
    1df4:	80 83       	st	Z, r24
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	a2 83       	std	Z+2, r26	; 0x02
    1dfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e3 54       	subi	r30, 0x43	; 67
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	44 f4       	brge	.+16     	; 0x1e2a <main+0x506>
		__ticks = 1;
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e5 54       	subi	r30, 0x45	; 69
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
    1e28:	64 c0       	rjmp	.+200    	; 0x1ef2 <main+0x5ce>
	else if (__tmp > 65535)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e3 54       	subi	r30, 0x43	; 67
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	0c f0       	brlt	.+2      	; 0x1e4a <main+0x526>
    1e48:	43 c0       	rjmp	.+134    	; 0x1ed0 <main+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ef 53       	subi	r30, 0x3F	; 63
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8e 01       	movw	r16, r28
    1e6a:	05 54       	subi	r16, 0x45	; 69
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	80 83       	st	Z, r24
    1e80:	1f c0       	rjmp	.+62     	; 0x1ec0 <main+0x59c>
    1e82:	fe 01       	movw	r30, r28
    1e84:	e7 54       	subi	r30, 0x47	; 71
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 e9       	ldi	r24, 0x90	; 144
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
    1e90:	fe 01       	movw	r30, r28
    1e92:	e7 54       	subi	r30, 0x47	; 71
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <main+0x576>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e7 54       	subi	r30, 0x47	; 71
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	de 01       	movw	r26, r28
    1eaa:	a5 54       	subi	r26, 0x45	; 69
    1eac:	bf 4f       	sbci	r27, 0xFF	; 255
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e5 54       	subi	r30, 0x45	; 69
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	11 96       	adiw	r26, 0x01	; 1
    1ebc:	9c 93       	st	X, r25
    1ebe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e5 54       	subi	r30, 0x45	; 69
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	d1 f6       	brne	.-76     	; 0x1e82 <main+0x55e>
    1ece:	27 c0       	rjmp	.+78     	; 0x1f1e <main+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	05 54       	subi	r16, 0x45	; 69
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e3 54       	subi	r30, 0x43	; 67
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	f8 01       	movw	r30, r16
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    1ef2:	de 01       	movw	r26, r28
    1ef4:	a9 54       	subi	r26, 0x49	; 73
    1ef6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e5 54       	subi	r30, 0x45	; 69
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	8d 93       	st	X+, r24
    1f04:	9c 93       	st	X, r25
    1f06:	fe 01       	movw	r30, r28
    1f08:	e9 54       	subi	r30, 0x49	; 73
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 81       	ld	r24, Z
    1f0e:	91 81       	ldd	r25, Z+1	; 0x01
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <main+0x5ec>
    1f14:	fe 01       	movw	r30, r28
    1f16:	e9 54       	subi	r30, 0x49	; 73
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
_delay_ms(1000);
CLCD_voidClrScr();
    1f1e:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
LCD_voidWriteSpecialChar(Copy_u8Pattern,0,0,4);
    1f22:	8c e9       	ldi	r24, 0x9C	; 156
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	24 e0       	ldi	r18, 0x04	; 4
    1f2c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    1f30:	fe 01       	movw	r30, r28
    1f32:	ed 54       	subi	r30, 0x4D	; 77
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	aa e7       	ldi	r26, 0x7A	; 122
    1f3c:	b4 e4       	ldi	r27, 0x44	; 68
    1f3e:	80 83       	st	Z, r24
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	a2 83       	std	Z+2, r26	; 0x02
    1f44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f46:	8e 01       	movw	r16, r28
    1f48:	01 55       	subi	r16, 0x51	; 81
    1f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	ed 54       	subi	r30, 0x4D	; 77
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	60 81       	ld	r22, Z
    1f54:	71 81       	ldd	r23, Z+1	; 0x01
    1f56:	82 81       	ldd	r24, Z+2	; 0x02
    1f58:	93 81       	ldd	r25, Z+3	; 0x03
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4a e7       	ldi	r20, 0x7A	; 122
    1f60:	55 e4       	ldi	r21, 0x45	; 69
    1f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	f8 01       	movw	r30, r16
    1f6c:	80 83       	st	Z, r24
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	a2 83       	std	Z+2, r26	; 0x02
    1f72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f74:	fe 01       	movw	r30, r28
    1f76:	e1 55       	subi	r30, 0x51	; 81
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	44 f4       	brge	.+16     	; 0x1fa2 <main+0x67e>
		__ticks = 1;
    1f92:	fe 01       	movw	r30, r28
    1f94:	e3 55       	subi	r30, 0x53	; 83
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	80 83       	st	Z, r24
    1fa0:	64 c0       	rjmp	.+200    	; 0x206a <main+0x746>
	else if (__tmp > 65535)
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e1 55       	subi	r30, 0x51	; 81
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	3f ef       	ldi	r19, 0xFF	; 255
    1fb4:	4f e7       	ldi	r20, 0x7F	; 127
    1fb6:	57 e4       	ldi	r21, 0x47	; 71
    1fb8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fbc:	18 16       	cp	r1, r24
    1fbe:	0c f0       	brlt	.+2      	; 0x1fc2 <main+0x69e>
    1fc0:	43 c0       	rjmp	.+134    	; 0x2048 <main+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	ed 54       	subi	r30, 0x4D	; 77
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	60 81       	ld	r22, Z
    1fca:	71 81       	ldd	r23, Z+1	; 0x01
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e2       	ldi	r20, 0x20	; 32
    1fd6:	51 e4       	ldi	r21, 0x41	; 65
    1fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8e 01       	movw	r16, r28
    1fe2:	03 55       	subi	r16, 0x53	; 83
    1fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	80 83       	st	Z, r24
    1ff8:	1f c0       	rjmp	.+62     	; 0x2038 <main+0x714>
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e5 55       	subi	r30, 0x55	; 85
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 e9       	ldi	r24, 0x90	; 144
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
    2008:	fe 01       	movw	r30, r28
    200a:	e5 55       	subi	r30, 0x55	; 85
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	f1 f7       	brne	.-4      	; 0x2012 <main+0x6ee>
    2016:	fe 01       	movw	r30, r28
    2018:	e5 55       	subi	r30, 0x55	; 85
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	de 01       	movw	r26, r28
    2022:	a3 55       	subi	r26, 0x53	; 83
    2024:	bf 4f       	sbci	r27, 0xFF	; 255
    2026:	fe 01       	movw	r30, r28
    2028:	e3 55       	subi	r30, 0x53	; 83
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	11 96       	adiw	r26, 0x01	; 1
    2034:	9c 93       	st	X, r25
    2036:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	fe 01       	movw	r30, r28
    203a:	e3 55       	subi	r30, 0x53	; 83
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	d1 f6       	brne	.-76     	; 0x1ffa <main+0x6d6>
    2046:	27 c0       	rjmp	.+78     	; 0x2096 <main+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2048:	8e 01       	movw	r16, r28
    204a:	03 55       	subi	r16, 0x53	; 83
    204c:	1f 4f       	sbci	r17, 0xFF	; 255
    204e:	fe 01       	movw	r30, r28
    2050:	e1 55       	subi	r30, 0x51	; 81
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	93 81       	ldd	r25, Z+3	; 0x03
    205c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	f8 01       	movw	r30, r16
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	80 83       	st	Z, r24
    206a:	de 01       	movw	r26, r28
    206c:	a7 55       	subi	r26, 0x57	; 87
    206e:	bf 4f       	sbci	r27, 0xFF	; 255
    2070:	fe 01       	movw	r30, r28
    2072:	e3 55       	subi	r30, 0x53	; 83
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	80 81       	ld	r24, Z
    2078:	91 81       	ldd	r25, Z+1	; 0x01
    207a:	8d 93       	st	X+, r24
    207c:	9c 93       	st	X, r25
    207e:	fe 01       	movw	r30, r28
    2080:	e7 55       	subi	r30, 0x57	; 87
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 81       	ld	r24, Z
    2086:	91 81       	ldd	r25, Z+1	; 0x01
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <main+0x764>
    208c:	fe 01       	movw	r30, r28
    208e:	e7 55       	subi	r30, 0x57	; 87
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	80 83       	st	Z, r24
_delay_ms(1000);
CLCD_voidClrScr();
    2096:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>

	CLCD_voidGotoXY(1,1);
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	61 e0       	ldi	r22, 0x01	; 1
    209e:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidGotoXY>
	CLCD_u8SendString("HAMOKSHA WOKE!");
    20a2:	80 e6       	ldi	r24, 0x60	; 96
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 48 07 	call	0xe90	; 0xe90 <CLCD_u8SendString>
    20aa:	fe 01       	movw	r30, r28
    20ac:	eb 55       	subi	r30, 0x5B	; 91
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	aa ef       	ldi	r26, 0xFA	; 250
    20b6:	b4 e4       	ldi	r27, 0x44	; 68
    20b8:	80 83       	st	Z, r24
    20ba:	91 83       	std	Z+1, r25	; 0x01
    20bc:	a2 83       	std	Z+2, r26	; 0x02
    20be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c0:	8e 01       	movw	r16, r28
    20c2:	0f 55       	subi	r16, 0x5F	; 95
    20c4:	1f 4f       	sbci	r17, 0xFF	; 255
    20c6:	fe 01       	movw	r30, r28
    20c8:	eb 55       	subi	r30, 0x5B	; 91
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	60 81       	ld	r22, Z
    20ce:	71 81       	ldd	r23, Z+1	; 0x01
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a e7       	ldi	r20, 0x7A	; 122
    20da:	55 e4       	ldi	r21, 0x45	; 69
    20dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	f8 01       	movw	r30, r16
    20e6:	80 83       	st	Z, r24
    20e8:	91 83       	std	Z+1, r25	; 0x01
    20ea:	a2 83       	std	Z+2, r26	; 0x02
    20ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ee:	fe 01       	movw	r30, r28
    20f0:	ef 55       	subi	r30, 0x5F	; 95
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e8       	ldi	r20, 0x80	; 128
    2102:	5f e3       	ldi	r21, 0x3F	; 63
    2104:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2108:	88 23       	and	r24, r24
    210a:	44 f4       	brge	.+16     	; 0x211c <main+0x7f8>
		__ticks = 1;
    210c:	fe 01       	movw	r30, r28
    210e:	e1 56       	subi	r30, 0x61	; 97
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	80 83       	st	Z, r24
    211a:	64 c0       	rjmp	.+200    	; 0x21e4 <main+0x8c0>
	else if (__tmp > 65535)
    211c:	fe 01       	movw	r30, r28
    211e:	ef 55       	subi	r30, 0x5F	; 95
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	3f ef       	ldi	r19, 0xFF	; 255
    212e:	4f e7       	ldi	r20, 0x7F	; 127
    2130:	57 e4       	ldi	r21, 0x47	; 71
    2132:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2136:	18 16       	cp	r1, r24
    2138:	0c f0       	brlt	.+2      	; 0x213c <main+0x818>
    213a:	43 c0       	rjmp	.+134    	; 0x21c2 <main+0x89e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213c:	fe 01       	movw	r30, r28
    213e:	eb 55       	subi	r30, 0x5B	; 91
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e2       	ldi	r20, 0x20	; 32
    2150:	51 e4       	ldi	r21, 0x41	; 65
    2152:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8e 01       	movw	r16, r28
    215c:	01 56       	subi	r16, 0x61	; 97
    215e:	1f 4f       	sbci	r17, 0xFF	; 255
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	f8 01       	movw	r30, r16
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	80 83       	st	Z, r24
    2172:	1f c0       	rjmp	.+62     	; 0x21b2 <main+0x88e>
    2174:	fe 01       	movw	r30, r28
    2176:	e3 56       	subi	r30, 0x63	; 99
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	80 e9       	ldi	r24, 0x90	; 144
    217c:	91 e0       	ldi	r25, 0x01	; 1
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
    2182:	fe 01       	movw	r30, r28
    2184:	e3 56       	subi	r30, 0x63	; 99
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 81       	ld	r24, Z
    218a:	91 81       	ldd	r25, Z+1	; 0x01
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <main+0x868>
    2190:	fe 01       	movw	r30, r28
    2192:	e3 56       	subi	r30, 0x63	; 99
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219a:	de 01       	movw	r26, r28
    219c:	a1 56       	subi	r26, 0x61	; 97
    219e:	bf 4f       	sbci	r27, 0xFF	; 255
    21a0:	fe 01       	movw	r30, r28
    21a2:	e1 56       	subi	r30, 0x61	; 97
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	11 96       	adiw	r26, 0x01	; 1
    21ae:	9c 93       	st	X, r25
    21b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b2:	fe 01       	movw	r30, r28
    21b4:	e1 56       	subi	r30, 0x61	; 97
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 81       	ld	r24, Z
    21ba:	91 81       	ldd	r25, Z+1	; 0x01
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	d1 f6       	brne	.-76     	; 0x2174 <main+0x850>
    21c0:	27 c0       	rjmp	.+78     	; 0x2210 <main+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	8e 01       	movw	r16, r28
    21c4:	01 56       	subi	r16, 0x61	; 97
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	fe 01       	movw	r30, r28
    21ca:	ef 55       	subi	r30, 0x5F	; 95
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	f8 01       	movw	r30, r16
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	80 83       	st	Z, r24
    21e4:	de 01       	movw	r26, r28
    21e6:	a5 56       	subi	r26, 0x65	; 101
    21e8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ea:	fe 01       	movw	r30, r28
    21ec:	e1 56       	subi	r30, 0x61	; 97
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	80 81       	ld	r24, Z
    21f2:	91 81       	ldd	r25, Z+1	; 0x01
    21f4:	8d 93       	st	X+, r24
    21f6:	9c 93       	st	X, r25
    21f8:	fe 01       	movw	r30, r28
    21fa:	e5 56       	subi	r30, 0x65	; 101
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <main+0x8de>
    2206:	fe 01       	movw	r30, r28
    2208:	e5 56       	subi	r30, 0x65	; 101
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
	_delay_ms(2000);
	CLCD_voidClrScr();
    2210:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>

	CLCD_voidGotoXY(1,1);
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	61 e0       	ldi	r22, 0x01	; 1
    2218:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidGotoXY>
	CLCD_u8SendString("HAMOKSHA WAVE");
    221c:	8f e6       	ldi	r24, 0x6F	; 111
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 48 07 	call	0xe90	; 0xe90 <CLCD_u8SendString>



	LCD_voidWriteSpecialChar(Copy_u8Pattern,1,2,0);
    2224:	8c e9       	ldi	r24, 0x9C	; 156
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	61 e0       	ldi	r22, 0x01	; 1
    222a:	42 e0       	ldi	r20, 0x02	; 2
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    2232:	fe 01       	movw	r30, r28
    2234:	e9 56       	subi	r30, 0x69	; 105
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	aa ef       	ldi	r26, 0xFA	; 250
    223e:	b4 e4       	ldi	r27, 0x44	; 68
    2240:	80 83       	st	Z, r24
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	a2 83       	std	Z+2, r26	; 0x02
    2246:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2248:	8e 01       	movw	r16, r28
    224a:	0d 56       	subi	r16, 0x6D	; 109
    224c:	1f 4f       	sbci	r17, 0xFF	; 255
    224e:	fe 01       	movw	r30, r28
    2250:	e9 56       	subi	r30, 0x69	; 105
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4a e7       	ldi	r20, 0x7A	; 122
    2262:	55 e4       	ldi	r21, 0x45	; 69
    2264:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	f8 01       	movw	r30, r16
    226e:	80 83       	st	Z, r24
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	a2 83       	std	Z+2, r26	; 0x02
    2274:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2276:	fe 01       	movw	r30, r28
    2278:	ed 56       	subi	r30, 0x6D	; 109
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e8       	ldi	r20, 0x80	; 128
    228a:	5f e3       	ldi	r21, 0x3F	; 63
    228c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2290:	88 23       	and	r24, r24
    2292:	44 f4       	brge	.+16     	; 0x22a4 <main+0x980>
		__ticks = 1;
    2294:	fe 01       	movw	r30, r28
    2296:	ef 56       	subi	r30, 0x6F	; 111
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	91 83       	std	Z+1, r25	; 0x01
    22a0:	80 83       	st	Z, r24
    22a2:	64 c0       	rjmp	.+200    	; 0x236c <main+0xa48>
	else if (__tmp > 65535)
    22a4:	fe 01       	movw	r30, r28
    22a6:	ed 56       	subi	r30, 0x6D	; 109
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	60 81       	ld	r22, Z
    22ac:	71 81       	ldd	r23, Z+1	; 0x01
    22ae:	82 81       	ldd	r24, Z+2	; 0x02
    22b0:	93 81       	ldd	r25, Z+3	; 0x03
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	3f ef       	ldi	r19, 0xFF	; 255
    22b6:	4f e7       	ldi	r20, 0x7F	; 127
    22b8:	57 e4       	ldi	r21, 0x47	; 71
    22ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22be:	18 16       	cp	r1, r24
    22c0:	0c f0       	brlt	.+2      	; 0x22c4 <main+0x9a0>
    22c2:	43 c0       	rjmp	.+134    	; 0x234a <main+0xa26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	fe 01       	movw	r30, r28
    22c6:	e9 56       	subi	r30, 0x69	; 105
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e2       	ldi	r20, 0x20	; 32
    22d8:	51 e4       	ldi	r21, 0x41	; 65
    22da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8e 01       	movw	r16, r28
    22e4:	0f 56       	subi	r16, 0x6F	; 111
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	f8 01       	movw	r30, r16
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	80 83       	st	Z, r24
    22fa:	1f c0       	rjmp	.+62     	; 0x233a <main+0xa16>
    22fc:	fe 01       	movw	r30, r28
    22fe:	e1 57       	subi	r30, 0x71	; 113
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 e9       	ldi	r24, 0x90	; 144
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
    230a:	fe 01       	movw	r30, r28
    230c:	e1 57       	subi	r30, 0x71	; 113
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <main+0x9f0>
    2318:	fe 01       	movw	r30, r28
    231a:	e1 57       	subi	r30, 0x71	; 113
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2322:	de 01       	movw	r26, r28
    2324:	af 56       	subi	r26, 0x6F	; 111
    2326:	bf 4f       	sbci	r27, 0xFF	; 255
    2328:	fe 01       	movw	r30, r28
    232a:	ef 56       	subi	r30, 0x6F	; 111
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	80 81       	ld	r24, Z
    2330:	91 81       	ldd	r25, Z+1	; 0x01
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	11 96       	adiw	r26, 0x01	; 1
    2336:	9c 93       	st	X, r25
    2338:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	fe 01       	movw	r30, r28
    233c:	ef 56       	subi	r30, 0x6F	; 111
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	d1 f6       	brne	.-76     	; 0x22fc <main+0x9d8>
    2348:	27 c0       	rjmp	.+78     	; 0x2398 <main+0xa74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234a:	8e 01       	movw	r16, r28
    234c:	0f 56       	subi	r16, 0x6F	; 111
    234e:	1f 4f       	sbci	r17, 0xFF	; 255
    2350:	fe 01       	movw	r30, r28
    2352:	ed 56       	subi	r30, 0x6D	; 109
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	f8 01       	movw	r30, r16
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	80 83       	st	Z, r24
    236c:	de 01       	movw	r26, r28
    236e:	a3 57       	subi	r26, 0x73	; 115
    2370:	bf 4f       	sbci	r27, 0xFF	; 255
    2372:	fe 01       	movw	r30, r28
    2374:	ef 56       	subi	r30, 0x6F	; 111
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	91 81       	ldd	r25, Z+1	; 0x01
    237c:	8d 93       	st	X+, r24
    237e:	9c 93       	st	X, r25
    2380:	fe 01       	movw	r30, r28
    2382:	e3 57       	subi	r30, 0x73	; 115
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <main+0xa66>
    238e:	fe 01       	movw	r30, r28
    2390:	e3 57       	subi	r30, 0x73	; 115
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	80 83       	st	Z, r24
	_delay_ms(2000);
	CLCD_voidClrScr();
    2398:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
	LCD_voidWriteSpecialChar(Copy_u8Pattern,2,2,1);
    239c:	8c e9       	ldi	r24, 0x9C	; 156
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	42 e0       	ldi	r20, 0x02	; 2
    23a4:	21 e0       	ldi	r18, 0x01	; 1
    23a6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    23aa:	fe 01       	movw	r30, r28
    23ac:	e7 57       	subi	r30, 0x77	; 119
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	aa e7       	ldi	r26, 0x7A	; 122
    23b6:	b4 e4       	ldi	r27, 0x44	; 68
    23b8:	80 83       	st	Z, r24
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	a2 83       	std	Z+2, r26	; 0x02
    23be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	8e 01       	movw	r16, r28
    23c2:	0b 57       	subi	r16, 0x7B	; 123
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
    23c6:	fe 01       	movw	r30, r28
    23c8:	e7 57       	subi	r30, 0x77	; 119
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a e7       	ldi	r20, 0x7A	; 122
    23da:	55 e4       	ldi	r21, 0x45	; 69
    23dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	f8 01       	movw	r30, r16
    23e6:	80 83       	st	Z, r24
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	a2 83       	std	Z+2, r26	; 0x02
    23ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ee:	fe 01       	movw	r30, r28
    23f0:	eb 57       	subi	r30, 0x7B	; 123
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2408:	88 23       	and	r24, r24
    240a:	44 f4       	brge	.+16     	; 0x241c <main+0xaf8>
		__ticks = 1;
    240c:	fe 01       	movw	r30, r28
    240e:	ed 57       	subi	r30, 0x7D	; 125
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	91 83       	std	Z+1, r25	; 0x01
    2418:	80 83       	st	Z, r24
    241a:	64 c0       	rjmp	.+200    	; 0x24e4 <main+0xbc0>
	else if (__tmp > 65535)
    241c:	fe 01       	movw	r30, r28
    241e:	eb 57       	subi	r30, 0x7B	; 123
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	60 81       	ld	r22, Z
    2424:	71 81       	ldd	r23, Z+1	; 0x01
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	0c f0       	brlt	.+2      	; 0x243c <main+0xb18>
    243a:	43 c0       	rjmp	.+134    	; 0x24c2 <main+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243c:	fe 01       	movw	r30, r28
    243e:	e7 57       	subi	r30, 0x77	; 119
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e2       	ldi	r20, 0x20	; 32
    2450:	51 e4       	ldi	r21, 0x41	; 65
    2452:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	8e 01       	movw	r16, r28
    245c:	0d 57       	subi	r16, 0x7D	; 125
    245e:	1f 4f       	sbci	r17, 0xFF	; 255
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	f8 01       	movw	r30, r16
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
    2472:	1f c0       	rjmp	.+62     	; 0x24b2 <main+0xb8e>
    2474:	fe 01       	movw	r30, r28
    2476:	ef 57       	subi	r30, 0x7F	; 127
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 e9       	ldi	r24, 0x90	; 144
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	91 83       	std	Z+1, r25	; 0x01
    2480:	80 83       	st	Z, r24
    2482:	fe 01       	movw	r30, r28
    2484:	ef 57       	subi	r30, 0x7F	; 127
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <main+0xb68>
    2490:	fe 01       	movw	r30, r28
    2492:	ef 57       	subi	r30, 0x7F	; 127
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	de 01       	movw	r26, r28
    249c:	ad 57       	subi	r26, 0x7D	; 125
    249e:	bf 4f       	sbci	r27, 0xFF	; 255
    24a0:	fe 01       	movw	r30, r28
    24a2:	ed 57       	subi	r30, 0x7D	; 125
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	80 81       	ld	r24, Z
    24a8:	91 81       	ldd	r25, Z+1	; 0x01
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	11 96       	adiw	r26, 0x01	; 1
    24ae:	9c 93       	st	X, r25
    24b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	fe 01       	movw	r30, r28
    24b4:	ed 57       	subi	r30, 0x7D	; 125
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	d1 f6       	brne	.-76     	; 0x2474 <main+0xb50>
    24c0:	27 c0       	rjmp	.+78     	; 0x2510 <main+0xbec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	8e 01       	movw	r16, r28
    24c4:	0d 57       	subi	r16, 0x7D	; 125
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	fe 01       	movw	r30, r28
    24ca:	eb 57       	subi	r30, 0x7B	; 123
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	60 81       	ld	r22, Z
    24d0:	71 81       	ldd	r23, Z+1	; 0x01
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	f8 01       	movw	r30, r16
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
    24e4:	de 01       	movw	r26, r28
    24e6:	a1 58       	subi	r26, 0x81	; 129
    24e8:	bf 4f       	sbci	r27, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	ed 57       	subi	r30, 0x7D	; 125
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	8d 93       	st	X+, r24
    24f6:	9c 93       	st	X, r25
    24f8:	fe 01       	movw	r30, r28
    24fa:	e1 58       	subi	r30, 0x81	; 129
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <main+0xbde>
    2506:	fe 01       	movw	r30, r28
    2508:	e1 58       	subi	r30, 0x81	; 129
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
	_delay_ms(1000);
	CLCD_voidClrScr();
    2510:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
	LCD_voidWriteSpecialChar(Copy_u8Pattern,1,2,2);
    2514:	8c e9       	ldi	r24, 0x9C	; 156
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	61 e0       	ldi	r22, 0x01	; 1
    251a:	42 e0       	ldi	r20, 0x02	; 2
    251c:	22 e0       	ldi	r18, 0x02	; 2
    251e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    2522:	fe 01       	movw	r30, r28
    2524:	e5 58       	subi	r30, 0x85	; 133
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	aa e7       	ldi	r26, 0x7A	; 122
    252e:	b4 e4       	ldi	r27, 0x44	; 68
    2530:	80 83       	st	Z, r24
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	a2 83       	std	Z+2, r26	; 0x02
    2536:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	8e 01       	movw	r16, r28
    253a:	09 58       	subi	r16, 0x89	; 137
    253c:	1f 4f       	sbci	r17, 0xFF	; 255
    253e:	fe 01       	movw	r30, r28
    2540:	e5 58       	subi	r30, 0x85	; 133
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	60 81       	ld	r22, Z
    2546:	71 81       	ldd	r23, Z+1	; 0x01
    2548:	82 81       	ldd	r24, Z+2	; 0x02
    254a:	93 81       	ldd	r25, Z+3	; 0x03
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4a e7       	ldi	r20, 0x7A	; 122
    2552:	55 e4       	ldi	r21, 0x45	; 69
    2554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	f8 01       	movw	r30, r16
    255e:	80 83       	st	Z, r24
    2560:	91 83       	std	Z+1, r25	; 0x01
    2562:	a2 83       	std	Z+2, r26	; 0x02
    2564:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2566:	fe 01       	movw	r30, r28
    2568:	e9 58       	subi	r30, 0x89	; 137
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	44 f4       	brge	.+16     	; 0x2594 <main+0xc70>
		__ticks = 1;
    2584:	fe 01       	movw	r30, r28
    2586:	eb 58       	subi	r30, 0x8B	; 139
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
    2592:	64 c0       	rjmp	.+200    	; 0x265c <main+0xd38>
	else if (__tmp > 65535)
    2594:	fe 01       	movw	r30, r28
    2596:	e9 58       	subi	r30, 0x89	; 137
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	3f ef       	ldi	r19, 0xFF	; 255
    25a6:	4f e7       	ldi	r20, 0x7F	; 127
    25a8:	57 e4       	ldi	r21, 0x47	; 71
    25aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25ae:	18 16       	cp	r1, r24
    25b0:	0c f0       	brlt	.+2      	; 0x25b4 <main+0xc90>
    25b2:	43 c0       	rjmp	.+134    	; 0x263a <main+0xd16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b4:	fe 01       	movw	r30, r28
    25b6:	e5 58       	subi	r30, 0x85	; 133
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e2       	ldi	r20, 0x20	; 32
    25c8:	51 e4       	ldi	r21, 0x41	; 65
    25ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	8e 01       	movw	r16, r28
    25d4:	0b 58       	subi	r16, 0x8B	; 139
    25d6:	1f 4f       	sbci	r17, 0xFF	; 255
    25d8:	bc 01       	movw	r22, r24
    25da:	cd 01       	movw	r24, r26
    25dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	f8 01       	movw	r30, r16
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	80 83       	st	Z, r24
    25ea:	1f c0       	rjmp	.+62     	; 0x262a <main+0xd06>
    25ec:	fe 01       	movw	r30, r28
    25ee:	ed 58       	subi	r30, 0x8D	; 141
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	80 e9       	ldi	r24, 0x90	; 144
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
    25fa:	fe 01       	movw	r30, r28
    25fc:	ed 58       	subi	r30, 0x8D	; 141
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	91 81       	ldd	r25, Z+1	; 0x01
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <main+0xce0>
    2608:	fe 01       	movw	r30, r28
    260a:	ed 58       	subi	r30, 0x8D	; 141
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	91 83       	std	Z+1, r25	; 0x01
    2610:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2612:	de 01       	movw	r26, r28
    2614:	ab 58       	subi	r26, 0x8B	; 139
    2616:	bf 4f       	sbci	r27, 0xFF	; 255
    2618:	fe 01       	movw	r30, r28
    261a:	eb 58       	subi	r30, 0x8B	; 139
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 81       	ld	r24, Z
    2620:	91 81       	ldd	r25, Z+1	; 0x01
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	11 96       	adiw	r26, 0x01	; 1
    2626:	9c 93       	st	X, r25
    2628:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262a:	fe 01       	movw	r30, r28
    262c:	eb 58       	subi	r30, 0x8B	; 139
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 81       	ld	r24, Z
    2632:	91 81       	ldd	r25, Z+1	; 0x01
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	d1 f6       	brne	.-76     	; 0x25ec <main+0xcc8>
    2638:	27 c0       	rjmp	.+78     	; 0x2688 <main+0xd64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263a:	8e 01       	movw	r16, r28
    263c:	0b 58       	subi	r16, 0x8B	; 139
    263e:	1f 4f       	sbci	r17, 0xFF	; 255
    2640:	fe 01       	movw	r30, r28
    2642:	e9 58       	subi	r30, 0x89	; 137
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	f8 01       	movw	r30, r16
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
    265c:	de 01       	movw	r26, r28
    265e:	af 58       	subi	r26, 0x8F	; 143
    2660:	bf 4f       	sbci	r27, 0xFF	; 255
    2662:	fe 01       	movw	r30, r28
    2664:	eb 58       	subi	r30, 0x8B	; 139
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	8d 93       	st	X+, r24
    266e:	9c 93       	st	X, r25
    2670:	fe 01       	movw	r30, r28
    2672:	ef 58       	subi	r30, 0x8F	; 143
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <main+0xd56>
    267e:	fe 01       	movw	r30, r28
    2680:	ef 58       	subi	r30, 0x8F	; 143
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
	_delay_ms(1000);
	CLCD_voidClrScr();
    2688:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
	LCD_voidWriteSpecialChar(Copy_u8Pattern,2,2,3);
    268c:	8c e9       	ldi	r24, 0x9C	; 156
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	62 e0       	ldi	r22, 0x02	; 2
    2692:	42 e0       	ldi	r20, 0x02	; 2
    2694:	23 e0       	ldi	r18, 0x03	; 3
    2696:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    269a:	fe 01       	movw	r30, r28
    269c:	e3 59       	subi	r30, 0x93	; 147
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	aa e7       	ldi	r26, 0x7A	; 122
    26a6:	b4 e4       	ldi	r27, 0x44	; 68
    26a8:	80 83       	st	Z, r24
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	a2 83       	std	Z+2, r26	; 0x02
    26ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b0:	8e 01       	movw	r16, r28
    26b2:	07 59       	subi	r16, 0x97	; 151
    26b4:	1f 4f       	sbci	r17, 0xFF	; 255
    26b6:	fe 01       	movw	r30, r28
    26b8:	e3 59       	subi	r30, 0x93	; 147
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	4a e7       	ldi	r20, 0x7A	; 122
    26ca:	55 e4       	ldi	r21, 0x45	; 69
    26cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	f8 01       	movw	r30, r16
    26d6:	80 83       	st	Z, r24
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	a2 83       	std	Z+2, r26	; 0x02
    26dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26de:	fe 01       	movw	r30, r28
    26e0:	e7 59       	subi	r30, 0x97	; 151
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e8       	ldi	r20, 0x80	; 128
    26f2:	5f e3       	ldi	r21, 0x3F	; 63
    26f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26f8:	88 23       	and	r24, r24
    26fa:	44 f4       	brge	.+16     	; 0x270c <main+0xde8>
		__ticks = 1;
    26fc:	fe 01       	movw	r30, r28
    26fe:	e9 59       	subi	r30, 0x99	; 153
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	91 83       	std	Z+1, r25	; 0x01
    2708:	80 83       	st	Z, r24
    270a:	64 c0       	rjmp	.+200    	; 0x27d4 <main+0xeb0>
	else if (__tmp > 65535)
    270c:	fe 01       	movw	r30, r28
    270e:	e7 59       	subi	r30, 0x97	; 151
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	57 e4       	ldi	r21, 0x47	; 71
    2722:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	0c f0       	brlt	.+2      	; 0x272c <main+0xe08>
    272a:	43 c0       	rjmp	.+134    	; 0x27b2 <main+0xe8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272c:	fe 01       	movw	r30, r28
    272e:	e3 59       	subi	r30, 0x93	; 147
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	60 81       	ld	r22, Z
    2734:	71 81       	ldd	r23, Z+1	; 0x01
    2736:	82 81       	ldd	r24, Z+2	; 0x02
    2738:	93 81       	ldd	r25, Z+3	; 0x03
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e2       	ldi	r20, 0x20	; 32
    2740:	51 e4       	ldi	r21, 0x41	; 65
    2742:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	8e 01       	movw	r16, r28
    274c:	09 59       	subi	r16, 0x99	; 153
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	f8 01       	movw	r30, r16
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	80 83       	st	Z, r24
    2762:	1f c0       	rjmp	.+62     	; 0x27a2 <main+0xe7e>
    2764:	fe 01       	movw	r30, r28
    2766:	eb 59       	subi	r30, 0x9B	; 155
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 e9       	ldi	r24, 0x90	; 144
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	80 83       	st	Z, r24
    2772:	fe 01       	movw	r30, r28
    2774:	eb 59       	subi	r30, 0x9B	; 155
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	91 81       	ldd	r25, Z+1	; 0x01
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <main+0xe58>
    2780:	fe 01       	movw	r30, r28
    2782:	eb 59       	subi	r30, 0x9B	; 155
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	de 01       	movw	r26, r28
    278c:	a9 59       	subi	r26, 0x99	; 153
    278e:	bf 4f       	sbci	r27, 0xFF	; 255
    2790:	fe 01       	movw	r30, r28
    2792:	e9 59       	subi	r30, 0x99	; 153
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	11 96       	adiw	r26, 0x01	; 1
    279e:	9c 93       	st	X, r25
    27a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a2:	fe 01       	movw	r30, r28
    27a4:	e9 59       	subi	r30, 0x99	; 153
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	80 81       	ld	r24, Z
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	d1 f6       	brne	.-76     	; 0x2764 <main+0xe40>
    27b0:	27 c0       	rjmp	.+78     	; 0x2800 <main+0xedc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	8e 01       	movw	r16, r28
    27b4:	09 59       	subi	r16, 0x99	; 153
    27b6:	1f 4f       	sbci	r17, 0xFF	; 255
    27b8:	fe 01       	movw	r30, r28
    27ba:	e7 59       	subi	r30, 0x97	; 151
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	60 81       	ld	r22, Z
    27c0:	71 81       	ldd	r23, Z+1	; 0x01
    27c2:	82 81       	ldd	r24, Z+2	; 0x02
    27c4:	93 81       	ldd	r25, Z+3	; 0x03
    27c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	f8 01       	movw	r30, r16
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
    27d4:	de 01       	movw	r26, r28
    27d6:	ad 59       	subi	r26, 0x9D	; 157
    27d8:	bf 4f       	sbci	r27, 0xFF	; 255
    27da:	fe 01       	movw	r30, r28
    27dc:	e9 59       	subi	r30, 0x99	; 153
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	91 81       	ldd	r25, Z+1	; 0x01
    27e4:	8d 93       	st	X+, r24
    27e6:	9c 93       	st	X, r25
    27e8:	fe 01       	movw	r30, r28
    27ea:	ed 59       	subi	r30, 0x9D	; 157
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <main+0xece>
    27f6:	fe 01       	movw	r30, r28
    27f8:	ed 59       	subi	r30, 0x9D	; 157
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	80 83       	st	Z, r24
	_delay_ms(1000);
	CLCD_voidClrScr();
    2800:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
	LCD_voidWriteSpecialChar(Copy_u8Pattern,1,2,4);
    2804:	8c e9       	ldi	r24, 0x9C	; 156
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	61 e0       	ldi	r22, 0x01	; 1
    280a:	42 e0       	ldi	r20, 0x02	; 2
    280c:	24 e0       	ldi	r18, 0x04	; 4
    280e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    2812:	fe 01       	movw	r30, r28
    2814:	e1 5a       	subi	r30, 0xA1	; 161
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	aa e7       	ldi	r26, 0x7A	; 122
    281e:	b4 e4       	ldi	r27, 0x44	; 68
    2820:	80 83       	st	Z, r24
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	a2 83       	std	Z+2, r26	; 0x02
    2826:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2828:	8e 01       	movw	r16, r28
    282a:	05 5a       	subi	r16, 0xA5	; 165
    282c:	1f 4f       	sbci	r17, 0xFF	; 255
    282e:	fe 01       	movw	r30, r28
    2830:	e1 5a       	subi	r30, 0xA1	; 161
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	4a e7       	ldi	r20, 0x7A	; 122
    2842:	55 e4       	ldi	r21, 0x45	; 69
    2844:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	f8 01       	movw	r30, r16
    284e:	80 83       	st	Z, r24
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	a2 83       	std	Z+2, r26	; 0x02
    2854:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2856:	fe 01       	movw	r30, r28
    2858:	e5 5a       	subi	r30, 0xA5	; 165
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	60 81       	ld	r22, Z
    285e:	71 81       	ldd	r23, Z+1	; 0x01
    2860:	82 81       	ldd	r24, Z+2	; 0x02
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e8       	ldi	r20, 0x80	; 128
    286a:	5f e3       	ldi	r21, 0x3F	; 63
    286c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2870:	88 23       	and	r24, r24
    2872:	44 f4       	brge	.+16     	; 0x2884 <main+0xf60>
		__ticks = 1;
    2874:	fe 01       	movw	r30, r28
    2876:	e7 5a       	subi	r30, 0xA7	; 167
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	80 83       	st	Z, r24
    2882:	64 c0       	rjmp	.+200    	; 0x294c <main+0x1028>
	else if (__tmp > 65535)
    2884:	fe 01       	movw	r30, r28
    2886:	e5 5a       	subi	r30, 0xA5	; 165
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	3f ef       	ldi	r19, 0xFF	; 255
    2896:	4f e7       	ldi	r20, 0x7F	; 127
    2898:	57 e4       	ldi	r21, 0x47	; 71
    289a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    289e:	18 16       	cp	r1, r24
    28a0:	0c f0       	brlt	.+2      	; 0x28a4 <main+0xf80>
    28a2:	43 c0       	rjmp	.+134    	; 0x292a <main+0x1006>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a4:	fe 01       	movw	r30, r28
    28a6:	e1 5a       	subi	r30, 0xA1	; 161
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e2       	ldi	r20, 0x20	; 32
    28b8:	51 e4       	ldi	r21, 0x41	; 65
    28ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	8e 01       	movw	r16, r28
    28c4:	07 5a       	subi	r16, 0xA7	; 167
    28c6:	1f 4f       	sbci	r17, 0xFF	; 255
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	f8 01       	movw	r30, r16
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	80 83       	st	Z, r24
    28da:	1f c0       	rjmp	.+62     	; 0x291a <main+0xff6>
    28dc:	fe 01       	movw	r30, r28
    28de:	e9 5a       	subi	r30, 0xA9	; 169
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 e9       	ldi	r24, 0x90	; 144
    28e4:	91 e0       	ldi	r25, 0x01	; 1
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	80 83       	st	Z, r24
    28ea:	fe 01       	movw	r30, r28
    28ec:	e9 5a       	subi	r30, 0xA9	; 169
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <main+0xfd0>
    28f8:	fe 01       	movw	r30, r28
    28fa:	e9 5a       	subi	r30, 0xA9	; 169
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	91 83       	std	Z+1, r25	; 0x01
    2900:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2902:	de 01       	movw	r26, r28
    2904:	a7 5a       	subi	r26, 0xA7	; 167
    2906:	bf 4f       	sbci	r27, 0xFF	; 255
    2908:	fe 01       	movw	r30, r28
    290a:	e7 5a       	subi	r30, 0xA7	; 167
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	80 81       	ld	r24, Z
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	11 96       	adiw	r26, 0x01	; 1
    2916:	9c 93       	st	X, r25
    2918:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291a:	fe 01       	movw	r30, r28
    291c:	e7 5a       	subi	r30, 0xA7	; 167
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	80 81       	ld	r24, Z
    2922:	91 81       	ldd	r25, Z+1	; 0x01
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	d1 f6       	brne	.-76     	; 0x28dc <main+0xfb8>
    2928:	27 c0       	rjmp	.+78     	; 0x2978 <main+0x1054>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292a:	8e 01       	movw	r16, r28
    292c:	07 5a       	subi	r16, 0xA7	; 167
    292e:	1f 4f       	sbci	r17, 0xFF	; 255
    2930:	fe 01       	movw	r30, r28
    2932:	e5 5a       	subi	r30, 0xA5	; 165
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	60 81       	ld	r22, Z
    2938:	71 81       	ldd	r23, Z+1	; 0x01
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	f8 01       	movw	r30, r16
    2948:	91 83       	std	Z+1, r25	; 0x01
    294a:	80 83       	st	Z, r24
    294c:	de 01       	movw	r26, r28
    294e:	ab 5a       	subi	r26, 0xAB	; 171
    2950:	bf 4f       	sbci	r27, 0xFF	; 255
    2952:	fe 01       	movw	r30, r28
    2954:	e7 5a       	subi	r30, 0xA7	; 167
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	80 81       	ld	r24, Z
    295a:	91 81       	ldd	r25, Z+1	; 0x01
    295c:	8d 93       	st	X+, r24
    295e:	9c 93       	st	X, r25
    2960:	fe 01       	movw	r30, r28
    2962:	eb 5a       	subi	r30, 0xAB	; 171
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	80 81       	ld	r24, Z
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <main+0x1046>
    296e:	fe 01       	movw	r30, r28
    2970:	eb 5a       	subi	r30, 0xAB	; 171
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	80 83       	st	Z, r24
	_delay_ms(1000);
	CLCD_voidClrScr();
    2978:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
	LCD_voidWriteSpecialChar(Copy_u8Pattern,2,2,5);
    297c:	8c e9       	ldi	r24, 0x9C	; 156
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	62 e0       	ldi	r22, 0x02	; 2
    2982:	42 e0       	ldi	r20, 0x02	; 2
    2984:	25 e0       	ldi	r18, 0x05	; 5
    2986:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    298a:	fe 01       	movw	r30, r28
    298c:	ef 5a       	subi	r30, 0xAF	; 175
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	aa e7       	ldi	r26, 0x7A	; 122
    2996:	b4 e4       	ldi	r27, 0x44	; 68
    2998:	80 83       	st	Z, r24
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	a2 83       	std	Z+2, r26	; 0x02
    299e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a0:	8e 01       	movw	r16, r28
    29a2:	03 5b       	subi	r16, 0xB3	; 179
    29a4:	1f 4f       	sbci	r17, 0xFF	; 255
    29a6:	fe 01       	movw	r30, r28
    29a8:	ef 5a       	subi	r30, 0xAF	; 175
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	4a e7       	ldi	r20, 0x7A	; 122
    29ba:	55 e4       	ldi	r21, 0x45	; 69
    29bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	f8 01       	movw	r30, r16
    29c6:	80 83       	st	Z, r24
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	a2 83       	std	Z+2, r26	; 0x02
    29cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ce:	fe 01       	movw	r30, r28
    29d0:	e3 5b       	subi	r30, 0xB3	; 179
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e8       	ldi	r20, 0x80	; 128
    29e2:	5f e3       	ldi	r21, 0x3F	; 63
    29e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29e8:	88 23       	and	r24, r24
    29ea:	44 f4       	brge	.+16     	; 0x29fc <main+0x10d8>
		__ticks = 1;
    29ec:	fe 01       	movw	r30, r28
    29ee:	e5 5b       	subi	r30, 0xB5	; 181
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	91 83       	std	Z+1, r25	; 0x01
    29f8:	80 83       	st	Z, r24
    29fa:	64 c0       	rjmp	.+200    	; 0x2ac4 <main+0x11a0>
	else if (__tmp > 65535)
    29fc:	fe 01       	movw	r30, r28
    29fe:	e3 5b       	subi	r30, 0xB3	; 179
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	3f ef       	ldi	r19, 0xFF	; 255
    2a0e:	4f e7       	ldi	r20, 0x7F	; 127
    2a10:	57 e4       	ldi	r21, 0x47	; 71
    2a12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a16:	18 16       	cp	r1, r24
    2a18:	0c f0       	brlt	.+2      	; 0x2a1c <main+0x10f8>
    2a1a:	43 c0       	rjmp	.+134    	; 0x2aa2 <main+0x117e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	ef 5a       	subi	r30, 0xAF	; 175
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e2       	ldi	r20, 0x20	; 32
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	8e 01       	movw	r16, r28
    2a3c:	05 5b       	subi	r16, 0xB5	; 181
    2a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	f8 01       	movw	r30, r16
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
    2a52:	1f c0       	rjmp	.+62     	; 0x2a92 <main+0x116e>
    2a54:	fe 01       	movw	r30, r28
    2a56:	e7 5b       	subi	r30, 0xB7	; 183
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 e9       	ldi	r24, 0x90	; 144
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    2a62:	fe 01       	movw	r30, r28
    2a64:	e7 5b       	subi	r30, 0xB7	; 183
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	91 81       	ldd	r25, Z+1	; 0x01
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <main+0x1148>
    2a70:	fe 01       	movw	r30, r28
    2a72:	e7 5b       	subi	r30, 0xB7	; 183
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7a:	de 01       	movw	r26, r28
    2a7c:	a5 5b       	subi	r26, 0xB5	; 181
    2a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a80:	fe 01       	movw	r30, r28
    2a82:	e5 5b       	subi	r30, 0xB5	; 181
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	11 96       	adiw	r26, 0x01	; 1
    2a8e:	9c 93       	st	X, r25
    2a90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	fe 01       	movw	r30, r28
    2a94:	e5 5b       	subi	r30, 0xB5	; 181
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	91 81       	ldd	r25, Z+1	; 0x01
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	d1 f6       	brne	.-76     	; 0x2a54 <main+0x1130>
    2aa0:	27 c0       	rjmp	.+78     	; 0x2af0 <main+0x11cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	8e 01       	movw	r16, r28
    2aa4:	05 5b       	subi	r16, 0xB5	; 181
    2aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e3 5b       	subi	r30, 0xB3	; 179
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	60 81       	ld	r22, Z
    2ab0:	71 81       	ldd	r23, Z+1	; 0x01
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	93 81       	ldd	r25, Z+3	; 0x03
    2ab6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	f8 01       	movw	r30, r16
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	80 83       	st	Z, r24
    2ac4:	de 01       	movw	r26, r28
    2ac6:	a9 5b       	subi	r26, 0xB9	; 185
    2ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aca:	fe 01       	movw	r30, r28
    2acc:	e5 5b       	subi	r30, 0xB5	; 181
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	91 81       	ldd	r25, Z+1	; 0x01
    2ad4:	8d 93       	st	X+, r24
    2ad6:	9c 93       	st	X, r25
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e9 5b       	subi	r30, 0xB9	; 185
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <main+0x11be>
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e9 5b       	subi	r30, 0xB9	; 185
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	80 83       	st	Z, r24
	_delay_ms(1000);
	CLCD_voidClrScr();
    2af0:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>

	CLCD_voidGotoXY(1,1);
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	61 e0       	ldi	r22, 0x01	; 1
    2af8:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidGotoXY>
	CLCD_u8SendString("HAMOKSHA SLEEP");
    2afc:	8d e7       	ldi	r24, 0x7D	; 125
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0e 94 48 07 	call	0xe90	; 0xe90 <CLCD_u8SendString>
    2b04:	fe 01       	movw	r30, r28
    2b06:	ed 5b       	subi	r30, 0xBD	; 189
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	aa e7       	ldi	r26, 0x7A	; 122
    2b10:	b4 e4       	ldi	r27, 0x44	; 68
    2b12:	80 83       	st	Z, r24
    2b14:	91 83       	std	Z+1, r25	; 0x01
    2b16:	a2 83       	std	Z+2, r26	; 0x02
    2b18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1a:	8e 01       	movw	r16, r28
    2b1c:	01 5c       	subi	r16, 0xC1	; 193
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	fe 01       	movw	r30, r28
    2b22:	ed 5b       	subi	r30, 0xBD	; 189
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	4a e7       	ldi	r20, 0x7A	; 122
    2b34:	55 e4       	ldi	r21, 0x45	; 69
    2b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	f8 01       	movw	r30, r16
    2b40:	80 83       	st	Z, r24
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	a2 83       	std	Z+2, r26	; 0x02
    2b46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b48:	fe 01       	movw	r30, r28
    2b4a:	ff 96       	adiw	r30, 0x3f	; 63
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	2c f4       	brge	.+10     	; 0x2b6e <main+0x124a>
		__ticks = 1;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	9e af       	std	Y+62, r25	; 0x3e
    2b6a:	8d af       	std	Y+61, r24	; 0x3d
    2b6c:	46 c0       	rjmp	.+140    	; 0x2bfa <main+0x12d6>
	else if (__tmp > 65535)
    2b6e:	fe 01       	movw	r30, r28
    2b70:	ff 96       	adiw	r30, 0x3f	; 63
    2b72:	60 81       	ld	r22, Z
    2b74:	71 81       	ldd	r23, Z+1	; 0x01
    2b76:	82 81       	ldd	r24, Z+2	; 0x02
    2b78:	93 81       	ldd	r25, Z+3	; 0x03
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	3f ef       	ldi	r19, 0xFF	; 255
    2b7e:	4f e7       	ldi	r20, 0x7F	; 127
    2b80:	57 e4       	ldi	r21, 0x47	; 71
    2b82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b86:	18 16       	cp	r1, r24
    2b88:	64 f5       	brge	.+88     	; 0x2be2 <main+0x12be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	ed 5b       	subi	r30, 0xBD	; 189
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	60 81       	ld	r22, Z
    2b92:	71 81       	ldd	r23, Z+1	; 0x01
    2b94:	82 81       	ldd	r24, Z+2	; 0x02
    2b96:	93 81       	ldd	r25, Z+3	; 0x03
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e2       	ldi	r20, 0x20	; 32
    2b9e:	51 e4       	ldi	r21, 0x41	; 65
    2ba0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	9e af       	std	Y+62, r25	; 0x3e
    2bb6:	8d af       	std	Y+61, r24	; 0x3d
    2bb8:	0f c0       	rjmp	.+30     	; 0x2bd8 <main+0x12b4>
    2bba:	80 e9       	ldi	r24, 0x90	; 144
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	9c af       	std	Y+60, r25	; 0x3c
    2bc0:	8b af       	std	Y+59, r24	; 0x3b
    2bc2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2bc4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <main+0x12a2>
    2bca:	9c af       	std	Y+60, r25	; 0x3c
    2bcc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bce:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	9e af       	std	Y+62, r25	; 0x3e
    2bd6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bda:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	69 f7       	brne	.-38     	; 0x2bba <main+0x1296>
    2be0:	16 c0       	rjmp	.+44     	; 0x2c0e <main+0x12ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be2:	fe 01       	movw	r30, r28
    2be4:	ff 96       	adiw	r30, 0x3f	; 63
    2be6:	60 81       	ld	r22, Z
    2be8:	71 81       	ldd	r23, Z+1	; 0x01
    2bea:	82 81       	ldd	r24, Z+2	; 0x02
    2bec:	93 81       	ldd	r25, Z+3	; 0x03
    2bee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9e af       	std	Y+62, r25	; 0x3e
    2bf8:	8d af       	std	Y+61, r24	; 0x3d
    2bfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bfe:	9a af       	std	Y+58, r25	; 0x3a
    2c00:	89 af       	std	Y+57, r24	; 0x39
    2c02:	89 ad       	ldd	r24, Y+57	; 0x39
    2c04:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <main+0x12e2>
    2c0a:	9a af       	std	Y+58, r25	; 0x3a
    2c0c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	CLCD_voidClrScr();
    2c0e:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>

	LCD_voidWriteSpecialChar(Copy_u8Pattern,0,2,5);
    2c12:	8c e9       	ldi	r24, 0x9C	; 156
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	42 e0       	ldi	r20, 0x02	; 2
    2c1a:	25 e0       	ldi	r18, 0x05	; 5
    2c1c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
	LCD_voidWriteSpecialChar(Copy_u8Pattern,3,1,5);
    2c20:	8c e9       	ldi	r24, 0x9C	; 156
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	63 e0       	ldi	r22, 0x03	; 3
    2c26:	41 e0       	ldi	r20, 0x01	; 1
    2c28:	25 e0       	ldi	r18, 0x05	; 5
    2c2a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	aa e7       	ldi	r26, 0x7A	; 122
    2c34:	b4 e4       	ldi	r27, 0x44	; 68
    2c36:	8d ab       	std	Y+53, r24	; 0x35
    2c38:	9e ab       	std	Y+54, r25	; 0x36
    2c3a:	af ab       	std	Y+55, r26	; 0x37
    2c3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c40:	7e a9       	ldd	r23, Y+54	; 0x36
    2c42:	8f a9       	ldd	r24, Y+55	; 0x37
    2c44:	98 ad       	ldd	r25, Y+56	; 0x38
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	4a e7       	ldi	r20, 0x7A	; 122
    2c4c:	55 e4       	ldi	r21, 0x45	; 69
    2c4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	89 ab       	std	Y+49, r24	; 0x31
    2c58:	9a ab       	std	Y+50, r25	; 0x32
    2c5a:	ab ab       	std	Y+51, r26	; 0x33
    2c5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c60:	7a a9       	ldd	r23, Y+50	; 0x32
    2c62:	8b a9       	ldd	r24, Y+51	; 0x33
    2c64:	9c a9       	ldd	r25, Y+52	; 0x34
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e8       	ldi	r20, 0x80	; 128
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	2c f4       	brge	.+10     	; 0x2c80 <main+0x135c>
		__ticks = 1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	98 ab       	std	Y+48, r25	; 0x30
    2c7c:	8f a7       	std	Y+47, r24	; 0x2f
    2c7e:	3f c0       	rjmp	.+126    	; 0x2cfe <main+0x13da>
	else if (__tmp > 65535)
    2c80:	69 a9       	ldd	r22, Y+49	; 0x31
    2c82:	7a a9       	ldd	r23, Y+50	; 0x32
    2c84:	8b a9       	ldd	r24, Y+51	; 0x33
    2c86:	9c a9       	ldd	r25, Y+52	; 0x34
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	3f ef       	ldi	r19, 0xFF	; 255
    2c8c:	4f e7       	ldi	r20, 0x7F	; 127
    2c8e:	57 e4       	ldi	r21, 0x47	; 71
    2c90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c94:	18 16       	cp	r1, r24
    2c96:	4c f5       	brge	.+82     	; 0x2cea <main+0x13c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c98:	6d a9       	ldd	r22, Y+53	; 0x35
    2c9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e2       	ldi	r20, 0x20	; 32
    2ca6:	51 e4       	ldi	r21, 0x41	; 65
    2ca8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	98 ab       	std	Y+48, r25	; 0x30
    2cbe:	8f a7       	std	Y+47, r24	; 0x2f
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <main+0x13bc>
    2cc2:	80 e9       	ldi	r24, 0x90	; 144
    2cc4:	91 e0       	ldi	r25, 0x01	; 1
    2cc6:	9e a7       	std	Y+46, r25	; 0x2e
    2cc8:	8d a7       	std	Y+45, r24	; 0x2d
    2cca:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ccc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <main+0x13aa>
    2cd2:	9e a7       	std	Y+46, r25	; 0x2e
    2cd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	98 ab       	std	Y+48, r25	; 0x30
    2cde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	69 f7       	brne	.-38     	; 0x2cc2 <main+0x139e>
    2ce8:	14 c0       	rjmp	.+40     	; 0x2d12 <main+0x13ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cea:	69 a9       	ldd	r22, Y+49	; 0x31
    2cec:	7a a9       	ldd	r23, Y+50	; 0x32
    2cee:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	98 ab       	std	Y+48, r25	; 0x30
    2cfc:	8f a7       	std	Y+47, r24	; 0x2f
    2cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d00:	98 a9       	ldd	r25, Y+48	; 0x30
    2d02:	9c a7       	std	Y+44, r25	; 0x2c
    2d04:	8b a7       	std	Y+43, r24	; 0x2b
    2d06:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d08:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <main+0x13e6>
    2d0e:	9c a7       	std	Y+44, r25	; 0x2c
    2d10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	CLCD_voidClrScr();
    2d12:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
	LCD_voidWriteSpecialChar(Copy_u8Pattern,0,2,5);
    2d16:	8c e9       	ldi	r24, 0x9C	; 156
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	42 e0       	ldi	r20, 0x02	; 2
    2d1e:	25 e0       	ldi	r18, 0x05	; 5
    2d20:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>

	LCD_voidWriteSpecialChar(Copy_u8Pattern,3,0,6);
    2d24:	8c e9       	ldi	r24, 0x9C	; 156
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	63 e0       	ldi	r22, 0x03	; 3
    2d2a:	40 e0       	ldi	r20, 0x00	; 0
    2d2c:	26 e0       	ldi	r18, 0x06	; 6
    2d2e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	aa e7       	ldi	r26, 0x7A	; 122
    2d38:	b4 e4       	ldi	r27, 0x44	; 68
    2d3a:	8f a3       	std	Y+39, r24	; 0x27
    2d3c:	98 a7       	std	Y+40, r25	; 0x28
    2d3e:	a9 a7       	std	Y+41, r26	; 0x29
    2d40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d42:	6f a1       	ldd	r22, Y+39	; 0x27
    2d44:	78 a5       	ldd	r23, Y+40	; 0x28
    2d46:	89 a5       	ldd	r24, Y+41	; 0x29
    2d48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	4a e7       	ldi	r20, 0x7A	; 122
    2d50:	55 e4       	ldi	r21, 0x45	; 69
    2d52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	8b a3       	std	Y+35, r24	; 0x23
    2d5c:	9c a3       	std	Y+36, r25	; 0x24
    2d5e:	ad a3       	std	Y+37, r26	; 0x25
    2d60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d62:	6b a1       	ldd	r22, Y+35	; 0x23
    2d64:	7c a1       	ldd	r23, Y+36	; 0x24
    2d66:	8d a1       	ldd	r24, Y+37	; 0x25
    2d68:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e8       	ldi	r20, 0x80	; 128
    2d70:	5f e3       	ldi	r21, 0x3F	; 63
    2d72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d76:	88 23       	and	r24, r24
    2d78:	2c f4       	brge	.+10     	; 0x2d84 <main+0x1460>
		__ticks = 1;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	9a a3       	std	Y+34, r25	; 0x22
    2d80:	89 a3       	std	Y+33, r24	; 0x21
    2d82:	3f c0       	rjmp	.+126    	; 0x2e02 <main+0x14de>
	else if (__tmp > 65535)
    2d84:	6b a1       	ldd	r22, Y+35	; 0x23
    2d86:	7c a1       	ldd	r23, Y+36	; 0x24
    2d88:	8d a1       	ldd	r24, Y+37	; 0x25
    2d8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	3f ef       	ldi	r19, 0xFF	; 255
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	57 e4       	ldi	r21, 0x47	; 71
    2d94:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	4c f5       	brge	.+82     	; 0x2dee <main+0x14ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2da0:	89 a5       	ldd	r24, Y+41	; 0x29
    2da2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e2       	ldi	r20, 0x20	; 32
    2daa:	51 e4       	ldi	r21, 0x41	; 65
    2dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9a a3       	std	Y+34, r25	; 0x22
    2dc2:	89 a3       	std	Y+33, r24	; 0x21
    2dc4:	0f c0       	rjmp	.+30     	; 0x2de4 <main+0x14c0>
    2dc6:	80 e9       	ldi	r24, 0x90	; 144
    2dc8:	91 e0       	ldi	r25, 0x01	; 1
    2dca:	98 a3       	std	Y+32, r25	; 0x20
    2dcc:	8f 8f       	std	Y+31, r24	; 0x1f
    2dce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dd0:	98 a1       	ldd	r25, Y+32	; 0x20
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <main+0x14ae>
    2dd6:	98 a3       	std	Y+32, r25	; 0x20
    2dd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dda:	89 a1       	ldd	r24, Y+33	; 0x21
    2ddc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	9a a3       	std	Y+34, r25	; 0x22
    2de2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de4:	89 a1       	ldd	r24, Y+33	; 0x21
    2de6:	9a a1       	ldd	r25, Y+34	; 0x22
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	69 f7       	brne	.-38     	; 0x2dc6 <main+0x14a2>
    2dec:	14 c0       	rjmp	.+40     	; 0x2e16 <main+0x14f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dee:	6b a1       	ldd	r22, Y+35	; 0x23
    2df0:	7c a1       	ldd	r23, Y+36	; 0x24
    2df2:	8d a1       	ldd	r24, Y+37	; 0x25
    2df4:	9e a1       	ldd	r25, Y+38	; 0x26
    2df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	9a a3       	std	Y+34, r25	; 0x22
    2e00:	89 a3       	std	Y+33, r24	; 0x21
    2e02:	89 a1       	ldd	r24, Y+33	; 0x21
    2e04:	9a a1       	ldd	r25, Y+34	; 0x22
    2e06:	9e 8f       	std	Y+30, r25	; 0x1e
    2e08:	8d 8f       	std	Y+29, r24	; 0x1d
    2e0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <main+0x14ea>
    2e12:	9e 8f       	std	Y+30, r25	; 0x1e
    2e14:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	CLCD_voidClrScr();
    2e16:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
	LCD_voidWriteSpecialChar(Copy_u8Pattern,0,2,5);
    2e1a:	8c e9       	ldi	r24, 0x9C	; 156
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	60 e0       	ldi	r22, 0x00	; 0
    2e20:	42 e0       	ldi	r20, 0x02	; 2
    2e22:	25 e0       	ldi	r18, 0x05	; 5
    2e24:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>

	LCD_voidWriteSpecialChar(Copy_u8Pattern,3,1,5);
    2e28:	8c e9       	ldi	r24, 0x9C	; 156
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	63 e0       	ldi	r22, 0x03	; 3
    2e2e:	41 e0       	ldi	r20, 0x01	; 1
    2e30:	25 e0       	ldi	r18, 0x05	; 5
    2e32:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	aa e7       	ldi	r26, 0x7A	; 122
    2e3c:	b4 e4       	ldi	r27, 0x44	; 68
    2e3e:	89 8f       	std	Y+25, r24	; 0x19
    2e40:	9a 8f       	std	Y+26, r25	; 0x1a
    2e42:	ab 8f       	std	Y+27, r26	; 0x1b
    2e44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	69 8d       	ldd	r22, Y+25	; 0x19
    2e48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	4a e7       	ldi	r20, 0x7A	; 122
    2e54:	55 e4       	ldi	r21, 0x45	; 69
    2e56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	8d 8b       	std	Y+21, r24	; 0x15
    2e60:	9e 8b       	std	Y+22, r25	; 0x16
    2e62:	af 8b       	std	Y+23, r26	; 0x17
    2e64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e66:	6d 89       	ldd	r22, Y+21	; 0x15
    2e68:	7e 89       	ldd	r23, Y+22	; 0x16
    2e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	2c f4       	brge	.+10     	; 0x2e88 <main+0x1564>
		__ticks = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9c 8b       	std	Y+20, r25	; 0x14
    2e84:	8b 8b       	std	Y+19, r24	; 0x13
    2e86:	3f c0       	rjmp	.+126    	; 0x2f06 <main+0x15e2>
	else if (__tmp > 65535)
    2e88:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	57 e4       	ldi	r21, 0x47	; 71
    2e98:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	4c f5       	brge	.+82     	; 0x2ef2 <main+0x15ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ea2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ea6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e2       	ldi	r20, 0x20	; 32
    2eae:	51 e4       	ldi	r21, 0x41	; 65
    2eb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9c 8b       	std	Y+20, r25	; 0x14
    2ec6:	8b 8b       	std	Y+19, r24	; 0x13
    2ec8:	0f c0       	rjmp	.+30     	; 0x2ee8 <main+0x15c4>
    2eca:	80 e9       	ldi	r24, 0x90	; 144
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
    2ece:	9a 8b       	std	Y+18, r25	; 0x12
    2ed0:	89 8b       	std	Y+17, r24	; 0x11
    2ed2:	89 89       	ldd	r24, Y+17	; 0x11
    2ed4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <main+0x15b2>
    2eda:	9a 8b       	std	Y+18, r25	; 0x12
    2edc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ede:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	9c 8b       	std	Y+20, r25	; 0x14
    2ee6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eea:	9c 89       	ldd	r25, Y+20	; 0x14
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	69 f7       	brne	.-38     	; 0x2eca <main+0x15a6>
    2ef0:	14 c0       	rjmp	.+40     	; 0x2f1a <main+0x15f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    2efa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9c 8b       	std	Y+20, r25	; 0x14
    2f04:	8b 8b       	std	Y+19, r24	; 0x13
    2f06:	8b 89       	ldd	r24, Y+19	; 0x13
    2f08:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0a:	98 8b       	std	Y+16, r25	; 0x10
    2f0c:	8f 87       	std	Y+15, r24	; 0x0f
    2f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f10:	98 89       	ldd	r25, Y+16	; 0x10
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <main+0x15ee>
    2f16:	98 8b       	std	Y+16, r25	; 0x10
    2f18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	CLCD_voidClrScr();
    2f1a:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
	LCD_voidWriteSpecialChar(Copy_u8Pattern,0,2,5);
    2f1e:	8c e9       	ldi	r24, 0x9C	; 156
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	42 e0       	ldi	r20, 0x02	; 2
    2f26:	25 e0       	ldi	r18, 0x05	; 5
    2f28:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>

	LCD_voidWriteSpecialChar(Copy_u8Pattern,3,0,6);
    2f2c:	8c e9       	ldi	r24, 0x9C	; 156
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	63 e0       	ldi	r22, 0x03	; 3
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	26 e0       	ldi	r18, 0x06	; 6
    2f36:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidWriteSpecialChar>
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	aa e7       	ldi	r26, 0x7A	; 122
    2f40:	b4 e4       	ldi	r27, 0x44	; 68
    2f42:	8b 87       	std	Y+11, r24	; 0x0b
    2f44:	9c 87       	std	Y+12, r25	; 0x0c
    2f46:	ad 87       	std	Y+13, r26	; 0x0d
    2f48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	4a e7       	ldi	r20, 0x7A	; 122
    2f58:	55 e4       	ldi	r21, 0x45	; 69
    2f5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	8f 83       	std	Y+7, r24	; 0x07
    2f64:	98 87       	std	Y+8, r25	; 0x08
    2f66:	a9 87       	std	Y+9, r26	; 0x09
    2f68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6c:	78 85       	ldd	r23, Y+8	; 0x08
    2f6e:	89 85       	ldd	r24, Y+9	; 0x09
    2f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e8       	ldi	r20, 0x80	; 128
    2f78:	5f e3       	ldi	r21, 0x3F	; 63
    2f7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f7e:	88 23       	and	r24, r24
    2f80:	2c f4       	brge	.+10     	; 0x2f8c <main+0x1668>
		__ticks = 1;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	9e 83       	std	Y+6, r25	; 0x06
    2f88:	8d 83       	std	Y+5, r24	; 0x05
    2f8a:	3f c0       	rjmp	.+126    	; 0x300a <main+0x16e6>
	else if (__tmp > 65535)
    2f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8e:	78 85       	ldd	r23, Y+8	; 0x08
    2f90:	89 85       	ldd	r24, Y+9	; 0x09
    2f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	3f ef       	ldi	r19, 0xFF	; 255
    2f98:	4f e7       	ldi	r20, 0x7F	; 127
    2f9a:	57 e4       	ldi	r21, 0x47	; 71
    2f9c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fa0:	18 16       	cp	r1, r24
    2fa2:	4c f5       	brge	.+82     	; 0x2ff6 <main+0x16d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e2       	ldi	r20, 0x20	; 32
    2fb2:	51 e4       	ldi	r21, 0x41	; 65
    2fb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	bc 01       	movw	r22, r24
    2fbe:	cd 01       	movw	r24, r26
    2fc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	9e 83       	std	Y+6, r25	; 0x06
    2fca:	8d 83       	std	Y+5, r24	; 0x05
    2fcc:	0f c0       	rjmp	.+30     	; 0x2fec <main+0x16c8>
    2fce:	80 e9       	ldi	r24, 0x90	; 144
    2fd0:	91 e0       	ldi	r25, 0x01	; 1
    2fd2:	9c 83       	std	Y+4, r25	; 0x04
    2fd4:	8b 83       	std	Y+3, r24	; 0x03
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <main+0x16b6>
    2fde:	9c 83       	std	Y+4, r25	; 0x04
    2fe0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	9e 83       	std	Y+6, r25	; 0x06
    2fea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fec:	8d 81       	ldd	r24, Y+5	; 0x05
    2fee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	69 f7       	brne	.-38     	; 0x2fce <main+0x16aa>
    2ff4:	14 c0       	rjmp	.+40     	; 0x301e <main+0x16fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff8:	78 85       	ldd	r23, Y+8	; 0x08
    2ffa:	89 85       	ldd	r24, Y+9	; 0x09
    2ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	9e 83       	std	Y+6, r25	; 0x06
    3008:	8d 83       	std	Y+5, r24	; 0x05
    300a:	8d 81       	ldd	r24, Y+5	; 0x05
    300c:	9e 81       	ldd	r25, Y+6	; 0x06
    300e:	9a 83       	std	Y+2, r25	; 0x02
    3010:	89 83       	std	Y+1, r24	; 0x01
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	9a 81       	ldd	r25, Y+2	; 0x02
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	f1 f7       	brne	.-4      	; 0x3016 <main+0x16f2>
    301a:	9a 83       	std	Y+2, r25	; 0x02
    301c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	CLCD_voidClrScr();
    301e:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_voidClrScr>
	CLCD_voidGotoXY(1,1);
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	61 e0       	ldi	r22, 0x01	; 1
    3026:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidGotoXY>
	CLCD_u8SendString("BYEEEEE");
    302a:	8c e8       	ldi	r24, 0x8C	; 140
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	0e 94 48 07 	call	0xe90	; 0xe90 <CLCD_u8SendString>
    3032:	ff cf       	rjmp	.-2      	; 0x3032 <main+0x170e>

00003034 <__divmodsi4>:
    3034:	97 fb       	bst	r25, 7
    3036:	09 2e       	mov	r0, r25
    3038:	05 26       	eor	r0, r21
    303a:	0e d0       	rcall	.+28     	; 0x3058 <__divmodsi4_neg1>
    303c:	57 fd       	sbrc	r21, 7
    303e:	04 d0       	rcall	.+8      	; 0x3048 <__divmodsi4_neg2>
    3040:	14 d0       	rcall	.+40     	; 0x306a <__udivmodsi4>
    3042:	0a d0       	rcall	.+20     	; 0x3058 <__divmodsi4_neg1>
    3044:	00 1c       	adc	r0, r0
    3046:	38 f4       	brcc	.+14     	; 0x3056 <__divmodsi4_exit>

00003048 <__divmodsi4_neg2>:
    3048:	50 95       	com	r21
    304a:	40 95       	com	r20
    304c:	30 95       	com	r19
    304e:	21 95       	neg	r18
    3050:	3f 4f       	sbci	r19, 0xFF	; 255
    3052:	4f 4f       	sbci	r20, 0xFF	; 255
    3054:	5f 4f       	sbci	r21, 0xFF	; 255

00003056 <__divmodsi4_exit>:
    3056:	08 95       	ret

00003058 <__divmodsi4_neg1>:
    3058:	f6 f7       	brtc	.-4      	; 0x3056 <__divmodsi4_exit>
    305a:	90 95       	com	r25
    305c:	80 95       	com	r24
    305e:	70 95       	com	r23
    3060:	61 95       	neg	r22
    3062:	7f 4f       	sbci	r23, 0xFF	; 255
    3064:	8f 4f       	sbci	r24, 0xFF	; 255
    3066:	9f 4f       	sbci	r25, 0xFF	; 255
    3068:	08 95       	ret

0000306a <__udivmodsi4>:
    306a:	a1 e2       	ldi	r26, 0x21	; 33
    306c:	1a 2e       	mov	r1, r26
    306e:	aa 1b       	sub	r26, r26
    3070:	bb 1b       	sub	r27, r27
    3072:	fd 01       	movw	r30, r26
    3074:	0d c0       	rjmp	.+26     	; 0x3090 <__udivmodsi4_ep>

00003076 <__udivmodsi4_loop>:
    3076:	aa 1f       	adc	r26, r26
    3078:	bb 1f       	adc	r27, r27
    307a:	ee 1f       	adc	r30, r30
    307c:	ff 1f       	adc	r31, r31
    307e:	a2 17       	cp	r26, r18
    3080:	b3 07       	cpc	r27, r19
    3082:	e4 07       	cpc	r30, r20
    3084:	f5 07       	cpc	r31, r21
    3086:	20 f0       	brcs	.+8      	; 0x3090 <__udivmodsi4_ep>
    3088:	a2 1b       	sub	r26, r18
    308a:	b3 0b       	sbc	r27, r19
    308c:	e4 0b       	sbc	r30, r20
    308e:	f5 0b       	sbc	r31, r21

00003090 <__udivmodsi4_ep>:
    3090:	66 1f       	adc	r22, r22
    3092:	77 1f       	adc	r23, r23
    3094:	88 1f       	adc	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	1a 94       	dec	r1
    309a:	69 f7       	brne	.-38     	; 0x3076 <__udivmodsi4_loop>
    309c:	60 95       	com	r22
    309e:	70 95       	com	r23
    30a0:	80 95       	com	r24
    30a2:	90 95       	com	r25
    30a4:	9b 01       	movw	r18, r22
    30a6:	ac 01       	movw	r20, r24
    30a8:	bd 01       	movw	r22, r26
    30aa:	cf 01       	movw	r24, r30
    30ac:	08 95       	ret

000030ae <__prologue_saves__>:
    30ae:	2f 92       	push	r2
    30b0:	3f 92       	push	r3
    30b2:	4f 92       	push	r4
    30b4:	5f 92       	push	r5
    30b6:	6f 92       	push	r6
    30b8:	7f 92       	push	r7
    30ba:	8f 92       	push	r8
    30bc:	9f 92       	push	r9
    30be:	af 92       	push	r10
    30c0:	bf 92       	push	r11
    30c2:	cf 92       	push	r12
    30c4:	df 92       	push	r13
    30c6:	ef 92       	push	r14
    30c8:	ff 92       	push	r15
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	ca 1b       	sub	r28, r26
    30d8:	db 0b       	sbc	r29, r27
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	09 94       	ijmp

000030e6 <__epilogue_restores__>:
    30e6:	2a 88       	ldd	r2, Y+18	; 0x12
    30e8:	39 88       	ldd	r3, Y+17	; 0x11
    30ea:	48 88       	ldd	r4, Y+16	; 0x10
    30ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    30ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    30f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    30f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    30f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    30f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    30f8:	b9 84       	ldd	r11, Y+9	; 0x09
    30fa:	c8 84       	ldd	r12, Y+8	; 0x08
    30fc:	df 80       	ldd	r13, Y+7	; 0x07
    30fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3100:	fd 80       	ldd	r15, Y+5	; 0x05
    3102:	0c 81       	ldd	r16, Y+4	; 0x04
    3104:	1b 81       	ldd	r17, Y+3	; 0x03
    3106:	aa 81       	ldd	r26, Y+2	; 0x02
    3108:	b9 81       	ldd	r27, Y+1	; 0x01
    310a:	ce 0f       	add	r28, r30
    310c:	d1 1d       	adc	r29, r1
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	ed 01       	movw	r28, r26
    311a:	08 95       	ret

0000311c <_exit>:
    311c:	f8 94       	cli

0000311e <__stop_program>:
    311e:	ff cf       	rjmp	.-2      	; 0x311e <__stop_program>
