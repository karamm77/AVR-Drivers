
Timer_driver_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  000025cc  00002660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800174  00800174  00002774  2**0
                  ALLOC
  3 .stab         00001fc8  00000000  00000000  00002774  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fad  00000000  00000000  0000473c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000056e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005889  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a3e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a89a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__vector_1>
       8:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__vector_2>
       c:	0c 94 05 10 	jmp	0x200a	; 0x200a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__vector_10>
      2c:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8e 11 	call	0x231c	; 0x231c <main>
      8a:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e6       	ldi	r22, 0x6B	; 107
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 58       	subi	r30, 0x8D	; 141
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <voidSendEnablePulse>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"


static void voidSendEnablePulse(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2e 97       	sbiw	r28, 0x0e	; 14
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	62 e0       	ldi	r22, 0x02	; 2
     e46:	41 e0       	ldi	r20, 0x01	; 1
     e48:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a0 e0       	ldi	r26, 0x00	; 0
     e52:	b0 e4       	ldi	r27, 0x40	; 64
     e54:	8b 87       	std	Y+11, r24	; 0x0b
     e56:	9c 87       	std	Y+12, r25	; 0x0c
     e58:	ad 87       	std	Y+13, r26	; 0x0d
     e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e60:	8d 85       	ldd	r24, Y+13	; 0x0d
     e62:	9e 85       	ldd	r25, Y+14	; 0x0e
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4a e7       	ldi	r20, 0x7A	; 122
     e6a:	55 e4       	ldi	r21, 0x45	; 69
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8f 83       	std	Y+7, r24	; 0x07
     e76:	98 87       	std	Y+8, r25	; 0x08
     e78:	a9 87       	std	Y+9, r26	; 0x09
     e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e7c:	6f 81       	ldd	r22, Y+7	; 0x07
     e7e:	78 85       	ldd	r23, Y+8	; 0x08
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	2c f4       	brge	.+10     	; 0xe9e <voidSendEnablePulse+0x70>
		__ticks = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	3f c0       	rjmp	.+126    	; 0xf1c <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	4f e7       	ldi	r20, 0x7F	; 127
     eac:	57 e4       	ldi	r21, 0x47	; 71
     eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	4c f5       	brge	.+82     	; 0xf08 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	0f c0       	rjmp	.+30     	; 0xefe <voidSendEnablePulse+0xd0>
     ee0:	80 e9       	ldi	r24, 0x90	; 144
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <voidSendEnablePulse+0xbe>
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f7       	brne	.-38     	; 0xee0 <voidSendEnablePulse+0xb2>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <voidSendEnablePulse+0xfa>
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	62 e0       	ldi	r22, 0x02	; 2
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
}
     f3a:	2e 96       	adiw	r28, 0x0e	; 14
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <voidSetLCDHalfDataPort>:


static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	98 2f       	mov	r25, r24
     f5c:	91 70       	andi	r25, 0x01	; 1
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	49 2f       	mov	r20, r25
     f64:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	86 95       	lsr	r24
     f6c:	98 2f       	mov	r25, r24
     f6e:	91 70       	andi	r25, 0x01	; 1
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	49 2f       	mov	r20, r25
     f76:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	86 95       	lsr	r24
     f7e:	86 95       	lsr	r24
     f80:	98 2f       	mov	r25, r24
     f82:	91 70       	andi	r25, 0x01	; 1
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	62 e0       	ldi	r22, 0x02	; 2
     f88:	49 2f       	mov	r20, r25
     f8a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	86 95       	lsr	r24
     f92:	86 95       	lsr	r24
     f94:	86 95       	lsr	r24
     f96:	98 2f       	mov	r25, r24
     f98:	91 70       	andi	r25, 0x01	; 1
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	64 e0       	ldi	r22, 0x04	; 4
     f9e:	49 2f       	mov	r20, r25
     fa0:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>
}
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <CLCD_voidSendCmd>:


void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	0f 92       	push	r0
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	63 e0       	ldi	r22, 0x03	; 3
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	82 95       	swap	r24
     fc6:	8f 70       	andi	r24, 0x0F	; 15
     fc8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     fcc:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     fd6:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
#endif
}
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	63 e0       	ldi	r22, 0x03	; 3
     ff2:	41 e0       	ldi	r20, 0x01	; 1
     ff4:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	82 95       	swap	r24
     ffc:	8f 70       	andi	r24, 0x0F	; 15
     ffe:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1002:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    100c:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
#endif

}
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	2e 97       	sbiw	r28, 0x0e	; 14
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61

	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN3, DIO_u8PIN_OUTPUT); //RS
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	63 e0       	ldi	r22, 0x03	; 3
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN2, DIO_u8PIN_OUTPUT);//E
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_OUTPUT);//D4
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	41 e0       	ldi	r20, 0x01	; 1
    1046:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN1, DIO_u8PIN_OUTPUT);//D5
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN2, DIO_u8PIN_OUTPUT);//D6
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	62 e0       	ldi	r22, 0x02	; 2
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN4, DIO_u8PIN_OUTPUT);//D7
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	64 e0       	ldi	r22, 0x04	; 4
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <DIO_u8SetPinDirection>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 e2       	ldi	r26, 0x20	; 32
    106e:	b2 e4       	ldi	r27, 0x42	; 66
    1070:	8b 87       	std	Y+11, r24	; 0x0b
    1072:	9c 87       	std	Y+12, r25	; 0x0c
    1074:	ad 87       	std	Y+13, r26	; 0x0d
    1076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	6b 85       	ldd	r22, Y+11	; 0x0b
    107a:	7c 85       	ldd	r23, Y+12	; 0x0c
    107c:	8d 85       	ldd	r24, Y+13	; 0x0d
    107e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4a e7       	ldi	r20, 0x7A	; 122
    1086:	55 e4       	ldi	r21, 0x45	; 69
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	8f 83       	std	Y+7, r24	; 0x07
    1092:	98 87       	std	Y+8, r25	; 0x08
    1094:	a9 87       	std	Y+9, r26	; 0x09
    1096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1098:	6f 81       	ldd	r22, Y+7	; 0x07
    109a:	78 85       	ldd	r23, Y+8	; 0x08
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <CLCD_voidInit+0xa2>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <CLCD_voidInit+0x120>
	else if (__tmp > 65535)
    10ba:	6f 81       	ldd	r22, Y+7	; 0x07
    10bc:	78 85       	ldd	r23, Y+8	; 0x08
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	4c f5       	brge	.+82     	; 0x1124 <CLCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <CLCD_voidInit+0x102>
    10fc:	80 e9       	ldi	r24, 0x90	; 144
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <CLCD_voidInit+0xf0>
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	69 f7       	brne	.-38     	; 0x10fc <CLCD_voidInit+0xe4>
    1122:	14 c0       	rjmp	.+40     	; 0x114c <CLCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <CLCD_voidInit+0x12c>
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1152:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    115c:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    1160:	88 e0       	ldi	r24, 0x08	; 8
    1162:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1166:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    116a:	8c e0       	ldi	r24, 0x0C	; 12
    116c:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>
}
    1176:	2e 96       	adiw	r28, 0x0e	; 14
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <CLCD_u8SendString>:


uint8 CLCD_u8SendString(const char* Copy_chString)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <CLCD_u8SendString+0x6>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <CLCD_u8SendString+0x8>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState= OK;
    1198:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chString != NULL)
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	e1 f0       	breq	.+56     	; 0x11da <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Counter=0u;
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <CLCD_u8SendString+0x3a>
		while(Copy_chString[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	fc 01       	movw	r30, r24
    11b2:	e2 0f       	add	r30, r18
    11b4:	f3 1f       	adc	r31, r19
    11b6:	80 81       	ld	r24, Z
    11b8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_voidSendData>
			Local_u8Counter++;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState= OK;
	if(Copy_chString != NULL)
	{
		uint8 Local_u8Counter=0u;
		while(Copy_chString[Local_u8Counter] != '\0')
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	fc 01       	movw	r30, r24
    11ce:	e2 0f       	add	r30, r18
    11d0:	f3 1f       	adc	r31, r19
    11d2:	80 81       	ld	r24, Z
    11d4:	88 23       	and	r24, r24
    11d6:	39 f7       	brne	.-50     	; 0x11a6 <CLCD_u8SendString+0x1e>
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	61 97       	sbiw	r28, 0x11	; 17
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	6e 87       	std	Y+14, r22	; 0x0e
    1204:	7f 87       	std	Y+15, r23	; 0x0f
    1206:	88 8b       	std	Y+16, r24	; 0x10
    1208:	99 8b       	std	Y+17, r25	; 0x11
	char Local_u8ChArr[10];
	uint8 Local_RightDigit;
	uint8 Local_u32Counter1 = 0;
    120a:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_u32Counter2 = 0;
    120c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_s32Number == 0)
    120e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1210:	9f 85       	ldd	r25, Y+15	; 0x0f
    1212:	a8 89       	ldd	r26, Y+16	; 0x10
    1214:	b9 89       	ldd	r27, Y+17	; 0x11
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	a1 05       	cpc	r26, r1
    121a:	b1 05       	cpc	r27, r1
    121c:	21 f4       	brne	.+8      	; 0x1226 <CLCD_voidSendNumber+0x38>
	{
		CLCD_voidSendData('0');
    121e:	80 e3       	ldi	r24, 0x30	; 48
    1220:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_voidSendData>
    1224:	69 c0       	rjmp	.+210    	; 0x12f8 <CLCD_voidSendNumber+0x10a>
		return;
	}
	else if (Copy_s32Number < 0)
    1226:	8e 85       	ldd	r24, Y+14	; 0x0e
    1228:	9f 85       	ldd	r25, Y+15	; 0x0f
    122a:	a8 89       	ldd	r26, Y+16	; 0x10
    122c:	b9 89       	ldd	r27, Y+17	; 0x11
    122e:	bb 23       	and	r27, r27
    1230:	0c f0       	brlt	.+2      	; 0x1234 <CLCD_voidSendNumber+0x46>
    1232:	43 c0       	rjmp	.+134    	; 0x12ba <CLCD_voidSendNumber+0xcc>
	{
		CLCD_voidSendData('-');
    1234:	8d e2       	ldi	r24, 0x2D	; 45
    1236:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_voidSendData>
		Copy_s32Number *= -1;
    123a:	8e 85       	ldd	r24, Y+14	; 0x0e
    123c:	9f 85       	ldd	r25, Y+15	; 0x0f
    123e:	a8 89       	ldd	r26, Y+16	; 0x10
    1240:	b9 89       	ldd	r27, Y+17	; 0x11
    1242:	b0 95       	com	r27
    1244:	a0 95       	com	r26
    1246:	90 95       	com	r25
    1248:	81 95       	neg	r24
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	af 4f       	sbci	r26, 0xFF	; 255
    124e:	bf 4f       	sbci	r27, 0xFF	; 255
    1250:	8e 87       	std	Y+14, r24	; 0x0e
    1252:	9f 87       	std	Y+15, r25	; 0x0f
    1254:	a8 8b       	std	Y+16, r26	; 0x10
    1256:	b9 8b       	std	Y+17, r27	; 0x11
    1258:	30 c0       	rjmp	.+96     	; 0x12ba <CLCD_voidSendNumber+0xcc>
	}

	while (Copy_s32Number != 0)
	{
		Local_RightDigit = Copy_s32Number % 10;
    125a:	8e 85       	ldd	r24, Y+14	; 0x0e
    125c:	9f 85       	ldd	r25, Y+15	; 0x0f
    125e:	a8 89       	ldd	r26, Y+16	; 0x10
    1260:	b9 89       	ldd	r27, Y+17	; 0x11
    1262:	2a e0       	ldi	r18, 0x0A	; 10
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__divmodsi4>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number /= 10;
    1278:	8e 85       	ldd	r24, Y+14	; 0x0e
    127a:	9f 85       	ldd	r25, Y+15	; 0x0f
    127c:	a8 89       	ldd	r26, Y+16	; 0x10
    127e:	b9 89       	ldd	r27, Y+17	; 0x11
    1280:	2a e0       	ldi	r18, 0x0A	; 10
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	bc 01       	movw	r22, r24
    128a:	cd 01       	movw	r24, r26
    128c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__divmodsi4>
    1290:	da 01       	movw	r26, r20
    1292:	c9 01       	movw	r24, r18
    1294:	8e 87       	std	Y+14, r24	; 0x0e
    1296:	9f 87       	std	Y+15, r25	; 0x0f
    1298:	a8 8b       	std	Y+16, r26	; 0x10
    129a:	b9 8b       	std	Y+17, r27	; 0x11
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	48 2f       	mov	r20, r24
    12a6:	40 5d       	subi	r20, 0xD0	; 208
    12a8:	ce 01       	movw	r24, r28
    12aa:	04 96       	adiw	r24, 0x04	; 4
    12ac:	fc 01       	movw	r30, r24
    12ae:	e2 0f       	add	r30, r18
    12b0:	f3 1f       	adc	r31, r19
    12b2:	40 83       	st	Z, r20
		Local_u32Counter1++;
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('-');
		Copy_s32Number *= -1;
	}

	while (Copy_s32Number != 0)
    12ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    12bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    12be:	a8 89       	ldd	r26, Y+16	; 0x10
    12c0:	b9 89       	ldd	r27, Y+17	; 0x11
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	a1 05       	cpc	r26, r1
    12c6:	b1 05       	cpc	r27, r1
    12c8:	41 f6       	brne	.-112    	; 0x125a <CLCD_voidSendNumber+0x6c>
		Copy_s32Number /= 10;
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
		Local_u32Counter1++;
	}

	for (Local_u32Counter2 = Local_u32Counter1 - 1; Local_u32Counter2 >= 0; Local_u32Counter2--)
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	81 50       	subi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	10 c0       	rjmp	.+32     	; 0x12f2 <CLCD_voidSendNumber+0x104>
	{
		CLCD_voidSendData(Local_u8ChArr[Local_u32Counter2]);
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	28 2f       	mov	r18, r24
    12d6:	33 27       	eor	r19, r19
    12d8:	27 fd       	sbrc	r18, 7
    12da:	30 95       	com	r19
    12dc:	ce 01       	movw	r24, r28
    12de:	04 96       	adiw	r24, 0x04	; 4
    12e0:	fc 01       	movw	r30, r24
    12e2:	e2 0f       	add	r30, r18
    12e4:	f3 1f       	adc	r31, r19
    12e6:	80 81       	ld	r24, Z
    12e8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_voidSendData>
		Copy_s32Number /= 10;
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
		Local_u32Counter1++;
	}

	for (Local_u32Counter2 = Local_u32Counter1 - 1; Local_u32Counter2 >= 0; Local_u32Counter2--)
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	81 50       	subi	r24, 0x01	; 1
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	88 23       	and	r24, r24
    12f6:	6c f7       	brge	.-38     	; 0x12d2 <CLCD_voidSendNumber+0xe4>
	{
		CLCD_voidSendData(Local_u8ChArr[Local_u32Counter2]);
	}
}
    12f8:	61 96       	adiw	r28, 0x11	; 17
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <CLCD_voidGoToXY>:


/************************ Go to x and y Simple *****************/

void CLCD_voidGoToXY(uint8 Copy_u8Row,uint8 Copy_u8Col)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	00 d0       	rcall	.+0      	; 0x1310 <CLCD_voidGoToXY+0x6>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <CLCD_voidGoToXY+0x8>
    1312:	0f 92       	push	r0
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_Address;

	switch(Copy_u8Row)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3d 83       	std	Y+5, r19	; 0x05
    1324:	2c 83       	std	Y+4, r18	; 0x04
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	9d 81       	ldd	r25, Y+5	; 0x05
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	c1 f0       	breq	.+48     	; 0x1360 <CLCD_voidGoToXY+0x56>
    1330:	2c 81       	ldd	r18, Y+4	; 0x04
    1332:	3d 81       	ldd	r19, Y+5	; 0x05
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	2c f4       	brge	.+10     	; 0x1344 <CLCD_voidGoToXY+0x3a>
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	61 f0       	breq	.+24     	; 0x135a <CLCD_voidGoToXY+0x50>
    1342:	19 c0       	rjmp	.+50     	; 0x1376 <CLCD_voidGoToXY+0x6c>
    1344:	2c 81       	ldd	r18, Y+4	; 0x04
    1346:	3d 81       	ldd	r19, Y+5	; 0x05
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	69 f0       	breq	.+26     	; 0x1368 <CLCD_voidGoToXY+0x5e>
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	61 f0       	breq	.+24     	; 0x1370 <CLCD_voidGoToXY+0x66>
    1358:	0e c0       	rjmp	.+28     	; 0x1376 <CLCD_voidGoToXY+0x6c>
	{
	case 0: Local_Address = 0x00+Copy_u8Col;	break;
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	0b c0       	rjmp	.+22     	; 0x1376 <CLCD_voidGoToXY+0x6c>
	case 1: Local_Address = 0x40+Copy_u8Col;	break;
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	80 5c       	subi	r24, 0xC0	; 192
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	07 c0       	rjmp	.+14     	; 0x1376 <CLCD_voidGoToXY+0x6c>
	case 2: Local_Address = 0x14+Copy_u8Col;	break;
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	8c 5e       	subi	r24, 0xEC	; 236
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <CLCD_voidGoToXY+0x6c>
	case 3: Local_Address = 0x54+Copy_u8Col;	break;
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	8c 5a       	subi	r24, 0xAC	; 172
    1374:	89 83       	std	Y+1, r24	; 0x01

	}

	CLCD_voidSendCmd(Local_Address+DDRAM_ADDRESS);
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	80 58       	subi	r24, 0x80	; 128
    137a:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>


}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <CLCD_voidClrScr>:



void CLCD_voidClrScr(void)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>
}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <CLCD_voidCursorON>:
void CLCD_voidCursorON(void)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x0D);
    13aa:	8d e0       	ldi	r24, 0x0D	; 13
    13ac:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>
}
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <CLCD_voidCursorOFF>:
void CLCD_voidCursorOFF(void)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(0x0C);
    13be:	8c e0       	ldi	r24, 0x0C	; 12
    13c0:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>

}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <DIO_u8SetPinValue>:
#include"DIO_prv.h"
#include"DIO_reg.h"


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)//which port we want to srt, and which pin
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	28 97       	sbiw	r28, 0x08	; 8
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	8a 83       	std	Y+2, r24	; 0x02
    13e0:	6b 83       	std	Y+3, r22	; 0x03
    13e2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    13e4:	19 82       	std	Y+1, r1	; 0x01

		if (Copy_u8Pin <= DIO_u8PIN7)
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	88 30       	cpi	r24, 0x08	; 8
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <DIO_u8SetPinValue+0x24>
    13ec:	f4 c0       	rjmp	.+488    	; 0x15d6 <DIO_u8SetPinValue+0x20c>
		{
			if(Copy_u8Value == DIO_u8PIN_LOW)
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	88 23       	and	r24, r24
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <DIO_u8SetPinValue+0x2c>
    13f4:	77 c0       	rjmp	.+238    	; 0x14e4 <DIO_u8SetPinValue+0x11a>
			{
				switch(Copy_u8Port)//which port you want it as input
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	38 87       	std	Y+8, r19	; 0x08
    13fe:	2f 83       	std	Y+7, r18	; 0x07
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	98 85       	ldd	r25, Y+8	; 0x08
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	91 05       	cpc	r25, r1
    1408:	59 f1       	breq	.+86     	; 0x1460 <DIO_u8SetPinValue+0x96>
    140a:	2f 81       	ldd	r18, Y+7	; 0x07
    140c:	38 85       	ldd	r19, Y+8	; 0x08
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	2c f4       	brge	.+10     	; 0x141e <DIO_u8SetPinValue+0x54>
    1414:	8f 81       	ldd	r24, Y+7	; 0x07
    1416:	98 85       	ldd	r25, Y+8	; 0x08
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	69 f0       	breq	.+26     	; 0x1436 <DIO_u8SetPinValue+0x6c>
    141c:	60 c0       	rjmp	.+192    	; 0x14de <DIO_u8SetPinValue+0x114>
    141e:	2f 81       	ldd	r18, Y+7	; 0x07
    1420:	38 85       	ldd	r19, Y+8	; 0x08
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	31 05       	cpc	r19, r1
    1426:	89 f1       	breq	.+98     	; 0x148a <DIO_u8SetPinValue+0xc0>
    1428:	8f 81       	ldd	r24, Y+7	; 0x07
    142a:	98 85       	ldd	r25, Y+8	; 0x08
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	91 05       	cpc	r25, r1
    1430:	09 f4       	brne	.+2      	; 0x1434 <DIO_u8SetPinValue+0x6a>
    1432:	40 c0       	rjmp	.+128    	; 0x14b4 <DIO_u8SetPinValue+0xea>
    1434:	54 c0       	rjmp	.+168    	; 0x14de <DIO_u8SetPinValue+0x114>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1436:	ab e3       	ldi	r26, 0x3B	; 59
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	eb e3       	ldi	r30, 0x3B	; 59
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_u8SetPinValue+0x8a>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_u8SetPinValue+0x86>
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	bd c0       	rjmp	.+378    	; 0x15da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1460:	a8 e3       	ldi	r26, 0x38	; 56
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e8 e3       	ldi	r30, 0x38	; 56
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_u8SetPinValue+0xb4>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_u8SetPinValue+0xb0>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	a8 c0       	rjmp	.+336    	; 0x15da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    148a:	a5 e3       	ldi	r26, 0x35	; 53
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e3       	ldi	r30, 0x35	; 53
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_u8SetPinValue+0xde>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_u8SetPinValue+0xda>
    14ac:	80 95       	com	r24
    14ae:	84 23       	and	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	93 c0       	rjmp	.+294    	; 0x15da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    14b4:	a2 e3       	ldi	r26, 0x32	; 50
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_u8SetPinValue+0x108>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_u8SetPinValue+0x104>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	7e c0       	rjmp	.+252    	; 0x15da <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState = NOK; break;//Not any port
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	7b c0       	rjmp	.+246    	; 0x15da <DIO_u8SetPinValue+0x210>
				}
			}
			else if(Copy_u8Value == DIO_u8PIN_HIGH)
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	09 f0       	breq	.+2      	; 0x14ec <DIO_u8SetPinValue+0x122>
    14ea:	72 c0       	rjmp	.+228    	; 0x15d0 <DIO_u8SetPinValue+0x206>
			{
				switch(Copy_u8Port)//which port you want it as input
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3e 83       	std	Y+6, r19	; 0x06
    14f4:	2d 83       	std	Y+5, r18	; 0x05
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	49 f1       	breq	.+82     	; 0x1552 <DIO_u8SetPinValue+0x188>
    1500:	2d 81       	ldd	r18, Y+5	; 0x05
    1502:	3e 81       	ldd	r19, Y+6	; 0x06
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <DIO_u8SetPinValue+0x14a>
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	61 f0       	breq	.+24     	; 0x152a <DIO_u8SetPinValue+0x160>
    1512:	5b c0       	rjmp	.+182    	; 0x15ca <DIO_u8SetPinValue+0x200>
    1514:	2d 81       	ldd	r18, Y+5	; 0x05
    1516:	3e 81       	ldd	r19, Y+6	; 0x06
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	71 f1       	breq	.+92     	; 0x157a <DIO_u8SetPinValue+0x1b0>
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	e9 f1       	breq	.+122    	; 0x15a2 <DIO_u8SetPinValue+0x1d8>
    1528:	50 c0       	rjmp	.+160    	; 0x15ca <DIO_u8SetPinValue+0x200>
				{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    152a:	ab e3       	ldi	r26, 0x3B	; 59
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e3       	ldi	r30, 0x3B	; 59
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_u8SetPinValue+0x17e>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_u8SetPinValue+0x17a>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	44 c0       	rjmp	.+136    	; 0x15da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1552:	a8 e3       	ldi	r26, 0x38	; 56
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 e3       	ldi	r30, 0x38	; 56
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_u8SetPinValue+0x1a6>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_u8SetPinValue+0x1a2>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	30 c0       	rjmp	.+96     	; 0x15da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    157a:	a5 e3       	ldi	r26, 0x35	; 53
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e5 e3       	ldi	r30, 0x35	; 53
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_u8SetPinValue+0x1ce>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_u8SetPinValue+0x1ca>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	1c c0       	rjmp	.+56     	; 0x15da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    15a2:	a2 e3       	ldi	r26, 0x32	; 50
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e2 e3       	ldi	r30, 0x32	; 50
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_u8SetPinValue+0x1f6>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_u8SetPinValue+0x1f2>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	08 c0       	rjmp	.+16     	; 0x15da <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState = NOK; break;//Not any port
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <DIO_u8SetPinValue+0x210>
				}
			}
			else
			{
				Local_u8ErrorState = NOK;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	89 83       	std	Y+1, r24	; 0x01
		}


		return Local_u8ErrorState;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
}
    15dc:	28 96       	adiw	r28, 0x08	; 8
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <DIO_u8SetPinDirection>:




uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)//which port we want to srt, and which pin
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	28 97       	sbiw	r28, 0x08	; 8
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	8a 83       	std	Y+2, r24	; 0x02
    1604:	6b 83       	std	Y+3, r22	; 0x03
    1606:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1608:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	88 30       	cpi	r24, 0x08	; 8
    160e:	08 f0       	brcs	.+2      	; 0x1612 <DIO_u8SetPinDirection+0x24>
    1610:	f4 c0       	rjmp	.+488    	; 0x17fa <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    1612:	8c 81       	ldd	r24, Y+4	; 0x04
    1614:	88 23       	and	r24, r24
    1616:	09 f0       	breq	.+2      	; 0x161a <DIO_u8SetPinDirection+0x2c>
    1618:	77 c0       	rjmp	.+238    	; 0x1708 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)//which port you want it as input
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	38 87       	std	Y+8, r19	; 0x08
    1622:	2f 83       	std	Y+7, r18	; 0x07
    1624:	8f 81       	ldd	r24, Y+7	; 0x07
    1626:	98 85       	ldd	r25, Y+8	; 0x08
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	91 05       	cpc	r25, r1
    162c:	59 f1       	breq	.+86     	; 0x1684 <DIO_u8SetPinDirection+0x96>
    162e:	2f 81       	ldd	r18, Y+7	; 0x07
    1630:	38 85       	ldd	r19, Y+8	; 0x08
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	2c f4       	brge	.+10     	; 0x1642 <DIO_u8SetPinDirection+0x54>
    1638:	8f 81       	ldd	r24, Y+7	; 0x07
    163a:	98 85       	ldd	r25, Y+8	; 0x08
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	69 f0       	breq	.+26     	; 0x165a <DIO_u8SetPinDirection+0x6c>
    1640:	60 c0       	rjmp	.+192    	; 0x1702 <DIO_u8SetPinDirection+0x114>
    1642:	2f 81       	ldd	r18, Y+7	; 0x07
    1644:	38 85       	ldd	r19, Y+8	; 0x08
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	89 f1       	breq	.+98     	; 0x16ae <DIO_u8SetPinDirection+0xc0>
    164c:	8f 81       	ldd	r24, Y+7	; 0x07
    164e:	98 85       	ldd	r25, Y+8	; 0x08
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	91 05       	cpc	r25, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <DIO_u8SetPinDirection+0x6a>
    1656:	40 c0       	rjmp	.+128    	; 0x16d8 <DIO_u8SetPinDirection+0xea>
    1658:	54 c0       	rjmp	.+168    	; 0x1702 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    165a:	aa e3       	ldi	r26, 0x3A	; 58
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ea e3       	ldi	r30, 0x3A	; 58
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_u8SetPinDirection+0x8a>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_u8SetPinDirection+0x86>
    167c:	80 95       	com	r24
    167e:	84 23       	and	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	bd c0       	rjmp	.+378    	; 0x17fe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    1684:	a7 e3       	ldi	r26, 0x37	; 55
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e7 e3       	ldi	r30, 0x37	; 55
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <DIO_u8SetPinDirection+0xb4>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <DIO_u8SetPinDirection+0xb0>
    16a6:	80 95       	com	r24
    16a8:	84 23       	and	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	a8 c0       	rjmp	.+336    	; 0x17fe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    16ae:	a4 e3       	ldi	r26, 0x34	; 52
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e4 e3       	ldi	r30, 0x34	; 52
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_u8SetPinDirection+0xde>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_u8SetPinDirection+0xda>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	93 c0       	rjmp	.+294    	; 0x17fe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    16d8:	a1 e3       	ldi	r26, 0x31	; 49
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e1 e3       	ldi	r30, 0x31	; 49
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_u8SetPinDirection+0x108>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_u8SetPinDirection+0x104>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	7e c0       	rjmp	.+252    	; 0x17fe <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;//Not any port
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	7b c0       	rjmp	.+246    	; 0x17fe <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	09 f0       	breq	.+2      	; 0x1710 <DIO_u8SetPinDirection+0x122>
    170e:	72 c0       	rjmp	.+228    	; 0x17f4 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)//which port you want it as input
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	3e 83       	std	Y+6, r19	; 0x06
    1718:	2d 83       	std	Y+5, r18	; 0x05
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	91 05       	cpc	r25, r1
    1722:	49 f1       	breq	.+82     	; 0x1776 <DIO_u8SetPinDirection+0x188>
    1724:	2d 81       	ldd	r18, Y+5	; 0x05
    1726:	3e 81       	ldd	r19, Y+6	; 0x06
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	31 05       	cpc	r19, r1
    172c:	2c f4       	brge	.+10     	; 0x1738 <DIO_u8SetPinDirection+0x14a>
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	61 f0       	breq	.+24     	; 0x174e <DIO_u8SetPinDirection+0x160>
    1736:	5b c0       	rjmp	.+182    	; 0x17ee <DIO_u8SetPinDirection+0x200>
    1738:	2d 81       	ldd	r18, Y+5	; 0x05
    173a:	3e 81       	ldd	r19, Y+6	; 0x06
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	71 f1       	breq	.+92     	; 0x179e <DIO_u8SetPinDirection+0x1b0>
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	9e 81       	ldd	r25, Y+6	; 0x06
    1746:	83 30       	cpi	r24, 0x03	; 3
    1748:	91 05       	cpc	r25, r1
    174a:	e9 f1       	breq	.+122    	; 0x17c6 <DIO_u8SetPinDirection+0x1d8>
    174c:	50 c0       	rjmp	.+160    	; 0x17ee <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    174e:	aa e3       	ldi	r26, 0x3A	; 58
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	ea e3       	ldi	r30, 0x3A	; 58
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_u8SetPinDirection+0x17e>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <DIO_u8SetPinDirection+0x17a>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	44 c0       	rjmp	.+136    	; 0x17fe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1776:	a7 e3       	ldi	r26, 0x37	; 55
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e7 e3       	ldi	r30, 0x37	; 55
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_u8SetPinDirection+0x1a6>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_u8SetPinDirection+0x1a2>
    1798:	84 2b       	or	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	30 c0       	rjmp	.+96     	; 0x17fe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    179e:	a4 e3       	ldi	r26, 0x34	; 52
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e4 e3       	ldi	r30, 0x34	; 52
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <DIO_u8SetPinDirection+0x1ce>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <DIO_u8SetPinDirection+0x1ca>
    17c0:	84 2b       	or	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	1c c0       	rjmp	.+56     	; 0x17fe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    17c6:	a1 e3       	ldi	r26, 0x31	; 49
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e1 e3       	ldi	r30, 0x31	; 49
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_u8SetPinDirection+0x1f6>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_u8SetPinDirection+0x1f2>
    17e8:	84 2b       	or	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;//Not any port
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1800:	28 96       	adiw	r28, 0x08	; 8
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <DIO_u8GetPinValue>:


uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)//which port we want to srt, and which pin
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	27 97       	sbiw	r28, 0x07	; 7
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	8a 83       	std	Y+2, r24	; 0x02
    1828:	6b 83       	std	Y+3, r22	; 0x03
    182a:	5d 83       	std	Y+5, r21	; 0x05
    182c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    182e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	09 f4       	brne	.+2      	; 0x183a <DIO_u8GetPinValue+0x28>
    1838:	7b c0       	rjmp	.+246    	; 0x1930 <DIO_u8GetPinValue+0x11e>
	{
		if( Copy_u8Pin <= DIO_u8PIN7)
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	88 30       	cpi	r24, 0x08	; 8
    183e:	08 f0       	brcs	.+2      	; 0x1842 <DIO_u8GetPinValue+0x30>
    1840:	74 c0       	rjmp	.+232    	; 0x192a <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)//which port you want it as input
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	3f 83       	std	Y+7, r19	; 0x07
    184a:	2e 83       	std	Y+6, r18	; 0x06
    184c:	4e 81       	ldd	r20, Y+6	; 0x06
    184e:	5f 81       	ldd	r21, Y+7	; 0x07
    1850:	41 30       	cpi	r20, 0x01	; 1
    1852:	51 05       	cpc	r21, r1
    1854:	59 f1       	breq	.+86     	; 0x18ac <DIO_u8GetPinValue+0x9a>
    1856:	8e 81       	ldd	r24, Y+6	; 0x06
    1858:	9f 81       	ldd	r25, Y+7	; 0x07
    185a:	82 30       	cpi	r24, 0x02	; 2
    185c:	91 05       	cpc	r25, r1
    185e:	34 f4       	brge	.+12     	; 0x186c <DIO_u8GetPinValue+0x5a>
    1860:	2e 81       	ldd	r18, Y+6	; 0x06
    1862:	3f 81       	ldd	r19, Y+7	; 0x07
    1864:	21 15       	cp	r18, r1
    1866:	31 05       	cpc	r19, r1
    1868:	69 f0       	breq	.+26     	; 0x1884 <DIO_u8GetPinValue+0x72>
    186a:	5c c0       	rjmp	.+184    	; 0x1924 <DIO_u8GetPinValue+0x112>
    186c:	4e 81       	ldd	r20, Y+6	; 0x06
    186e:	5f 81       	ldd	r21, Y+7	; 0x07
    1870:	42 30       	cpi	r20, 0x02	; 2
    1872:	51 05       	cpc	r21, r1
    1874:	79 f1       	breq	.+94     	; 0x18d4 <DIO_u8GetPinValue+0xc2>
    1876:	8e 81       	ldd	r24, Y+6	; 0x06
    1878:	9f 81       	ldd	r25, Y+7	; 0x07
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <DIO_u8GetPinValue+0x70>
    1880:	3d c0       	rjmp	.+122    	; 0x18fc <DIO_u8GetPinValue+0xea>
    1882:	50 c0       	rjmp	.+160    	; 0x1924 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:*Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
    1884:	e9 e3       	ldi	r30, 0x39	; 57
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a9 01       	movw	r20, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <DIO_u8GetPinValue+0x8a>
    1898:	55 95       	asr	r21
    189a:	47 95       	ror	r20
    189c:	8a 95       	dec	r24
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <DIO_u8GetPinValue+0x86>
    18a0:	ca 01       	movw	r24, r20
    18a2:	81 70       	andi	r24, 0x01	; 1
    18a4:	ec 81       	ldd	r30, Y+4	; 0x04
    18a6:	fd 81       	ldd	r31, Y+5	; 0x05
    18a8:	80 83       	st	Z, r24
    18aa:	44 c0       	rjmp	.+136    	; 0x1934 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTB:*Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
    18ac:	e6 e3       	ldi	r30, 0x36	; 54
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a9 01       	movw	r20, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <DIO_u8GetPinValue+0xb2>
    18c0:	55 95       	asr	r21
    18c2:	47 95       	ror	r20
    18c4:	8a 95       	dec	r24
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <DIO_u8GetPinValue+0xae>
    18c8:	ca 01       	movw	r24, r20
    18ca:	81 70       	andi	r24, 0x01	; 1
    18cc:	ec 81       	ldd	r30, Y+4	; 0x04
    18ce:	fd 81       	ldd	r31, Y+5	; 0x05
    18d0:	80 83       	st	Z, r24
    18d2:	30 c0       	rjmp	.+96     	; 0x1934 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTC:*Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
    18d4:	e3 e3       	ldi	r30, 0x33	; 51
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a9 01       	movw	r20, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <DIO_u8GetPinValue+0xda>
    18e8:	55 95       	asr	r21
    18ea:	47 95       	ror	r20
    18ec:	8a 95       	dec	r24
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <DIO_u8GetPinValue+0xd6>
    18f0:	ca 01       	movw	r24, r20
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	ec 81       	ldd	r30, Y+4	; 0x04
    18f6:	fd 81       	ldd	r31, Y+5	; 0x05
    18f8:	80 83       	st	Z, r24
    18fa:	1c c0       	rjmp	.+56     	; 0x1934 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTD:*Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
    18fc:	e0 e3       	ldi	r30, 0x30	; 48
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a9 01       	movw	r20, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <DIO_u8GetPinValue+0x102>
    1910:	55 95       	asr	r21
    1912:	47 95       	ror	r20
    1914:	8a 95       	dec	r24
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <DIO_u8GetPinValue+0xfe>
    1918:	ca 01       	movw	r24, r20
    191a:	81 70       	andi	r24, 0x01	; 1
    191c:	ec 81       	ldd	r30, Y+4	; 0x04
    191e:	fd 81       	ldd	r31, Y+5	; 0x05
    1920:	80 83       	st	Z, r24
    1922:	08 c0       	rjmp	.+16     	; 0x1934 <DIO_u8GetPinValue+0x122>
			default: Local_u8ErrorState = NOK; break;//Not any port
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_u8GetPinValue+0x122>
		}

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1934:	89 81       	ldd	r24, Y+1	; 0x01
}
    1936:	27 96       	adiw	r28, 0x07	; 7
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <DIO_u8SetPortDirection+0x6>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <DIO_u8SetPortDirection+0x8>
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	8a 83       	std	Y+2, r24	; 0x02
    1958:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    195a:	19 82       	std	Y+1, r1	; 0x01


				switch(Copy_u8Port)//which port you want it as input
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3d 83       	std	Y+5, r19	; 0x05
    1964:	2c 83       	std	Y+4, r18	; 0x04
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	91 05       	cpc	r25, r1
    196e:	d1 f0       	breq	.+52     	; 0x19a4 <DIO_u8SetPortDirection+0x5c>
    1970:	2c 81       	ldd	r18, Y+4	; 0x04
    1972:	3d 81       	ldd	r19, Y+5	; 0x05
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 05       	cpc	r19, r1
    1978:	2c f4       	brge	.+10     	; 0x1984 <DIO_u8SetPortDirection+0x3c>
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	61 f0       	breq	.+24     	; 0x199a <DIO_u8SetPortDirection+0x52>
    1982:	1f c0       	rjmp	.+62     	; 0x19c2 <DIO_u8SetPortDirection+0x7a>
    1984:	2c 81       	ldd	r18, Y+4	; 0x04
    1986:	3d 81       	ldd	r19, Y+5	; 0x05
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	81 f0       	breq	.+32     	; 0x19ae <DIO_u8SetPortDirection+0x66>
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	9d 81       	ldd	r25, Y+5	; 0x05
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	91 05       	cpc	r25, r1
    1996:	81 f0       	breq	.+32     	; 0x19b8 <DIO_u8SetPortDirection+0x70>
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <DIO_u8SetPortDirection+0x7a>
				{
				case DIO_u8PORTA:DDRA = Copy_u8Direction; break;
    199a:	ea e3       	ldi	r30, 0x3A	; 58
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	80 83       	st	Z, r24
    19a2:	11 c0       	rjmp	.+34     	; 0x19c6 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTB:DDRB = Copy_u8Direction; break;
    19a4:	e7 e3       	ldi	r30, 0x37	; 55
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	80 83       	st	Z, r24
    19ac:	0c c0       	rjmp	.+24     	; 0x19c6 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTC:DDRC = Copy_u8Direction; break;
    19ae:	e4 e3       	ldi	r30, 0x34	; 52
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	80 83       	st	Z, r24
    19b6:	07 c0       	rjmp	.+14     	; 0x19c6 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTD:DDRD = Copy_u8Direction; break;
    19b8:	e1 e3       	ldi	r30, 0x31	; 49
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	80 83       	st	Z, r24
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_u8SetPortDirection+0x7e>
				default: Local_u8ErrorState = NOK; break;//Not any port
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	89 83       	std	Y+1, r24	; 0x01
				}

		return Local_u8ErrorState;
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <DIO_u8SetPortValue+0x6>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <DIO_u8SetPortValue+0x8>
    19e0:	0f 92       	push	r0
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	8a 83       	std	Y+2, r24	; 0x02
    19e8:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState = OK;
    19ea:	19 82       	std	Y+1, r1	; 0x01


				switch(Copy_u8Port)//which port you want it as input
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	3d 83       	std	Y+5, r19	; 0x05
    19f4:	2c 83       	std	Y+4, r18	; 0x04
    19f6:	8c 81       	ldd	r24, Y+4	; 0x04
    19f8:	9d 81       	ldd	r25, Y+5	; 0x05
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	91 05       	cpc	r25, r1
    19fe:	d1 f0       	breq	.+52     	; 0x1a34 <DIO_u8SetPortValue+0x5c>
    1a00:	2c 81       	ldd	r18, Y+4	; 0x04
    1a02:	3d 81       	ldd	r19, Y+5	; 0x05
    1a04:	22 30       	cpi	r18, 0x02	; 2
    1a06:	31 05       	cpc	r19, r1
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <DIO_u8SetPortValue+0x3c>
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	61 f0       	breq	.+24     	; 0x1a2a <DIO_u8SetPortValue+0x52>
    1a12:	1f c0       	rjmp	.+62     	; 0x1a52 <DIO_u8SetPortValue+0x7a>
    1a14:	2c 81       	ldd	r18, Y+4	; 0x04
    1a16:	3d 81       	ldd	r19, Y+5	; 0x05
    1a18:	22 30       	cpi	r18, 0x02	; 2
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	81 f0       	breq	.+32     	; 0x1a3e <DIO_u8SetPortValue+0x66>
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	9d 81       	ldd	r25, Y+5	; 0x05
    1a22:	83 30       	cpi	r24, 0x03	; 3
    1a24:	91 05       	cpc	r25, r1
    1a26:	81 f0       	breq	.+32     	; 0x1a48 <DIO_u8SetPortValue+0x70>
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <DIO_u8SetPortValue+0x7a>
				{
				case DIO_u8PORTA:PORTA = Copy_u8Value; break;
    1a2a:	eb e3       	ldi	r30, 0x3B	; 59
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	80 83       	st	Z, r24
    1a32:	11 c0       	rjmp	.+34     	; 0x1a56 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTB:PORTB = Copy_u8Value; break;
    1a34:	e8 e3       	ldi	r30, 0x38	; 56
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	80 83       	st	Z, r24
    1a3c:	0c c0       	rjmp	.+24     	; 0x1a56 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTC:PORTC = Copy_u8Value; break;
    1a3e:	e5 e3       	ldi	r30, 0x35	; 53
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	80 83       	st	Z, r24
    1a46:	07 c0       	rjmp	.+14     	; 0x1a56 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTD:PORTD = Copy_u8Value; break;
    1a48:	e2 e3       	ldi	r30, 0x32	; 50
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	80 83       	st	Z, r24
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_u8SetPortValue+0x7e>
				default: Local_u8ErrorState = NOK; break;//Not any port
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	89 83       	std	Y+1, r24	; 0x01
				}

		return Local_u8ErrorState;
    1a56:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <DIO_u8TogglePinValue+0x6>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <DIO_u8TogglePinValue+0x8>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <DIO_u8TogglePinValue+0xa>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	8a 83       	std	Y+2, r24	; 0x02
    1a78:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1a7a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	88 30       	cpi	r24, 0x08	; 8
    1a80:	08 f0       	brcs	.+2      	; 0x1a84 <DIO_u8TogglePinValue+0x1c>
    1a82:	74 c0       	rjmp	.+232    	; 0x1b6c <DIO_u8TogglePinValue+0x104>
	{

			switch(Copy_u8Port)//which port you want it as input
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	3e 83       	std	Y+6, r19	; 0x06
    1a8c:	2d 83       	std	Y+5, r18	; 0x05
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	91 05       	cpc	r25, r1
    1a96:	49 f1       	breq	.+82     	; 0x1aea <DIO_u8TogglePinValue+0x82>
    1a98:	2d 81       	ldd	r18, Y+5	; 0x05
    1a9a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a9c:	22 30       	cpi	r18, 0x02	; 2
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <DIO_u8TogglePinValue+0x44>
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	61 f0       	breq	.+24     	; 0x1ac2 <DIO_u8TogglePinValue+0x5a>
    1aaa:	5b c0       	rjmp	.+182    	; 0x1b62 <DIO_u8TogglePinValue+0xfa>
    1aac:	2d 81       	ldd	r18, Y+5	; 0x05
    1aae:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab0:	22 30       	cpi	r18, 0x02	; 2
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	71 f1       	breq	.+92     	; 0x1b12 <DIO_u8TogglePinValue+0xaa>
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	91 05       	cpc	r25, r1
    1abe:	e9 f1       	breq	.+122    	; 0x1b3a <DIO_u8TogglePinValue+0xd2>
    1ac0:	50 c0       	rjmp	.+160    	; 0x1b62 <DIO_u8TogglePinValue+0xfa>
			{
			case DIO_u8PORTA:TOG_BIT(PORTA,Copy_u8Pin); break;
    1ac2:	ab e3       	ldi	r26, 0x3B	; 59
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	eb e3       	ldi	r30, 0x3B	; 59
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_u8TogglePinValue+0x78>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <DIO_u8TogglePinValue+0x74>
    1ae4:	84 27       	eor	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	3e c0       	rjmp	.+124    	; 0x1b66 <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTB:TOG_BIT(PORTB,Copy_u8Pin); break;
    1aea:	a8 e3       	ldi	r26, 0x38	; 56
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e8 e3       	ldi	r30, 0x38	; 56
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_u8TogglePinValue+0xa0>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_u8TogglePinValue+0x9c>
    1b0c:	84 27       	eor	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	2a c0       	rjmp	.+84     	; 0x1b66 <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTC:TOG_BIT(PORTC,Copy_u8Pin); break;
    1b12:	a5 e3       	ldi	r26, 0x35	; 53
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e3       	ldi	r30, 0x35	; 53
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_u8TogglePinValue+0xc8>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <DIO_u8TogglePinValue+0xc4>
    1b34:	84 27       	eor	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	16 c0       	rjmp	.+44     	; 0x1b66 <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTD:TOG_BIT(PORTD,Copy_u8Pin); break;
    1b3a:	a2 e3       	ldi	r26, 0x32	; 50
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e2 e3       	ldi	r30, 0x32	; 50
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_u8TogglePinValue+0xf0>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_u8TogglePinValue+0xec>
    1b5c:	84 27       	eor	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <DIO_u8TogglePinValue+0xfe>
			default: Local_u8ErrorState = NOK; break;//Not any port
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return Local_u8ErrorState;
	}

		return Local_u8ErrorState;
    1b66:	99 81       	ldd	r25, Y+1	; 0x01
    1b68:	9c 83       	std	Y+4, r25	; 0x04
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <DIO_u8TogglePinValue+0x108>
			default: Local_u8ErrorState = NOK; break;//Not any port
			}
	}
	else
	{
		return Local_u8ErrorState;
    1b6c:	29 81       	ldd	r18, Y+1	; 0x01
    1b6e:	2c 83       	std	Y+4, r18	; 0x04
    1b70:	8c 81       	ldd	r24, Y+4	; 0x04
	}

		return Local_u8ErrorState;
}
    1b72:	26 96       	adiw	r28, 0x06	; 6
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <EXTI_u8IntEnable>:



/** Enabling**/
uint8 EXTI_u8IntEnable(uint8 Copy_u8Innterrupt)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <EXTI_u8IntEnable+0x6>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LocalErrorState = OK;
    1b90:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Innterrupt == EXTI_INT0)
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	88 23       	and	r24, r24
    1b96:	49 f4       	brne	.+18     	; 0x1baa <EXTI_u8IntEnable+0x26>
	{
		LocalErrorState = OK;
    1b98:	19 82       	std	Y+1, r1	; 0x01
		SET_BIT(GICR,GICR_INT0_EN);
    1b9a:	ab e5       	ldi	r26, 0x5B	; 91
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	eb e5       	ldi	r30, 0x5B	; 91
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 64       	ori	r24, 0x40	; 64
    1ba6:	8c 93       	st	X, r24
    1ba8:	1a c0       	rjmp	.+52     	; 0x1bde <EXTI_u8IntEnable+0x5a>
	}
	else if(Copy_u8Innterrupt == EXTI_INT1)
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	49 f4       	brne	.+18     	; 0x1bc2 <EXTI_u8IntEnable+0x3e>
	{
		LocalErrorState = OK;
    1bb0:	19 82       	std	Y+1, r1	; 0x01
		SET_BIT(GICR,GICR_INT1_EN);
    1bb2:	ab e5       	ldi	r26, 0x5B	; 91
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	eb e5       	ldi	r30, 0x5B	; 91
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	80 68       	ori	r24, 0x80	; 128
    1bbe:	8c 93       	st	X, r24
    1bc0:	0e c0       	rjmp	.+28     	; 0x1bde <EXTI_u8IntEnable+0x5a>
	}
	else if(Copy_u8Innterrupt == EXTI_INT2)
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	82 30       	cpi	r24, 0x02	; 2
    1bc6:	49 f4       	brne	.+18     	; 0x1bda <EXTI_u8IntEnable+0x56>
	{
		LocalErrorState = OK;
    1bc8:	19 82       	std	Y+1, r1	; 0x01
		SET_BIT(GICR,GICR_INT2_EN);
    1bca:	ab e5       	ldi	r26, 0x5B	; 91
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	eb e5       	ldi	r30, 0x5B	; 91
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 62       	ori	r24, 0x20	; 32
    1bd6:	8c 93       	st	X, r24
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <EXTI_u8IntEnable+0x5a>
	}
	else
	{
		LocalErrorState = NOK;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorState;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <EXTI_u8DisableEnable>:

/** Disabling **/

uint8 EXTI_u8DisableEnable(uint8 Copy_u8Innterrupt)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <EXTI_u8DisableEnable+0x6>
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LocalErrorState = OK;
    1bf6:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Innterrupt == EXTI_INT0)
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	88 23       	and	r24, r24
    1bfc:	49 f4       	brne	.+18     	; 0x1c10 <EXTI_u8DisableEnable+0x26>
	{
		LocalErrorState = OK;
    1bfe:	19 82       	std	Y+1, r1	; 0x01
		CLR_BIT(GICR,GICR_INT0_EN);
    1c00:	ab e5       	ldi	r26, 0x5B	; 91
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	eb e5       	ldi	r30, 0x5B	; 91
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	8f 7b       	andi	r24, 0xBF	; 191
    1c0c:	8c 93       	st	X, r24
    1c0e:	1a c0       	rjmp	.+52     	; 0x1c44 <EXTI_u8DisableEnable+0x5a>
	}
	else if(Copy_u8Innterrupt == EXTI_INT1)
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	49 f4       	brne	.+18     	; 0x1c28 <EXTI_u8DisableEnable+0x3e>
	{
		LocalErrorState = OK;
    1c16:	19 82       	std	Y+1, r1	; 0x01
		CLR_BIT(GICR,GICR_INT1_EN);
    1c18:	ab e5       	ldi	r26, 0x5B	; 91
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	eb e5       	ldi	r30, 0x5B	; 91
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	8f 77       	andi	r24, 0x7F	; 127
    1c24:	8c 93       	st	X, r24
    1c26:	0e c0       	rjmp	.+28     	; 0x1c44 <EXTI_u8DisableEnable+0x5a>
	}
	else if(Copy_u8Innterrupt == EXTI_INT2)
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	82 30       	cpi	r24, 0x02	; 2
    1c2c:	49 f4       	brne	.+18     	; 0x1c40 <EXTI_u8DisableEnable+0x56>
	{
		LocalErrorState = OK;
    1c2e:	19 82       	std	Y+1, r1	; 0x01
		CLR_BIT(GICR,GICR_INT2_EN);
    1c30:	ab e5       	ldi	r26, 0x5B	; 91
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	eb e5       	ldi	r30, 0x5B	; 91
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8f 7d       	andi	r24, 0xDF	; 223
    1c3c:	8c 93       	st	X, r24
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <EXTI_u8DisableEnable+0x5a>
	}
	else
	{
		LocalErrorState = NOK;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorState;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <EXTI_voidINT0Init>:


/** Intializing INT0 **/
void EXTI_voidINT0Init(void)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT0_CTRL_SENSE == EXTI_u8FALLING_EDGE
		CLR_BIT(MCUCR,MCUCR_INT0_ISC00);
		SET_BIT(MCUCR,MCUCR_INT0_ISC01);

#elif EXTI_INT0_CTRL_SENSE == EXTI_u8RISING_EDGE
		SET_BIT(MCUCR,MCUCR_INT0_ISC00);
    1c58:	a5 e5       	ldi	r26, 0x55	; 85
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e5 e5       	ldi	r30, 0x55	; 85
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	81 60       	ori	r24, 0x01	; 1
    1c64:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_INT0_ISC01);
    1c66:	a5 e5       	ldi	r26, 0x55	; 85
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e5 e5       	ldi	r30, 0x55	; 85
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	82 60       	ori	r24, 0x02	; 2
    1c72:	8c 93       	st	X, r24
#error  Wrong INT0_Ctrl_Sense configuration options
#endif

		/*Checking Enabled or Disabled*/
#if EXTI_INT0_STATE == ENABLED
		SET_BIT(GICR,GICR_INT0_EN);
    1c74:	ab e5       	ldi	r26, 0x5B	; 91
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	eb e5       	ldi	r30, 0x5B	; 91
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 64       	ori	r24, 0x40	; 64
    1c80:	8c 93       	st	X, r24
		CLR_BIT(GICR,GICR_INT0_EN);

#else
#error Wrong INT0_Initial_STATE configuration options
#endif
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <EXTI_voidINT1Init>:

/** Intializing INT1 **/

void EXTI_voidINT1Init(void)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT0_CTRL_SENSE == EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_INT1_ISC10);
	SET_BIT(MCUCR,MCUCR_INT1_ISC11);

#elif EXTI_INT0_CTRL_SENSE == EXTI_u8RISING_EDGE
	SET_BIT(MCUCR,MCUCR_INT1_ISC10);
    1c90:	a5 e5       	ldi	r26, 0x55	; 85
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e5 e5       	ldi	r30, 0x55	; 85
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	84 60       	ori	r24, 0x04	; 4
    1c9c:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_INT1_ISC11);
    1c9e:	a5 e5       	ldi	r26, 0x55	; 85
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e5 e5       	ldi	r30, 0x55	; 85
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	88 60       	ori	r24, 0x08	; 8
    1caa:	8c 93       	st	X, r24
#error  Wrong INT1_Ctrl_Sense configuration options
#endif

	/*Checking Enabled or Disabled*/
#if EXTI_INT1_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1_EN);
    1cac:	ab e5       	ldi	r26, 0x5B	; 91
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	eb e5       	ldi	r30, 0x5B	; 91
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 68       	ori	r24, 0x80	; 128
    1cb8:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT1_EN);

#else
##error Wrong INT1_Initial_STATE configuration options
#endif
}
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <EXTI_voidINT2Init>:

/**Intialising INT2 **/
void EXTI_voidINT2Init(void)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
/*Checking the control State */
#if EXTI_INT2_CTRL_SENSE == EXTI_u8FALLING_EDGE
CLR_BIT(MCUCSR,MCUCSR_INT2_ISC2);
    1cc8:	a4 e5       	ldi	r26, 0x54	; 84
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e4 e5       	ldi	r30, 0x54	; 84
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8f 7b       	andi	r24, 0xBF	; 191
    1cd4:	8c 93       	st	X, r24
#error  Wrong INT2_Ctrl_Sense configuration options
#endif

	/*Checking Enabled or Disabled*/
#if EXTI_INT2_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2_EN);
    1cd6:	ab e5       	ldi	r26, 0x5B	; 91
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	eb e5       	ldi	r30, 0x5B	; 91
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 62       	ori	r24, 0x20	; 32
    1ce2:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT2_EN);

#else
##error Wrong INT2_Initial_STATE configuration options
#endif
}
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <EXTI_u8SetSenseControl>:


/** Sensing Control **/

uint8 EXTI_u8SetSenseControl(uint8 Copy_u8Interrupt,uint8 Copy_u8Sense_Ctrl)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	29 97       	sbiw	r28, 0x09	; 9
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	6b 83       	std	Y+3, r22	; 0x03

	uint8 LocalErrorState = OK;
    1d02:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Interrupt == EXTI_INT0)
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	88 23       	and	r24, r24
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <EXTI_u8SetSenseControl+0x22>
    1d0a:	5f c0       	rjmp	.+190    	; 0x1dca <EXTI_u8SetSenseControl+0xe0>
	{
		switch(Copy_u8Sense_Ctrl)
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	39 87       	std	Y+9, r19	; 0x09
    1d14:	28 87       	std	Y+8, r18	; 0x08
    1d16:	88 85       	ldd	r24, Y+8	; 0x08
    1d18:	99 85       	ldd	r25, Y+9	; 0x09
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	29 f1       	breq	.+74     	; 0x1d6a <EXTI_u8SetSenseControl+0x80>
    1d20:	28 85       	ldd	r18, Y+8	; 0x08
    1d22:	39 85       	ldd	r19, Y+9	; 0x09
    1d24:	23 30       	cpi	r18, 0x03	; 3
    1d26:	31 05       	cpc	r19, r1
    1d28:	34 f4       	brge	.+12     	; 0x1d36 <EXTI_u8SetSenseControl+0x4c>
    1d2a:	88 85       	ldd	r24, Y+8	; 0x08
    1d2c:	99 85       	ldd	r25, Y+9	; 0x09
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	91 05       	cpc	r25, r1
    1d32:	61 f0       	breq	.+24     	; 0x1d4c <EXTI_u8SetSenseControl+0x62>
    1d34:	47 c0       	rjmp	.+142    	; 0x1dc4 <EXTI_u8SetSenseControl+0xda>
    1d36:	28 85       	ldd	r18, Y+8	; 0x08
    1d38:	39 85       	ldd	r19, Y+9	; 0x09
    1d3a:	23 30       	cpi	r18, 0x03	; 3
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	21 f1       	breq	.+72     	; 0x1d88 <EXTI_u8SetSenseControl+0x9e>
    1d40:	88 85       	ldd	r24, Y+8	; 0x08
    1d42:	99 85       	ldd	r25, Y+9	; 0x09
    1d44:	84 30       	cpi	r24, 0x04	; 4
    1d46:	91 05       	cpc	r25, r1
    1d48:	71 f1       	breq	.+92     	; 0x1da6 <EXTI_u8SetSenseControl+0xbc>
    1d4a:	3c c0       	rjmp	.+120    	; 0x1dc4 <EXTI_u8SetSenseControl+0xda>
		{
		case EXTI_u8LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_INT0_ISC00); CLR_BIT(MCUCR,MCUCR_INT0_ISC01); break;
    1d4c:	a5 e5       	ldi	r26, 0x55	; 85
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e5 e5       	ldi	r30, 0x55	; 85
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	8e 7f       	andi	r24, 0xFE	; 254
    1d58:	8c 93       	st	X, r24
    1d5a:	a5 e5       	ldi	r26, 0x55	; 85
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e5 e5       	ldi	r30, 0x55	; 85
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8d 7f       	andi	r24, 0xFD	; 253
    1d66:	8c 93       	st	X, r24
    1d68:	bb c0       	rjmp	.+374    	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8_LOGICAL_CHANGE: SET_BIT(MCUCR,MCUCR_INT0_ISC00); CLR_BIT(MCUCR,MCUCR_INT0_ISC01); break;
    1d6a:	a5 e5       	ldi	r26, 0x55	; 85
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e5 e5       	ldi	r30, 0x55	; 85
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	81 60       	ori	r24, 0x01	; 1
    1d76:	8c 93       	st	X, r24
    1d78:	a5 e5       	ldi	r26, 0x55	; 85
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e5 e5       	ldi	r30, 0x55	; 85
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	8d 7f       	andi	r24, 0xFD	; 253
    1d84:	8c 93       	st	X, r24
    1d86:	ac c0       	rjmp	.+344    	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8FALLING_EDGE: CLR_BIT(MCUCR,MCUCR_INT0_ISC00); SET_BIT(MCUCR,MCUCR_INT0_ISC01); break;
    1d88:	a5 e5       	ldi	r26, 0x55	; 85
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e5 e5       	ldi	r30, 0x55	; 85
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	8e 7f       	andi	r24, 0xFE	; 254
    1d94:	8c 93       	st	X, r24
    1d96:	a5 e5       	ldi	r26, 0x55	; 85
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e5 e5       	ldi	r30, 0x55	; 85
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	82 60       	ori	r24, 0x02	; 2
    1da2:	8c 93       	st	X, r24
    1da4:	9d c0       	rjmp	.+314    	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8RISING_EDGE: SET_BIT(MCUCR,MCUCR_INT0_ISC00); SET_BIT(MCUCR,MCUCR_INT0_ISC01);break;
    1da6:	a5 e5       	ldi	r26, 0x55	; 85
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e5 e5       	ldi	r30, 0x55	; 85
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	81 60       	ori	r24, 0x01	; 1
    1db2:	8c 93       	st	X, r24
    1db4:	a5 e5       	ldi	r26, 0x55	; 85
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e5 e5       	ldi	r30, 0x55	; 85
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	82 60       	ori	r24, 0x02	; 2
    1dc0:	8c 93       	st	X, r24
    1dc2:	8e c0       	rjmp	.+284    	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		default: LocalErrorState = NOK; break;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	8b c0       	rjmp	.+278    	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		}
	}

	else if(Copy_u8Interrupt == EXTI_INT1)
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <EXTI_u8SetSenseControl+0xe8>
    1dd0:	5f c0       	rjmp	.+190    	; 0x1e90 <EXTI_u8SetSenseControl+0x1a6>
	{
		switch(Copy_u8Sense_Ctrl)
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	3f 83       	std	Y+7, r19	; 0x07
    1dda:	2e 83       	std	Y+6, r18	; 0x06
    1ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dde:	9f 81       	ldd	r25, Y+7	; 0x07
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	91 05       	cpc	r25, r1
    1de4:	29 f1       	breq	.+74     	; 0x1e30 <EXTI_u8SetSenseControl+0x146>
    1de6:	2e 81       	ldd	r18, Y+6	; 0x06
    1de8:	3f 81       	ldd	r19, Y+7	; 0x07
    1dea:	23 30       	cpi	r18, 0x03	; 3
    1dec:	31 05       	cpc	r19, r1
    1dee:	34 f4       	brge	.+12     	; 0x1dfc <EXTI_u8SetSenseControl+0x112>
    1df0:	8e 81       	ldd	r24, Y+6	; 0x06
    1df2:	9f 81       	ldd	r25, Y+7	; 0x07
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	61 f0       	breq	.+24     	; 0x1e12 <EXTI_u8SetSenseControl+0x128>
    1dfa:	47 c0       	rjmp	.+142    	; 0x1e8a <EXTI_u8SetSenseControl+0x1a0>
    1dfc:	2e 81       	ldd	r18, Y+6	; 0x06
    1dfe:	3f 81       	ldd	r19, Y+7	; 0x07
    1e00:	23 30       	cpi	r18, 0x03	; 3
    1e02:	31 05       	cpc	r19, r1
    1e04:	21 f1       	breq	.+72     	; 0x1e4e <EXTI_u8SetSenseControl+0x164>
    1e06:	8e 81       	ldd	r24, Y+6	; 0x06
    1e08:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0a:	84 30       	cpi	r24, 0x04	; 4
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	71 f1       	breq	.+92     	; 0x1e6c <EXTI_u8SetSenseControl+0x182>
    1e10:	3c c0       	rjmp	.+120    	; 0x1e8a <EXTI_u8SetSenseControl+0x1a0>
		{
		case EXTI_u8LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_INT1_ISC10); CLR_BIT(MCUCR,MCUCR_INT1_ISC11); break;
    1e12:	a5 e5       	ldi	r26, 0x55	; 85
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e5 e5       	ldi	r30, 0x55	; 85
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8b 7f       	andi	r24, 0xFB	; 251
    1e1e:	8c 93       	st	X, r24
    1e20:	a5 e5       	ldi	r26, 0x55	; 85
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e5 e5       	ldi	r30, 0x55	; 85
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	87 7f       	andi	r24, 0xF7	; 247
    1e2c:	8c 93       	st	X, r24
    1e2e:	58 c0       	rjmp	.+176    	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8_LOGICAL_CHANGE: SET_BIT(MCUCR,MCUCR_INT1_ISC10); CLR_BIT(MCUCR,MCUCR_INT1_ISC11); break;
    1e30:	a5 e5       	ldi	r26, 0x55	; 85
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e5       	ldi	r30, 0x55	; 85
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	84 60       	ori	r24, 0x04	; 4
    1e3c:	8c 93       	st	X, r24
    1e3e:	a5 e5       	ldi	r26, 0x55	; 85
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e5 e5       	ldi	r30, 0x55	; 85
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	87 7f       	andi	r24, 0xF7	; 247
    1e4a:	8c 93       	st	X, r24
    1e4c:	49 c0       	rjmp	.+146    	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8FALLING_EDGE: CLR_BIT(MCUCR,MCUCR_INT1_ISC10); SET_BIT(MCUCR,MCUCR_INT1_ISC11); break;
    1e4e:	a5 e5       	ldi	r26, 0x55	; 85
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e5 e5       	ldi	r30, 0x55	; 85
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	8b 7f       	andi	r24, 0xFB	; 251
    1e5a:	8c 93       	st	X, r24
    1e5c:	a5 e5       	ldi	r26, 0x55	; 85
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e5 e5       	ldi	r30, 0x55	; 85
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	88 60       	ori	r24, 0x08	; 8
    1e68:	8c 93       	st	X, r24
    1e6a:	3a c0       	rjmp	.+116    	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8RISING_EDGE: SET_BIT(MCUCR,MCUCR_INT1_ISC10); SET_BIT(MCUCR,MCUCR_INT1_ISC11);break;
    1e6c:	a5 e5       	ldi	r26, 0x55	; 85
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e5 e5       	ldi	r30, 0x55	; 85
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	84 60       	ori	r24, 0x04	; 4
    1e78:	8c 93       	st	X, r24
    1e7a:	a5 e5       	ldi	r26, 0x55	; 85
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e5 e5       	ldi	r30, 0x55	; 85
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	88 60       	ori	r24, 0x08	; 8
    1e86:	8c 93       	st	X, r24
    1e88:	2b c0       	rjmp	.+86     	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		default: LocalErrorState = NOK; break;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	28 c0       	rjmp	.+80     	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		}
	}

	else if(Copy_u8Interrupt == EXTI_INT2)
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	82 30       	cpi	r24, 0x02	; 2
    1e94:	19 f5       	brne	.+70     	; 0x1edc <EXTI_u8SetSenseControl+0x1f2>
	{
		switch(Copy_u8Sense_Ctrl)
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	3d 83       	std	Y+5, r19	; 0x05
    1e9e:	2c 83       	std	Y+4, r18	; 0x04
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea4:	83 30       	cpi	r24, 0x03	; 3
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	31 f0       	breq	.+12     	; 0x1eb6 <EXTI_u8SetSenseControl+0x1cc>
    1eaa:	2c 81       	ldd	r18, Y+4	; 0x04
    1eac:	3d 81       	ldd	r19, Y+5	; 0x05
    1eae:	24 30       	cpi	r18, 0x04	; 4
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	49 f0       	breq	.+18     	; 0x1ec6 <EXTI_u8SetSenseControl+0x1dc>
    1eb4:	10 c0       	rjmp	.+32     	; 0x1ed6 <EXTI_u8SetSenseControl+0x1ec>
		{
		case EXTI_u8FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_INT2_ISC2);	break;
    1eb6:	a4 e5       	ldi	r26, 0x54	; 84
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e4 e5       	ldi	r30, 0x54	; 84
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8f 7b       	andi	r24, 0xBF	; 191
    1ec2:	8c 93       	st	X, r24
    1ec4:	0d c0       	rjmp	.+26     	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8RISING_EDGE: SET_BIT(MCUCSR,MCUCSR_INT2_ISC2);    break;
    1ec6:	a4 e5       	ldi	r26, 0x54	; 84
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e4 e5       	ldi	r30, 0x54	; 84
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	80 64       	ori	r24, 0x40	; 64
    1ed2:	8c 93       	st	X, r24
    1ed4:	05 c0       	rjmp	.+10     	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		default: LocalErrorState = NOK; break;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <EXTI_u8SetSenseControl+0x1f6>
		}
	}
	else
	{
		LocalErrorState = NOK;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorState;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01


}
    1ee2:	29 96       	adiw	r28, 0x09	; 9
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <EXTI_u8SetCallBack>:




uint8 EXTI_u8SetCallBack(uint8 Copy_u8Interrupt, void (*Copy_pfFuncPtr)(void))
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <EXTI_u8SetCallBack+0x6>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <EXTI_u8SetCallBack+0x8>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	8a 83       	std	Y+2, r24	; 0x02
    1f02:	7c 83       	std	Y+4, r23	; 0x04
    1f04:	6b 83       	std	Y+3, r22	; 0x03

	uint8 LocalErrorState = OK;
    1f06:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfFuncPtr != NULL)
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f0       	breq	.+26     	; 0x1f2a <EXTI_u8SetCallBack+0x36>
	{
		EXTI_pfINTFuncPrt[Copy_u8Interrupt] = Copy_pfFuncPtr;
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	ec 58       	subi	r30, 0x8C	; 140
    1f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <EXTI_u8SetCallBack+0x3a>
	}
	else
	{
		LocalErrorState = NULL_PTR_ERR;
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	89 83       	std	Y+1, r24	; 0x01
	}


	return LocalErrorState;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <__vector_1>:
/** ISR of INT0**/


void __vector_1 (void) __attribute((signal)); /** For linker to cancel linker optimization**/
void __vector_1 (void)
{
    1f3e:	1f 92       	push	r1
    1f40:	0f 92       	push	r0
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	0f 92       	push	r0
    1f46:	11 24       	eor	r1, r1
    1f48:	2f 93       	push	r18
    1f4a:	3f 93       	push	r19
    1f4c:	4f 93       	push	r20
    1f4e:	5f 93       	push	r21
    1f50:	6f 93       	push	r22
    1f52:	7f 93       	push	r23
    1f54:	8f 93       	push	r24
    1f56:	9f 93       	push	r25
    1f58:	af 93       	push	r26
    1f5a:	bf 93       	push	r27
    1f5c:	ef 93       	push	r30
    1f5e:	ff 93       	push	r31
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfINTFuncPrt[EXTI_INT0] != NULL)
    1f68:	80 91 74 01 	lds	r24, 0x0174
    1f6c:	90 91 75 01 	lds	r25, 0x0175
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	29 f0       	breq	.+10     	; 0x1f7e <__vector_1+0x40>
	{
		EXTI_pfINTFuncPrt[EXTI_INT0]();
    1f74:	e0 91 74 01 	lds	r30, 0x0174
    1f78:	f0 91 75 01 	lds	r31, 0x0175
    1f7c:	09 95       	icall
	}
}
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	ff 91       	pop	r31
    1f84:	ef 91       	pop	r30
    1f86:	bf 91       	pop	r27
    1f88:	af 91       	pop	r26
    1f8a:	9f 91       	pop	r25
    1f8c:	8f 91       	pop	r24
    1f8e:	7f 91       	pop	r23
    1f90:	6f 91       	pop	r22
    1f92:	5f 91       	pop	r21
    1f94:	4f 91       	pop	r20
    1f96:	3f 91       	pop	r19
    1f98:	2f 91       	pop	r18
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	0f 90       	pop	r0
    1fa0:	1f 90       	pop	r1
    1fa2:	18 95       	reti

00001fa4 <__vector_2>:


/** ISR of INT1**/
void __vector_2 (void) __attribute((signal));
void __vector_2 (void)
{
    1fa4:	1f 92       	push	r1
    1fa6:	0f 92       	push	r0
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	0f 92       	push	r0
    1fac:	11 24       	eor	r1, r1
    1fae:	2f 93       	push	r18
    1fb0:	3f 93       	push	r19
    1fb2:	4f 93       	push	r20
    1fb4:	5f 93       	push	r21
    1fb6:	6f 93       	push	r22
    1fb8:	7f 93       	push	r23
    1fba:	8f 93       	push	r24
    1fbc:	9f 93       	push	r25
    1fbe:	af 93       	push	r26
    1fc0:	bf 93       	push	r27
    1fc2:	ef 93       	push	r30
    1fc4:	ff 93       	push	r31
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfINTFuncPrt[EXTI_INT1] != NULL)
    1fce:	80 91 76 01 	lds	r24, 0x0176
    1fd2:	90 91 77 01 	lds	r25, 0x0177
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	29 f0       	breq	.+10     	; 0x1fe4 <__vector_2+0x40>
	{
		EXTI_pfINTFuncPrt[EXTI_INT1]();
    1fda:	e0 91 76 01 	lds	r30, 0x0176
    1fde:	f0 91 77 01 	lds	r31, 0x0177
    1fe2:	09 95       	icall
	}
}
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	ff 91       	pop	r31
    1fea:	ef 91       	pop	r30
    1fec:	bf 91       	pop	r27
    1fee:	af 91       	pop	r26
    1ff0:	9f 91       	pop	r25
    1ff2:	8f 91       	pop	r24
    1ff4:	7f 91       	pop	r23
    1ff6:	6f 91       	pop	r22
    1ff8:	5f 91       	pop	r21
    1ffa:	4f 91       	pop	r20
    1ffc:	3f 91       	pop	r19
    1ffe:	2f 91       	pop	r18
    2000:	0f 90       	pop	r0
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	0f 90       	pop	r0
    2006:	1f 90       	pop	r1
    2008:	18 95       	reti

0000200a <__vector_3>:

/** ISR of INT2**/

void __vector_3 (void) __attribute((signal));
void __vector_3 (void)
{
    200a:	1f 92       	push	r1
    200c:	0f 92       	push	r0
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	0f 92       	push	r0
    2012:	11 24       	eor	r1, r1
    2014:	2f 93       	push	r18
    2016:	3f 93       	push	r19
    2018:	4f 93       	push	r20
    201a:	5f 93       	push	r21
    201c:	6f 93       	push	r22
    201e:	7f 93       	push	r23
    2020:	8f 93       	push	r24
    2022:	9f 93       	push	r25
    2024:	af 93       	push	r26
    2026:	bf 93       	push	r27
    2028:	ef 93       	push	r30
    202a:	ff 93       	push	r31
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfINTFuncPrt[EXTI_INT2] != NULL)
    2034:	80 91 78 01 	lds	r24, 0x0178
    2038:	90 91 79 01 	lds	r25, 0x0179
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	29 f0       	breq	.+10     	; 0x204a <__vector_3+0x40>
	{
		EXTI_pfINTFuncPrt[EXTI_INT2]();
    2040:	e0 91 78 01 	lds	r30, 0x0178
    2044:	f0 91 79 01 	lds	r31, 0x0179
    2048:	09 95       	icall
	}
}
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	ff 91       	pop	r31
    2050:	ef 91       	pop	r30
    2052:	bf 91       	pop	r27
    2054:	af 91       	pop	r26
    2056:	9f 91       	pop	r25
    2058:	8f 91       	pop	r24
    205a:	7f 91       	pop	r23
    205c:	6f 91       	pop	r22
    205e:	5f 91       	pop	r21
    2060:	4f 91       	pop	r20
    2062:	3f 91       	pop	r19
    2064:	2f 91       	pop	r18
    2066:	0f 90       	pop	r0
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	0f 90       	pop	r0
    206c:	1f 90       	pop	r1
    206e:	18 95       	reti

00002070 <GIE_voidEnableGlobal>:



/** using inline assembly is useful to be more faster in some critical cases**/
void GIE_voidEnableGlobal(void)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(GIE_SREG,SREG_I);
	 __asm __volatile("SEI");  /** To enable the Global Interrupt**/
    2078:	78 94       	sei
}
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(GIE_SREG,SREG_I);
	__asm __volatile("CLI");/**To Disable the global interrupt**/
    2088:	f8 94       	cli
}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <TIMER0_voidInit>:




void TIMER0_voidInit(void)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE0);
#elif MODE_USED == PWM_PhaseCorrect
	SET_BIT(TCCR0,TCCR0_WGM00);
	CLR_BIT(TCCR0,TCCR0_WGM01);
#elif MODE_USED == Fast_PWM
	SET_BIT(TCCR0,TCCR0_WGM00);
    2098:	a3 e5       	ldi	r26, 0x53	; 83
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e3 e5       	ldi	r30, 0x53	; 83
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	80 64       	ori	r24, 0x40	; 64
    20a4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    20a6:	a3 e5       	ldi	r26, 0x53	; 83
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e3 e5       	ldi	r30, 0x53	; 83
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	88 60       	ori	r24, 0x08	; 8
    20b2:	8c 93       	st	X, r24
	/** Select the Non_inverted Mode SET on TOP CLEAR on Compare**/
	CLR_BIT(TCCR0,TCCR0_COM00);
    20b4:	a3 e5       	ldi	r26, 0x53	; 83
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e3 e5       	ldi	r30, 0x53	; 83
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	8f 7e       	andi	r24, 0xEF	; 239
    20c0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    20c2:	a3 e5       	ldi	r26, 0x53	; 83
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e3 e5       	ldi	r30, 0x53	; 83
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	80 62       	ori	r24, 0x20	; 32
    20ce:	8c 93       	st	X, r24
#elif PRESCALER_USED == NO_PRESCALER
	SET_BIT(TCCR0,TCCR0_CS00);
	CLR_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS02);
#elif PRESCALER_USED == PRESCALER_64
	SET_BIT(TCCR0,TCCR0_CS00);
    20d0:	a3 e5       	ldi	r26, 0x53	; 83
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e3 e5       	ldi	r30, 0x53	; 83
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	81 60       	ori	r24, 0x01	; 1
    20dc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    20de:	a3 e5       	ldi	r26, 0x53	; 83
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e3 e5       	ldi	r30, 0x53	; 83
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	82 60       	ori	r24, 0x02	; 2
    20ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    20ec:	a3 e5       	ldi	r26, 0x53	; 83
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e3 e5       	ldi	r30, 0x53	; 83
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8b 7f       	andi	r24, 0xFB	; 251
    20f8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS02);
#else
#error "Wrong Prescaler Input"
#endif

}
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
#if T1_ModeUsed == T1_NormalMode
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2108:	af e4       	ldi	r26, 0x4F	; 79
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	ef e4       	ldi	r30, 0x4F	; 79
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	8e 7f       	andi	r24, 0xFE	; 254
    2114:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2116:	af e4       	ldi	r26, 0x4F	; 79
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	ef e4       	ldi	r30, 0x4F	; 79
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8d 7f       	andi	r24, 0xFD	; 253
    2122:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2124:	ae e4       	ldi	r26, 0x4E	; 78
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	ee e4       	ldi	r30, 0x4E	; 78
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	87 7f       	andi	r24, 0xF7	; 247
    2130:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2132:	ae e4       	ldi	r26, 0x4E	; 78
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	ee e4       	ldi	r30, 0x4E	; 78
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8f 7e       	andi	r24, 0xEF	; 239
    213e:	8c 93       	st	X, r24
#else
#error "Wrong Mode Input"
#endif

	/** SET Clear on compare up Counting, SET on compare down counting "Non-Inverted Mode" **/
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2140:	af e4       	ldi	r26, 0x4F	; 79
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	ef e4       	ldi	r30, 0x4F	; 79
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8f 7b       	andi	r24, 0xBF	; 191
    214c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    214e:	af e4       	ldi	r26, 0x4F	; 79
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	ef e4       	ldi	r30, 0x4F	; 79
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	80 68       	ori	r24, 0x80	; 128
    215a:	8c 93       	st	X, r24
//	SET_BIT(TCCR1B,TCCR1B_CS11);
//	CLR_BIT(TCCR1B,TCCR1B_CS12);


	/** SET PRESCALER TO 64MHZ **/
	SET_BIT(TCCR1B,TCCR1B_CS10);
    215c:	ae e4       	ldi	r26, 0x4E	; 78
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	ee e4       	ldi	r30, 0x4E	; 78
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	81 60       	ori	r24, 0x01	; 1
    2168:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    216a:	ae e4       	ldi	r26, 0x4E	; 78
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	ee e4       	ldi	r30, 0x4E	; 78
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	82 60       	ori	r24, 0x02	; 2
    2176:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    2178:	ae e4       	ldi	r26, 0x4E	; 78
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	ee e4       	ldi	r30, 0x4E	; 78
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	8b 7f       	andi	r24, 0xFB	; 251
    2184:	8c 93       	st	X, r24
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <TIMER1_voidSetCompareValue>:
void TIMER1_voidSetCompareValue(uint16 Copy_u16Val)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <TIMER1_voidSetCompareValue+0x6>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01

	OCR1AL = Copy_u16Val;
    219a:	ea e4       	ldi	r30, 0x4A	; 74
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24

}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <Timer1_voidSetTimerVal>:

void Timer1_voidSetTimerVal(uint16 Copy_u16Val)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <Timer1_voidSetTimerVal+0x6>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L = Copy_u16Val;
    21be:	ec e4       	ldi	r30, 0x4C	; 76
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24

}
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <Timer1_voidGetTimerVal>:
uint16 Timer1_voidGetTimerVal(void)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
	return TCNT1L;
    21dc:	ec e4       	ldi	r30, 0x4C	; 76
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01

}
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <TIMER0_voidSetCompareValue>:

void TIMER0_voidSetCompareValue(uint8 Copy_u8Val)
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	0f 92       	push	r0
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_u8Val;
    21f6:	ec e5       	ldi	r30, 0x5C	; 92
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	80 83       	st	Z, r24
}
    21fe:	0f 90       	pop	r0
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <TIMER0_voidSetCallBack>:


uint8 TIMER0_voidSetCallBack(TIMERS_INT_SRC Copy_u8TmrIntSRC, void (*Copy_PF)(void))
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	00 d0       	rcall	.+0      	; 0x220c <TIMER0_voidSetCallBack+0x6>
    220c:	00 d0       	rcall	.+0      	; 0x220e <TIMER0_voidSetCallBack+0x8>
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	8a 83       	std	Y+2, r24	; 0x02
    2214:	7c 83       	std	Y+4, r23	; 0x04
    2216:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Error = OK;
    2218:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PF != NULL)
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	69 f0       	breq	.+26     	; 0x223c <TIMER0_voidSetCallBack+0x36>
	{
		FUNC_pvCallBackFuncArr[Copy_u8TmrIntSRC]= Copy_PF;
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	fc 01       	movw	r30, r24
    222e:	e6 58       	subi	r30, 0x86	; 134
    2230:	fe 4f       	sbci	r31, 0xFE	; 254
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <TIMER0_voidSetCallBack+0x3a>

	}
	else
	{Local_u8Error = NULL_PTR_ERR;}
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8Error;
    2240:	89 81       	ldd	r24, Y+1	; 0x01
}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    2250:	1f 92       	push	r1
    2252:	0f 92       	push	r0
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	0f 92       	push	r0
    2258:	11 24       	eor	r1, r1
    225a:	2f 93       	push	r18
    225c:	3f 93       	push	r19
    225e:	4f 93       	push	r20
    2260:	5f 93       	push	r21
    2262:	6f 93       	push	r22
    2264:	7f 93       	push	r23
    2266:	8f 93       	push	r24
    2268:	9f 93       	push	r25
    226a:	af 93       	push	r26
    226c:	bf 93       	push	r27
    226e:	ef 93       	push	r30
    2270:	ff 93       	push	r31
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
	if(FUNC_pvCallBackFuncArr[TIMER0_CTC] != NULL)
    227a:	80 91 7c 01 	lds	r24, 0x017C
    227e:	90 91 7d 01 	lds	r25, 0x017D
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	29 f0       	breq	.+10     	; 0x2290 <__vector_10+0x40>
	{
		FUNC_pvCallBackFuncArr[TIMER0_CTC]();
    2286:	e0 91 7c 01 	lds	r30, 0x017C
    228a:	f0 91 7d 01 	lds	r31, 0x017D
    228e:	09 95       	icall
	}
	else
	{
		/*	Do Nothing */
	}
}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	ff 91       	pop	r31
    2296:	ef 91       	pop	r30
    2298:	bf 91       	pop	r27
    229a:	af 91       	pop	r26
    229c:	9f 91       	pop	r25
    229e:	8f 91       	pop	r24
    22a0:	7f 91       	pop	r23
    22a2:	6f 91       	pop	r22
    22a4:	5f 91       	pop	r21
    22a6:	4f 91       	pop	r20
    22a8:	3f 91       	pop	r19
    22aa:	2f 91       	pop	r18
    22ac:	0f 90       	pop	r0
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	0f 90       	pop	r0
    22b2:	1f 90       	pop	r1
    22b4:	18 95       	reti

000022b6 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11 (void)
{
    22b6:	1f 92       	push	r1
    22b8:	0f 92       	push	r0
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	0f 92       	push	r0
    22be:	11 24       	eor	r1, r1
    22c0:	2f 93       	push	r18
    22c2:	3f 93       	push	r19
    22c4:	4f 93       	push	r20
    22c6:	5f 93       	push	r21
    22c8:	6f 93       	push	r22
    22ca:	7f 93       	push	r23
    22cc:	8f 93       	push	r24
    22ce:	9f 93       	push	r25
    22d0:	af 93       	push	r26
    22d2:	bf 93       	push	r27
    22d4:	ef 93       	push	r30
    22d6:	ff 93       	push	r31
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62

	if(FUNC_pvCallBackFuncArr[TIMER0_OVF] != NULL)
    22e0:	80 91 7a 01 	lds	r24, 0x017A
    22e4:	90 91 7b 01 	lds	r25, 0x017B
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	29 f0       	breq	.+10     	; 0x22f6 <__vector_11+0x40>
	{
		FUNC_pvCallBackFuncArr[TIMER0_OVF]();
    22ec:	e0 91 7a 01 	lds	r30, 0x017A
    22f0:	f0 91 7b 01 	lds	r31, 0x017B
    22f4:	09 95       	icall

	}
	else
	{/*	Do Nothing */}

}
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	ff 91       	pop	r31
    22fc:	ef 91       	pop	r30
    22fe:	bf 91       	pop	r27
    2300:	af 91       	pop	r26
    2302:	9f 91       	pop	r25
    2304:	8f 91       	pop	r24
    2306:	7f 91       	pop	r23
    2308:	6f 91       	pop	r22
    230a:	5f 91       	pop	r21
    230c:	4f 91       	pop	r20
    230e:	3f 91       	pop	r19
    2310:	2f 91       	pop	r18
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	0f 90       	pop	r0
    2318:	1f 90       	pop	r1
    231a:	18 95       	reti

0000231c <main>:
static uint16 Reading_1 = 0, Reading_2 = 0;
void ICU_SW(void);


void main(void)
{
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <main+0xe>
    232a:	00 d0       	rcall	.+0      	; 0x232c <main+0x10>
    232c:	00 d0       	rcall	.+0      	; 0x232e <main+0x12>
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN3, DIO_u8PIN_OUTPUT);
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	63 e0       	ldi	r22, 0x03	; 3
    2336:	41 e0       	ldi	r20, 0x01	; 1
    2338:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <DIO_u8SetPinDirection>
DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PIN_INPUT);
    233c:	83 e0       	ldi	r24, 0x03	; 3
    233e:	62 e0       	ldi	r22, 0x02	; 2
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <DIO_u8SetPinDirection>
CLCD_voidInit();
    2346:	0e 94 0c 08 	call	0x1018	; 0x1018 <CLCD_voidInit>


	uint16 ON_Ticks = 0u;
    234a:	1e 82       	std	Y+6, r1	; 0x06
    234c:	1d 82       	std	Y+5, r1	; 0x05
	uint16 Period_Ticks;
	uint16 D_C = 0u;
    234e:	1a 82       	std	Y+2, r1	; 0x02
    2350:	19 82       	std	Y+1, r1	; 0x01

TIMER0_voidInit();
    2352:	0e 94 48 10 	call	0x2090	; 0x2090 <TIMER0_voidInit>
/** Generating PWM with DC 25%, set CompVal to 63 **/
TIMER0_voidSetCompareValue(63);
    2356:	8f e3       	ldi	r24, 0x3F	; 63
    2358:	0e 94 f5 10 	call	0x21ea	; 0x21ea <TIMER0_voidSetCompareValue>

TIMER1_voidInit();
    235c:	0e 94 80 10 	call	0x2100	; 0x2100 <TIMER1_voidInit>

EXTI_voidINT0Init();
    2360:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <EXTI_voidINT0Init>
EXTI_u8SetCallBack(EXTI_INT0, &ICU_SW);
    2364:	22 e3       	ldi	r18, 0x32	; 50
    2366:	32 e1       	ldi	r19, 0x12	; 18
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	b9 01       	movw	r22, r18
    236c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <EXTI_u8SetCallBack>
EXTI_u8IntEnable(EXTI_INT0);
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <EXTI_u8IntEnable>

GIE_voidEnableGlobal();
    2376:	0e 94 38 10 	call	0x2070	; 0x2070 <GIE_voidEnableGlobal>

while(1)
{
	/** Poll to ensure there are changes happened to Reading 1 and 2 **/

	while((Reading_1 == 0) || (Reading_2 == 0));
    237a:	80 91 8a 01 	lds	r24, 0x018A
    237e:	90 91 8b 01 	lds	r25, 0x018B
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	d1 f3       	breq	.-12     	; 0x237a <main+0x5e>
    2386:	80 91 8c 01 	lds	r24, 0x018C
    238a:	90 91 8d 01 	lds	r25, 0x018D
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	a1 f3       	breq	.-24     	; 0x237a <main+0x5e>

	Period_Ticks = Reading_1;
    2392:	80 91 8a 01 	lds	r24, 0x018A
    2396:	90 91 8b 01 	lds	r25, 0x018B
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
	ON_Ticks = Reading_2 - Reading_1;
    239e:	20 91 8c 01 	lds	r18, 0x018C
    23a2:	30 91 8d 01 	lds	r19, 0x018D
    23a6:	80 91 8a 01 	lds	r24, 0x018A
    23aa:	90 91 8b 01 	lds	r25, 0x018B
    23ae:	a9 01       	movw	r20, r18
    23b0:	48 1b       	sub	r20, r24
    23b2:	59 0b       	sbc	r21, r25
    23b4:	ca 01       	movw	r24, r20
    23b6:	9e 83       	std	Y+6, r25	; 0x06
    23b8:	8d 83       	std	Y+5, r24	; 0x05

	D_C = ((float)ON_Ticks / (float)Period_Ticks) * 100;
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	9e 81       	ldd	r25, Y+6	; 0x06
    23be:	cc 01       	movw	r24, r24
    23c0:	a0 e0       	ldi	r26, 0x00	; 0
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23cc:	7b 01       	movw	r14, r22
    23ce:	8c 01       	movw	r16, r24
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	cc 01       	movw	r24, r24
    23d6:	a0 e0       	ldi	r26, 0x00	; 0
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23e2:	9b 01       	movw	r18, r22
    23e4:	ac 01       	movw	r20, r24
    23e6:	c8 01       	movw	r24, r16
    23e8:	b7 01       	movw	r22, r14
    23ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	48 ec       	ldi	r20, 0xC8	; 200
    23fc:	52 e4       	ldi	r21, 0x42	; 66
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidGoToXY(0, 0);
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	0e 94 85 09 	call	0x130a	; 0x130a <CLCD_voidGoToXY>
	CLCD_u8SendString("ON:");
    241e:	80 e6       	ldi	r24, 0x60	; 96
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_u8SendString>
	CLCD_voidSendNumber(ON_Ticks);
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	cc 01       	movw	r24, r24
    242c:	a0 e0       	ldi	r26, 0x00	; 0
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 f7 08 	call	0x11ee	; 0x11ee <CLCD_voidSendNumber>

	CLCD_voidGoToXY(1, 0);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	0e 94 85 09 	call	0x130a	; 0x130a <CLCD_voidGoToXY>
	CLCD_u8SendString("D_C:");
    2440:	84 e6       	ldi	r24, 0x64	; 100
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_u8SendString>
	CLCD_voidSendNumber(D_C);
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	cc 01       	movw	r24, r24
    244e:	a0 e0       	ldi	r26, 0x00	; 0
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 f7 08 	call	0x11ee	; 0x11ee <CLCD_voidSendNumber>
	CLCD_u8SendString("%");
    245a:	89 e6       	ldi	r24, 0x69	; 105
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_u8SendString>
    2462:	8b cf       	rjmp	.-234    	; 0x237a <main+0x5e>

00002464 <ICU_SW>:

}


void ICU_SW(void)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62

static uint16 counter = 0u; /** we make it static to change stoage duration to be permanent **/
counter++;
    246c:	80 91 8e 01 	lds	r24, 0x018E
    2470:	90 91 8f 01 	lds	r25, 0x018F
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	90 93 8f 01 	sts	0x018F, r25
    247a:	80 93 8e 01 	sts	0x018E, r24
if(counter == 1u)
    247e:	80 91 8e 01 	lds	r24, 0x018E
    2482:	90 91 8f 01 	lds	r25, 0x018F
    2486:	81 30       	cpi	r24, 0x01	; 1
    2488:	91 05       	cpc	r25, r1
    248a:	29 f4       	brne	.+10     	; 0x2496 <ICU_SW+0x32>
{
	Timer1_voidSetTimerVal(0u);
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Timer1_voidSetTimerVal>
    2494:	22 c0       	rjmp	.+68     	; 0x24da <ICU_SW+0x76>

}
else if(counter == 2u)
    2496:	80 91 8e 01 	lds	r24, 0x018E
    249a:	90 91 8f 01 	lds	r25, 0x018F
    249e:	82 30       	cpi	r24, 0x02	; 2
    24a0:	91 05       	cpc	r25, r1
    24a2:	59 f4       	brne	.+22     	; 0x24ba <ICU_SW+0x56>
{
	Reading_1 = Timer1_voidGetTimerVal(); /* Reading of period Time */
    24a4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <Timer1_voidGetTimerVal>
    24a8:	90 93 8b 01 	sts	0x018B, r25
    24ac:	80 93 8a 01 	sts	0x018A, r24
	/** Changing the sense ctrl from rising to falling edge in the interrupt **/

	EXTI_u8SetSenseControl(EXTI_INT0, EXTI_u8FALLING_EDGE);
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	63 e0       	ldi	r22, 0x03	; 3
    24b4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <EXTI_u8SetSenseControl>
    24b8:	10 c0       	rjmp	.+32     	; 0x24da <ICU_SW+0x76>


}
else if(counter == 3u)
    24ba:	80 91 8e 01 	lds	r24, 0x018E
    24be:	90 91 8f 01 	lds	r25, 0x018F
    24c2:	83 30       	cpi	r24, 0x03	; 3
    24c4:	91 05       	cpc	r25, r1
    24c6:	49 f4       	brne	.+18     	; 0x24da <ICU_SW+0x76>
{
	Reading_2 = Timer1_voidGetTimerVal();
    24c8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <Timer1_voidGetTimerVal>
    24cc:	90 93 8d 01 	sts	0x018D, r25
    24d0:	80 93 8c 01 	sts	0x018C, r24
	EXTI_u8DisableEnable(EXTI_INT0);
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <EXTI_u8DisableEnable>

}

}
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <__divmodsi4>:
    24e0:	97 fb       	bst	r25, 7
    24e2:	09 2e       	mov	r0, r25
    24e4:	05 26       	eor	r0, r21
    24e6:	0e d0       	rcall	.+28     	; 0x2504 <__divmodsi4_neg1>
    24e8:	57 fd       	sbrc	r21, 7
    24ea:	04 d0       	rcall	.+8      	; 0x24f4 <__divmodsi4_neg2>
    24ec:	14 d0       	rcall	.+40     	; 0x2516 <__udivmodsi4>
    24ee:	0a d0       	rcall	.+20     	; 0x2504 <__divmodsi4_neg1>
    24f0:	00 1c       	adc	r0, r0
    24f2:	38 f4       	brcc	.+14     	; 0x2502 <__divmodsi4_exit>

000024f4 <__divmodsi4_neg2>:
    24f4:	50 95       	com	r21
    24f6:	40 95       	com	r20
    24f8:	30 95       	com	r19
    24fa:	21 95       	neg	r18
    24fc:	3f 4f       	sbci	r19, 0xFF	; 255
    24fe:	4f 4f       	sbci	r20, 0xFF	; 255
    2500:	5f 4f       	sbci	r21, 0xFF	; 255

00002502 <__divmodsi4_exit>:
    2502:	08 95       	ret

00002504 <__divmodsi4_neg1>:
    2504:	f6 f7       	brtc	.-4      	; 0x2502 <__divmodsi4_exit>
    2506:	90 95       	com	r25
    2508:	80 95       	com	r24
    250a:	70 95       	com	r23
    250c:	61 95       	neg	r22
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	8f 4f       	sbci	r24, 0xFF	; 255
    2512:	9f 4f       	sbci	r25, 0xFF	; 255
    2514:	08 95       	ret

00002516 <__udivmodsi4>:
    2516:	a1 e2       	ldi	r26, 0x21	; 33
    2518:	1a 2e       	mov	r1, r26
    251a:	aa 1b       	sub	r26, r26
    251c:	bb 1b       	sub	r27, r27
    251e:	fd 01       	movw	r30, r26
    2520:	0d c0       	rjmp	.+26     	; 0x253c <__udivmodsi4_ep>

00002522 <__udivmodsi4_loop>:
    2522:	aa 1f       	adc	r26, r26
    2524:	bb 1f       	adc	r27, r27
    2526:	ee 1f       	adc	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	a2 17       	cp	r26, r18
    252c:	b3 07       	cpc	r27, r19
    252e:	e4 07       	cpc	r30, r20
    2530:	f5 07       	cpc	r31, r21
    2532:	20 f0       	brcs	.+8      	; 0x253c <__udivmodsi4_ep>
    2534:	a2 1b       	sub	r26, r18
    2536:	b3 0b       	sbc	r27, r19
    2538:	e4 0b       	sbc	r30, r20
    253a:	f5 0b       	sbc	r31, r21

0000253c <__udivmodsi4_ep>:
    253c:	66 1f       	adc	r22, r22
    253e:	77 1f       	adc	r23, r23
    2540:	88 1f       	adc	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	1a 94       	dec	r1
    2546:	69 f7       	brne	.-38     	; 0x2522 <__udivmodsi4_loop>
    2548:	60 95       	com	r22
    254a:	70 95       	com	r23
    254c:	80 95       	com	r24
    254e:	90 95       	com	r25
    2550:	9b 01       	movw	r18, r22
    2552:	ac 01       	movw	r20, r24
    2554:	bd 01       	movw	r22, r26
    2556:	cf 01       	movw	r24, r30
    2558:	08 95       	ret

0000255a <__prologue_saves__>:
    255a:	2f 92       	push	r2
    255c:	3f 92       	push	r3
    255e:	4f 92       	push	r4
    2560:	5f 92       	push	r5
    2562:	6f 92       	push	r6
    2564:	7f 92       	push	r7
    2566:	8f 92       	push	r8
    2568:	9f 92       	push	r9
    256a:	af 92       	push	r10
    256c:	bf 92       	push	r11
    256e:	cf 92       	push	r12
    2570:	df 92       	push	r13
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	ca 1b       	sub	r28, r26
    2584:	db 0b       	sbc	r29, r27
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	09 94       	ijmp

00002592 <__epilogue_restores__>:
    2592:	2a 88       	ldd	r2, Y+18	; 0x12
    2594:	39 88       	ldd	r3, Y+17	; 0x11
    2596:	48 88       	ldd	r4, Y+16	; 0x10
    2598:	5f 84       	ldd	r5, Y+15	; 0x0f
    259a:	6e 84       	ldd	r6, Y+14	; 0x0e
    259c:	7d 84       	ldd	r7, Y+13	; 0x0d
    259e:	8c 84       	ldd	r8, Y+12	; 0x0c
    25a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    25a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    25a4:	b9 84       	ldd	r11, Y+9	; 0x09
    25a6:	c8 84       	ldd	r12, Y+8	; 0x08
    25a8:	df 80       	ldd	r13, Y+7	; 0x07
    25aa:	ee 80       	ldd	r14, Y+6	; 0x06
    25ac:	fd 80       	ldd	r15, Y+5	; 0x05
    25ae:	0c 81       	ldd	r16, Y+4	; 0x04
    25b0:	1b 81       	ldd	r17, Y+3	; 0x03
    25b2:	aa 81       	ldd	r26, Y+2	; 0x02
    25b4:	b9 81       	ldd	r27, Y+1	; 0x01
    25b6:	ce 0f       	add	r28, r30
    25b8:	d1 1d       	adc	r29, r1
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	ed 01       	movw	r28, r26
    25c6:	08 95       	ret

000025c8 <_exit>:
    25c8:	f8 94       	cli

000025ca <__stop_program>:
    25ca:	ff cf       	rjmp	.-2      	; 0x25ca <__stop_program>
