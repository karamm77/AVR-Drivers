
Two7SEG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ece  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  00000f42  2**0
                  ALLOC
  2 .stab         00001554  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b29  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__vector_1>
   8:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__vector_2>
   c:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 04 07 	call	0xe08	; 0xe08 <main>
  74:	0c 94 65 07 	jmp	0xeca	; 0xeca <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
#include"DIO_prv.h"
#include"DIO_reg.h"


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)//which port we want to srt, and which pin
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
  96:	19 82       	std	Y+1, r1	; 0x01

		if (Copy_u8Pin <= DIO_u8PIN7)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
  9e:	f4 c0       	rjmp	.+488    	; 0x288 <DIO_u8SetPinValue+0x20c>
		{
			if(Copy_u8Value == DIO_u8PIN_LOW)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinValue+0x2c>
  a6:	77 c0       	rjmp	.+238    	; 0x196 <DIO_u8SetPinValue+0x11a>
			{
				switch(Copy_u8Port)//which port you want it as input
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	59 f1       	breq	.+86     	; 0x112 <DIO_u8SetPinValue+0x96>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinValue+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	69 f0       	breq	.+26     	; 0xe8 <DIO_u8SetPinValue+0x6c>
  ce:	60 c0       	rjmp	.+192    	; 0x190 <DIO_u8SetPinValue+0x114>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	89 f1       	breq	.+98     	; 0x13c <DIO_u8SetPinValue+0xc0>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_u8SetPinValue+0x6a>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <DIO_u8SetPinValue+0xea>
  e6:	54 c0       	rjmp	.+168    	; 0x190 <DIO_u8SetPinValue+0x114>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
  e8:	ab e3       	ldi	r26, 0x3B	; 59
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	eb e3       	ldi	r30, 0x3B	; 59
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_u8SetPinValue+0x8a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_u8SetPinValue+0x86>
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	8c 93       	st	X, r24
 110:	bd c0       	rjmp	.+378    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 112:	a8 e3       	ldi	r26, 0x38	; 56
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e8 e3       	ldi	r30, 0x38	; 56
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xb0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	a8 c0       	rjmp	.+336    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 13c:	a5 e3       	ldi	r26, 0x35	; 53
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e5 e3       	ldi	r30, 0x35	; 53
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinValue+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinValue+0xda>
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	8c 93       	st	X, r24
 164:	93 c0       	rjmp	.+294    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 166:	a2 e3       	ldi	r26, 0x32	; 50
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e2 e3       	ldi	r30, 0x32	; 50
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_u8SetPinValue+0x108>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_u8SetPinValue+0x104>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	7e c0       	rjmp	.+252    	; 0x28c <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState = NOK; break;//Not any port
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	7b c0       	rjmp	.+246    	; 0x28c <DIO_u8SetPinValue+0x210>
				}
			}
			else if(Copy_u8Value == DIO_u8PIN_HIGH)
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_u8SetPinValue+0x122>
 19c:	72 c0       	rjmp	.+228    	; 0x282 <DIO_u8SetPinValue+0x206>
			{
				switch(Copy_u8Port)//which port you want it as input
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3e 83       	std	Y+6, r19	; 0x06
 1a6:	2d 83       	std	Y+5, r18	; 0x05
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	49 f1       	breq	.+82     	; 0x204 <DIO_u8SetPinValue+0x188>
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <DIO_u8SetPinValue+0x14a>
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	61 f0       	breq	.+24     	; 0x1dc <DIO_u8SetPinValue+0x160>
 1c4:	5b c0       	rjmp	.+182    	; 0x27c <DIO_u8SetPinValue+0x200>
 1c6:	2d 81       	ldd	r18, Y+5	; 0x05
 1c8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <DIO_u8SetPinValue+0x1b0>
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	91 05       	cpc	r25, r1
 1d8:	e9 f1       	breq	.+122    	; 0x254 <DIO_u8SetPinValue+0x1d8>
 1da:	50 c0       	rjmp	.+160    	; 0x27c <DIO_u8SetPinValue+0x200>
				{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 1dc:	ab e3       	ldi	r26, 0x3B	; 59
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	eb e3       	ldi	r30, 0x3B	; 59
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8SetPinValue+0x17e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8SetPinValue+0x17a>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	44 c0       	rjmp	.+136    	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 204:	a8 e3       	ldi	r26, 0x38	; 56
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e8 e3       	ldi	r30, 0x38	; 56
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPinValue+0x1a6>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPinValue+0x1a2>
 226:	84 2b       	or	r24, r20
 228:	8c 93       	st	X, r24
 22a:	30 c0       	rjmp	.+96     	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 22c:	a5 e3       	ldi	r26, 0x35	; 53
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e5 e3       	ldi	r30, 0x35	; 53
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_u8SetPinValue+0x1ce>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_u8SetPinValue+0x1ca>
 24e:	84 2b       	or	r24, r20
 250:	8c 93       	st	X, r24
 252:	1c c0       	rjmp	.+56     	; 0x28c <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 254:	a2 e3       	ldi	r26, 0x32	; 50
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e2 e3       	ldi	r30, 0x32	; 50
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinValue+0x1f6>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8SetPinValue+0x1f2>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	08 c0       	rjmp	.+16     	; 0x28c <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState = NOK; break;//Not any port
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	05 c0       	rjmp	.+10     	; 0x28c <DIO_u8SetPinValue+0x210>
				}
			}
			else
			{
				Local_u8ErrorState = NOK;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
		}


		return Local_u8ErrorState;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_u8SetPinDirection>:




uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)//which port we want to srt, and which pin
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	28 97       	sbiw	r28, 0x08	; 8
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	8a 83       	std	Y+2, r24	; 0x02
 2b6:	6b 83       	std	Y+3, r22	; 0x03
 2b8:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
 2ba:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	88 30       	cpi	r24, 0x08	; 8
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <DIO_u8SetPinDirection+0x24>
 2c2:	f4 c0       	rjmp	.+488    	; 0x4ac <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	88 23       	and	r24, r24
 2c8:	09 f0       	breq	.+2      	; 0x2cc <DIO_u8SetPinDirection+0x2c>
 2ca:	77 c0       	rjmp	.+238    	; 0x3ba <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)//which port you want it as input
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	28 2f       	mov	r18, r24
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	38 87       	std	Y+8, r19	; 0x08
 2d4:	2f 83       	std	Y+7, r18	; 0x07
 2d6:	8f 81       	ldd	r24, Y+7	; 0x07
 2d8:	98 85       	ldd	r25, Y+8	; 0x08
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	91 05       	cpc	r25, r1
 2de:	59 f1       	breq	.+86     	; 0x336 <DIO_u8SetPinDirection+0x96>
 2e0:	2f 81       	ldd	r18, Y+7	; 0x07
 2e2:	38 85       	ldd	r19, Y+8	; 0x08
 2e4:	22 30       	cpi	r18, 0x02	; 2
 2e6:	31 05       	cpc	r19, r1
 2e8:	2c f4       	brge	.+10     	; 0x2f4 <DIO_u8SetPinDirection+0x54>
 2ea:	8f 81       	ldd	r24, Y+7	; 0x07
 2ec:	98 85       	ldd	r25, Y+8	; 0x08
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	69 f0       	breq	.+26     	; 0x30c <DIO_u8SetPinDirection+0x6c>
 2f2:	60 c0       	rjmp	.+192    	; 0x3b4 <DIO_u8SetPinDirection+0x114>
 2f4:	2f 81       	ldd	r18, Y+7	; 0x07
 2f6:	38 85       	ldd	r19, Y+8	; 0x08
 2f8:	22 30       	cpi	r18, 0x02	; 2
 2fa:	31 05       	cpc	r19, r1
 2fc:	89 f1       	breq	.+98     	; 0x360 <DIO_u8SetPinDirection+0xc0>
 2fe:	8f 81       	ldd	r24, Y+7	; 0x07
 300:	98 85       	ldd	r25, Y+8	; 0x08
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	91 05       	cpc	r25, r1
 306:	09 f4       	brne	.+2      	; 0x30a <DIO_u8SetPinDirection+0x6a>
 308:	40 c0       	rjmp	.+128    	; 0x38a <DIO_u8SetPinDirection+0xea>
 30a:	54 c0       	rjmp	.+168    	; 0x3b4 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
 30c:	aa e3       	ldi	r26, 0x3A	; 58
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	ea e3       	ldi	r30, 0x3A	; 58
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	48 2f       	mov	r20, r24
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 2e       	mov	r0, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8SetPinDirection+0x8a>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_u8SetPinDirection+0x86>
 32e:	80 95       	com	r24
 330:	84 23       	and	r24, r20
 332:	8c 93       	st	X, r24
 334:	bd c0       	rjmp	.+378    	; 0x4b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 336:	a7 e3       	ldi	r26, 0x37	; 55
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	e7 e3       	ldi	r30, 0x37	; 55
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	48 2f       	mov	r20, r24
 342:	8b 81       	ldd	r24, Y+3	; 0x03
 344:	28 2f       	mov	r18, r24
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 2e       	mov	r0, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_u8SetPinDirection+0xb4>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_u8SetPinDirection+0xb0>
 358:	80 95       	com	r24
 35a:	84 23       	and	r24, r20
 35c:	8c 93       	st	X, r24
 35e:	a8 c0       	rjmp	.+336    	; 0x4b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 360:	a4 e3       	ldi	r26, 0x34	; 52
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	e4 e3       	ldi	r30, 0x34	; 52
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	48 2f       	mov	r20, r24
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 2e       	mov	r0, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_u8SetPinDirection+0xde>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_u8SetPinDirection+0xda>
 382:	80 95       	com	r24
 384:	84 23       	and	r24, r20
 386:	8c 93       	st	X, r24
 388:	93 c0       	rjmp	.+294    	; 0x4b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 38a:	a1 e3       	ldi	r26, 0x31	; 49
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	e1 e3       	ldi	r30, 0x31	; 49
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	48 2f       	mov	r20, r24
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	28 2f       	mov	r18, r24
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 2e       	mov	r0, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_u8SetPinDirection+0x108>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_u8SetPinDirection+0x104>
 3ac:	80 95       	com	r24
 3ae:	84 23       	and	r24, r20
 3b0:	8c 93       	st	X, r24
 3b2:	7e c0       	rjmp	.+252    	; 0x4b0 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;//Not any port
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	89 83       	std	Y+1, r24	; 0x01
 3b8:	7b c0       	rjmp	.+246    	; 0x4b0 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
 3ba:	8c 81       	ldd	r24, Y+4	; 0x04
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	09 f0       	breq	.+2      	; 0x3c2 <DIO_u8SetPinDirection+0x122>
 3c0:	72 c0       	rjmp	.+228    	; 0x4a6 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)//which port you want it as input
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	3e 83       	std	Y+6, r19	; 0x06
 3ca:	2d 83       	std	Y+5, r18	; 0x05
 3cc:	8d 81       	ldd	r24, Y+5	; 0x05
 3ce:	9e 81       	ldd	r25, Y+6	; 0x06
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	91 05       	cpc	r25, r1
 3d4:	49 f1       	breq	.+82     	; 0x428 <DIO_u8SetPinDirection+0x188>
 3d6:	2d 81       	ldd	r18, Y+5	; 0x05
 3d8:	3e 81       	ldd	r19, Y+6	; 0x06
 3da:	22 30       	cpi	r18, 0x02	; 2
 3dc:	31 05       	cpc	r19, r1
 3de:	2c f4       	brge	.+10     	; 0x3ea <DIO_u8SetPinDirection+0x14a>
 3e0:	8d 81       	ldd	r24, Y+5	; 0x05
 3e2:	9e 81       	ldd	r25, Y+6	; 0x06
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	61 f0       	breq	.+24     	; 0x400 <DIO_u8SetPinDirection+0x160>
 3e8:	5b c0       	rjmp	.+182    	; 0x4a0 <DIO_u8SetPinDirection+0x200>
 3ea:	2d 81       	ldd	r18, Y+5	; 0x05
 3ec:	3e 81       	ldd	r19, Y+6	; 0x06
 3ee:	22 30       	cpi	r18, 0x02	; 2
 3f0:	31 05       	cpc	r19, r1
 3f2:	71 f1       	breq	.+92     	; 0x450 <DIO_u8SetPinDirection+0x1b0>
 3f4:	8d 81       	ldd	r24, Y+5	; 0x05
 3f6:	9e 81       	ldd	r25, Y+6	; 0x06
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	91 05       	cpc	r25, r1
 3fc:	e9 f1       	breq	.+122    	; 0x478 <DIO_u8SetPinDirection+0x1d8>
 3fe:	50 c0       	rjmp	.+160    	; 0x4a0 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 400:	aa e3       	ldi	r26, 0x3A	; 58
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	ea e3       	ldi	r30, 0x3A	; 58
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	48 2f       	mov	r20, r24
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	28 2f       	mov	r18, r24
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 2e       	mov	r0, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <DIO_u8SetPinDirection+0x17e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <DIO_u8SetPinDirection+0x17a>
 422:	84 2b       	or	r24, r20
 424:	8c 93       	st	X, r24
 426:	44 c0       	rjmp	.+136    	; 0x4b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 428:	a7 e3       	ldi	r26, 0x37	; 55
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	e7 e3       	ldi	r30, 0x37	; 55
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	48 2f       	mov	r20, r24
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	28 2f       	mov	r18, r24
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 2e       	mov	r0, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_u8SetPinDirection+0x1a6>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_u8SetPinDirection+0x1a2>
 44a:	84 2b       	or	r24, r20
 44c:	8c 93       	st	X, r24
 44e:	30 c0       	rjmp	.+96     	; 0x4b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 450:	a4 e3       	ldi	r26, 0x34	; 52
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	e4 e3       	ldi	r30, 0x34	; 52
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	48 2f       	mov	r20, r24
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 2e       	mov	r0, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_u8SetPinDirection+0x1ce>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_u8SetPinDirection+0x1ca>
 472:	84 2b       	or	r24, r20
 474:	8c 93       	st	X, r24
 476:	1c c0       	rjmp	.+56     	; 0x4b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 478:	a1 e3       	ldi	r26, 0x31	; 49
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	e1 e3       	ldi	r30, 0x31	; 49
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	48 2f       	mov	r20, r24
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 2e       	mov	r0, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_u8SetPinDirection+0x1f6>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_u8SetPinDirection+0x1f2>
 49a:	84 2b       	or	r24, r20
 49c:	8c 93       	st	X, r24
 49e:	08 c0       	rjmp	.+16     	; 0x4b0 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;//Not any port
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	89 83       	std	Y+1, r24	; 0x01
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 4b2:	28 96       	adiw	r28, 0x08	; 8
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	cf 91       	pop	r28
 4c0:	df 91       	pop	r29
 4c2:	08 95       	ret

000004c4 <DIO_u8GetPinValue>:


uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)//which port we want to srt, and which pin
{
 4c4:	df 93       	push	r29
 4c6:	cf 93       	push	r28
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	27 97       	sbiw	r28, 0x07	; 7
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
 4d8:	8a 83       	std	Y+2, r24	; 0x02
 4da:	6b 83       	std	Y+3, r22	; 0x03
 4dc:	5d 83       	std	Y+5, r21	; 0x05
 4de:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
 4e0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
 4e2:	8c 81       	ldd	r24, Y+4	; 0x04
 4e4:	9d 81       	ldd	r25, Y+5	; 0x05
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	09 f4       	brne	.+2      	; 0x4ec <DIO_u8GetPinValue+0x28>
 4ea:	7b c0       	rjmp	.+246    	; 0x5e2 <DIO_u8GetPinValue+0x11e>
	{
		if( Copy_u8Pin <= DIO_u8PIN7)
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	88 30       	cpi	r24, 0x08	; 8
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <DIO_u8GetPinValue+0x30>
 4f2:	74 c0       	rjmp	.+232    	; 0x5dc <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)//which port you want it as input
 4f4:	8a 81       	ldd	r24, Y+2	; 0x02
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	3f 83       	std	Y+7, r19	; 0x07
 4fc:	2e 83       	std	Y+6, r18	; 0x06
 4fe:	4e 81       	ldd	r20, Y+6	; 0x06
 500:	5f 81       	ldd	r21, Y+7	; 0x07
 502:	41 30       	cpi	r20, 0x01	; 1
 504:	51 05       	cpc	r21, r1
 506:	59 f1       	breq	.+86     	; 0x55e <DIO_u8GetPinValue+0x9a>
 508:	8e 81       	ldd	r24, Y+6	; 0x06
 50a:	9f 81       	ldd	r25, Y+7	; 0x07
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	91 05       	cpc	r25, r1
 510:	34 f4       	brge	.+12     	; 0x51e <DIO_u8GetPinValue+0x5a>
 512:	2e 81       	ldd	r18, Y+6	; 0x06
 514:	3f 81       	ldd	r19, Y+7	; 0x07
 516:	21 15       	cp	r18, r1
 518:	31 05       	cpc	r19, r1
 51a:	69 f0       	breq	.+26     	; 0x536 <DIO_u8GetPinValue+0x72>
 51c:	5c c0       	rjmp	.+184    	; 0x5d6 <DIO_u8GetPinValue+0x112>
 51e:	4e 81       	ldd	r20, Y+6	; 0x06
 520:	5f 81       	ldd	r21, Y+7	; 0x07
 522:	42 30       	cpi	r20, 0x02	; 2
 524:	51 05       	cpc	r21, r1
 526:	79 f1       	breq	.+94     	; 0x586 <DIO_u8GetPinValue+0xc2>
 528:	8e 81       	ldd	r24, Y+6	; 0x06
 52a:	9f 81       	ldd	r25, Y+7	; 0x07
 52c:	83 30       	cpi	r24, 0x03	; 3
 52e:	91 05       	cpc	r25, r1
 530:	09 f4       	brne	.+2      	; 0x534 <DIO_u8GetPinValue+0x70>
 532:	3d c0       	rjmp	.+122    	; 0x5ae <DIO_u8GetPinValue+0xea>
 534:	50 c0       	rjmp	.+160    	; 0x5d6 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:*Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
 536:	e9 e3       	ldi	r30, 0x39	; 57
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	28 2f       	mov	r18, r24
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	8b 81       	ldd	r24, Y+3	; 0x03
 542:	88 2f       	mov	r24, r24
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	a9 01       	movw	r20, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_u8GetPinValue+0x8a>
 54a:	55 95       	asr	r21
 54c:	47 95       	ror	r20
 54e:	8a 95       	dec	r24
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_u8GetPinValue+0x86>
 552:	ca 01       	movw	r24, r20
 554:	81 70       	andi	r24, 0x01	; 1
 556:	ec 81       	ldd	r30, Y+4	; 0x04
 558:	fd 81       	ldd	r31, Y+5	; 0x05
 55a:	80 83       	st	Z, r24
 55c:	44 c0       	rjmp	.+136    	; 0x5e6 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTB:*Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
 55e:	e6 e3       	ldi	r30, 0x36	; 54
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	8b 81       	ldd	r24, Y+3	; 0x03
 56a:	88 2f       	mov	r24, r24
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	a9 01       	movw	r20, r18
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_u8GetPinValue+0xb2>
 572:	55 95       	asr	r21
 574:	47 95       	ror	r20
 576:	8a 95       	dec	r24
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_u8GetPinValue+0xae>
 57a:	ca 01       	movw	r24, r20
 57c:	81 70       	andi	r24, 0x01	; 1
 57e:	ec 81       	ldd	r30, Y+4	; 0x04
 580:	fd 81       	ldd	r31, Y+5	; 0x05
 582:	80 83       	st	Z, r24
 584:	30 c0       	rjmp	.+96     	; 0x5e6 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTC:*Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
 586:	e3 e3       	ldi	r30, 0x33	; 51
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	88 2f       	mov	r24, r24
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	a9 01       	movw	r20, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_u8GetPinValue+0xda>
 59a:	55 95       	asr	r21
 59c:	47 95       	ror	r20
 59e:	8a 95       	dec	r24
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_u8GetPinValue+0xd6>
 5a2:	ca 01       	movw	r24, r20
 5a4:	81 70       	andi	r24, 0x01	; 1
 5a6:	ec 81       	ldd	r30, Y+4	; 0x04
 5a8:	fd 81       	ldd	r31, Y+5	; 0x05
 5aa:	80 83       	st	Z, r24
 5ac:	1c c0       	rjmp	.+56     	; 0x5e6 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTD:*Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
 5ae:	e0 e3       	ldi	r30, 0x30	; 48
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	28 2f       	mov	r18, r24
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	88 2f       	mov	r24, r24
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	a9 01       	movw	r20, r18
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_u8GetPinValue+0x102>
 5c2:	55 95       	asr	r21
 5c4:	47 95       	ror	r20
 5c6:	8a 95       	dec	r24
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_u8GetPinValue+0xfe>
 5ca:	ca 01       	movw	r24, r20
 5cc:	81 70       	andi	r24, 0x01	; 1
 5ce:	ec 81       	ldd	r30, Y+4	; 0x04
 5d0:	fd 81       	ldd	r31, Y+5	; 0x05
 5d2:	80 83       	st	Z, r24
 5d4:	08 c0       	rjmp	.+16     	; 0x5e6 <DIO_u8GetPinValue+0x122>
			default: Local_u8ErrorState = NOK; break;//Not any port
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	89 83       	std	Y+1, r24	; 0x01
 5da:	05 c0       	rjmp	.+10     	; 0x5e6 <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	89 83       	std	Y+1, r24	; 0x01
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_u8GetPinValue+0x122>
		}

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
}
 5e8:	27 96       	adiw	r28, 0x07	; 7
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	f8 94       	cli
 5ee:	de bf       	out	0x3e, r29	; 62
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	cd bf       	out	0x3d, r28	; 61
 5f4:	cf 91       	pop	r28
 5f6:	df 91       	pop	r29
 5f8:	08 95       	ret

000005fa <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
 5fa:	df 93       	push	r29
 5fc:	cf 93       	push	r28
 5fe:	00 d0       	rcall	.+0      	; 0x600 <DIO_u8SetPortDirection+0x6>
 600:	00 d0       	rcall	.+0      	; 0x602 <DIO_u8SetPortDirection+0x8>
 602:	0f 92       	push	r0
 604:	cd b7       	in	r28, 0x3d	; 61
 606:	de b7       	in	r29, 0x3e	; 62
 608:	8a 83       	std	Y+2, r24	; 0x02
 60a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 60c:	19 82       	std	Y+1, r1	; 0x01


				switch(Copy_u8Port)//which port you want it as input
 60e:	8a 81       	ldd	r24, Y+2	; 0x02
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	3d 83       	std	Y+5, r19	; 0x05
 616:	2c 83       	std	Y+4, r18	; 0x04
 618:	8c 81       	ldd	r24, Y+4	; 0x04
 61a:	9d 81       	ldd	r25, Y+5	; 0x05
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	91 05       	cpc	r25, r1
 620:	d1 f0       	breq	.+52     	; 0x656 <DIO_u8SetPortDirection+0x5c>
 622:	2c 81       	ldd	r18, Y+4	; 0x04
 624:	3d 81       	ldd	r19, Y+5	; 0x05
 626:	22 30       	cpi	r18, 0x02	; 2
 628:	31 05       	cpc	r19, r1
 62a:	2c f4       	brge	.+10     	; 0x636 <DIO_u8SetPortDirection+0x3c>
 62c:	8c 81       	ldd	r24, Y+4	; 0x04
 62e:	9d 81       	ldd	r25, Y+5	; 0x05
 630:	00 97       	sbiw	r24, 0x00	; 0
 632:	61 f0       	breq	.+24     	; 0x64c <DIO_u8SetPortDirection+0x52>
 634:	1f c0       	rjmp	.+62     	; 0x674 <DIO_u8SetPortDirection+0x7a>
 636:	2c 81       	ldd	r18, Y+4	; 0x04
 638:	3d 81       	ldd	r19, Y+5	; 0x05
 63a:	22 30       	cpi	r18, 0x02	; 2
 63c:	31 05       	cpc	r19, r1
 63e:	81 f0       	breq	.+32     	; 0x660 <DIO_u8SetPortDirection+0x66>
 640:	8c 81       	ldd	r24, Y+4	; 0x04
 642:	9d 81       	ldd	r25, Y+5	; 0x05
 644:	83 30       	cpi	r24, 0x03	; 3
 646:	91 05       	cpc	r25, r1
 648:	81 f0       	breq	.+32     	; 0x66a <DIO_u8SetPortDirection+0x70>
 64a:	14 c0       	rjmp	.+40     	; 0x674 <DIO_u8SetPortDirection+0x7a>
				{
				case DIO_u8PORTA:DDRA = Copy_u8Direction; break;
 64c:	ea e3       	ldi	r30, 0x3A	; 58
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	80 83       	st	Z, r24
 654:	11 c0       	rjmp	.+34     	; 0x678 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTB:DDRB = Copy_u8Direction; break;
 656:	e7 e3       	ldi	r30, 0x37	; 55
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	8b 81       	ldd	r24, Y+3	; 0x03
 65c:	80 83       	st	Z, r24
 65e:	0c c0       	rjmp	.+24     	; 0x678 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTC:DDRC = Copy_u8Direction; break;
 660:	e4 e3       	ldi	r30, 0x34	; 52
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	80 83       	st	Z, r24
 668:	07 c0       	rjmp	.+14     	; 0x678 <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTD:DDRD = Copy_u8Direction; break;
 66a:	e1 e3       	ldi	r30, 0x31	; 49
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	8b 81       	ldd	r24, Y+3	; 0x03
 670:	80 83       	st	Z, r24
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_u8SetPortDirection+0x7e>
				default: Local_u8ErrorState = NOK; break;//Not any port
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	89 83       	std	Y+1, r24	; 0x01
				}

		return Local_u8ErrorState;
 678:	89 81       	ldd	r24, Y+1	; 0x01
}
 67a:	0f 90       	pop	r0
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	cf 91       	pop	r28
 686:	df 91       	pop	r29
 688:	08 95       	ret

0000068a <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
 68a:	df 93       	push	r29
 68c:	cf 93       	push	r28
 68e:	00 d0       	rcall	.+0      	; 0x690 <DIO_u8SetPortValue+0x6>
 690:	00 d0       	rcall	.+0      	; 0x692 <DIO_u8SetPortValue+0x8>
 692:	0f 92       	push	r0
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
 698:	8a 83       	std	Y+2, r24	; 0x02
 69a:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState = OK;
 69c:	19 82       	std	Y+1, r1	; 0x01


				switch(Copy_u8Port)//which port you want it as input
 69e:	8a 81       	ldd	r24, Y+2	; 0x02
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	3d 83       	std	Y+5, r19	; 0x05
 6a6:	2c 83       	std	Y+4, r18	; 0x04
 6a8:	8c 81       	ldd	r24, Y+4	; 0x04
 6aa:	9d 81       	ldd	r25, Y+5	; 0x05
 6ac:	81 30       	cpi	r24, 0x01	; 1
 6ae:	91 05       	cpc	r25, r1
 6b0:	d1 f0       	breq	.+52     	; 0x6e6 <DIO_u8SetPortValue+0x5c>
 6b2:	2c 81       	ldd	r18, Y+4	; 0x04
 6b4:	3d 81       	ldd	r19, Y+5	; 0x05
 6b6:	22 30       	cpi	r18, 0x02	; 2
 6b8:	31 05       	cpc	r19, r1
 6ba:	2c f4       	brge	.+10     	; 0x6c6 <DIO_u8SetPortValue+0x3c>
 6bc:	8c 81       	ldd	r24, Y+4	; 0x04
 6be:	9d 81       	ldd	r25, Y+5	; 0x05
 6c0:	00 97       	sbiw	r24, 0x00	; 0
 6c2:	61 f0       	breq	.+24     	; 0x6dc <DIO_u8SetPortValue+0x52>
 6c4:	1f c0       	rjmp	.+62     	; 0x704 <DIO_u8SetPortValue+0x7a>
 6c6:	2c 81       	ldd	r18, Y+4	; 0x04
 6c8:	3d 81       	ldd	r19, Y+5	; 0x05
 6ca:	22 30       	cpi	r18, 0x02	; 2
 6cc:	31 05       	cpc	r19, r1
 6ce:	81 f0       	breq	.+32     	; 0x6f0 <DIO_u8SetPortValue+0x66>
 6d0:	8c 81       	ldd	r24, Y+4	; 0x04
 6d2:	9d 81       	ldd	r25, Y+5	; 0x05
 6d4:	83 30       	cpi	r24, 0x03	; 3
 6d6:	91 05       	cpc	r25, r1
 6d8:	81 f0       	breq	.+32     	; 0x6fa <DIO_u8SetPortValue+0x70>
 6da:	14 c0       	rjmp	.+40     	; 0x704 <DIO_u8SetPortValue+0x7a>
				{
				case DIO_u8PORTA:PORTA = Copy_u8Value; break;
 6dc:	eb e3       	ldi	r30, 0x3B	; 59
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	8b 81       	ldd	r24, Y+3	; 0x03
 6e2:	80 83       	st	Z, r24
 6e4:	11 c0       	rjmp	.+34     	; 0x708 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTB:PORTB = Copy_u8Value; break;
 6e6:	e8 e3       	ldi	r30, 0x38	; 56
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	8b 81       	ldd	r24, Y+3	; 0x03
 6ec:	80 83       	st	Z, r24
 6ee:	0c c0       	rjmp	.+24     	; 0x708 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTC:PORTC = Copy_u8Value; break;
 6f0:	e5 e3       	ldi	r30, 0x35	; 53
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	80 83       	st	Z, r24
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTD:PORTD = Copy_u8Value; break;
 6fa:	e2 e3       	ldi	r30, 0x32	; 50
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	8b 81       	ldd	r24, Y+3	; 0x03
 700:	80 83       	st	Z, r24
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_u8SetPortValue+0x7e>
				default: Local_u8ErrorState = NOK; break;//Not any port
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	89 83       	std	Y+1, r24	; 0x01
				}

		return Local_u8ErrorState;
 708:	89 81       	ldd	r24, Y+1	; 0x01

}
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	cf 91       	pop	r28
 716:	df 91       	pop	r29
 718:	08 95       	ret

0000071a <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
 71a:	df 93       	push	r29
 71c:	cf 93       	push	r28
 71e:	00 d0       	rcall	.+0      	; 0x720 <DIO_u8TogglePinValue+0x6>
 720:	00 d0       	rcall	.+0      	; 0x722 <DIO_u8TogglePinValue+0x8>
 722:	00 d0       	rcall	.+0      	; 0x724 <DIO_u8TogglePinValue+0xa>
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	8a 83       	std	Y+2, r24	; 0x02
 72a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 72c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	88 30       	cpi	r24, 0x08	; 8
 732:	08 f0       	brcs	.+2      	; 0x736 <DIO_u8TogglePinValue+0x1c>
 734:	74 c0       	rjmp	.+232    	; 0x81e <DIO_u8TogglePinValue+0x104>
	{

			switch(Copy_u8Port)//which port you want it as input
 736:	8a 81       	ldd	r24, Y+2	; 0x02
 738:	28 2f       	mov	r18, r24
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	3e 83       	std	Y+6, r19	; 0x06
 73e:	2d 83       	std	Y+5, r18	; 0x05
 740:	8d 81       	ldd	r24, Y+5	; 0x05
 742:	9e 81       	ldd	r25, Y+6	; 0x06
 744:	81 30       	cpi	r24, 0x01	; 1
 746:	91 05       	cpc	r25, r1
 748:	49 f1       	breq	.+82     	; 0x79c <DIO_u8TogglePinValue+0x82>
 74a:	2d 81       	ldd	r18, Y+5	; 0x05
 74c:	3e 81       	ldd	r19, Y+6	; 0x06
 74e:	22 30       	cpi	r18, 0x02	; 2
 750:	31 05       	cpc	r19, r1
 752:	2c f4       	brge	.+10     	; 0x75e <DIO_u8TogglePinValue+0x44>
 754:	8d 81       	ldd	r24, Y+5	; 0x05
 756:	9e 81       	ldd	r25, Y+6	; 0x06
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	61 f0       	breq	.+24     	; 0x774 <DIO_u8TogglePinValue+0x5a>
 75c:	5b c0       	rjmp	.+182    	; 0x814 <DIO_u8TogglePinValue+0xfa>
 75e:	2d 81       	ldd	r18, Y+5	; 0x05
 760:	3e 81       	ldd	r19, Y+6	; 0x06
 762:	22 30       	cpi	r18, 0x02	; 2
 764:	31 05       	cpc	r19, r1
 766:	71 f1       	breq	.+92     	; 0x7c4 <DIO_u8TogglePinValue+0xaa>
 768:	8d 81       	ldd	r24, Y+5	; 0x05
 76a:	9e 81       	ldd	r25, Y+6	; 0x06
 76c:	83 30       	cpi	r24, 0x03	; 3
 76e:	91 05       	cpc	r25, r1
 770:	e9 f1       	breq	.+122    	; 0x7ec <DIO_u8TogglePinValue+0xd2>
 772:	50 c0       	rjmp	.+160    	; 0x814 <DIO_u8TogglePinValue+0xfa>
			{
			case DIO_u8PORTA:TOG_BIT(PORTA,Copy_u8Pin); break;
 774:	ab e3       	ldi	r26, 0x3B	; 59
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	eb e3       	ldi	r30, 0x3B	; 59
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	48 2f       	mov	r20, r24
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	28 2f       	mov	r18, r24
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 2e       	mov	r0, r18
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_u8TogglePinValue+0x78>
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	0a 94       	dec	r0
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_u8TogglePinValue+0x74>
 796:	84 27       	eor	r24, r20
 798:	8c 93       	st	X, r24
 79a:	3e c0       	rjmp	.+124    	; 0x818 <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTB:TOG_BIT(PORTB,Copy_u8Pin); break;
 79c:	a8 e3       	ldi	r26, 0x38	; 56
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	e8 e3       	ldi	r30, 0x38	; 56
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	48 2f       	mov	r20, r24
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 2e       	mov	r0, r18
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_u8TogglePinValue+0xa0>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	0a 94       	dec	r0
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_u8TogglePinValue+0x9c>
 7be:	84 27       	eor	r24, r20
 7c0:	8c 93       	st	X, r24
 7c2:	2a c0       	rjmp	.+84     	; 0x818 <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTC:TOG_BIT(PORTC,Copy_u8Pin); break;
 7c4:	a5 e3       	ldi	r26, 0x35	; 53
 7c6:	b0 e0       	ldi	r27, 0x00	; 0
 7c8:	e5 e3       	ldi	r30, 0x35	; 53
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	48 2f       	mov	r20, r24
 7d0:	8b 81       	ldd	r24, Y+3	; 0x03
 7d2:	28 2f       	mov	r18, r24
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	02 2e       	mov	r0, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_u8TogglePinValue+0xc8>
 7de:	88 0f       	add	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	0a 94       	dec	r0
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_u8TogglePinValue+0xc4>
 7e6:	84 27       	eor	r24, r20
 7e8:	8c 93       	st	X, r24
 7ea:	16 c0       	rjmp	.+44     	; 0x818 <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTD:TOG_BIT(PORTD,Copy_u8Pin); break;
 7ec:	a2 e3       	ldi	r26, 0x32	; 50
 7ee:	b0 e0       	ldi	r27, 0x00	; 0
 7f0:	e2 e3       	ldi	r30, 0x32	; 50
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	48 2f       	mov	r20, r24
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	28 2f       	mov	r18, r24
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 2e       	mov	r0, r18
 804:	02 c0       	rjmp	.+4      	; 0x80a <DIO_u8TogglePinValue+0xf0>
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	0a 94       	dec	r0
 80c:	e2 f7       	brpl	.-8      	; 0x806 <DIO_u8TogglePinValue+0xec>
 80e:	84 27       	eor	r24, r20
 810:	8c 93       	st	X, r24
 812:	02 c0       	rjmp	.+4      	; 0x818 <DIO_u8TogglePinValue+0xfe>
			default: Local_u8ErrorState = NOK; break;//Not any port
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return Local_u8ErrorState;
	}

		return Local_u8ErrorState;
 818:	99 81       	ldd	r25, Y+1	; 0x01
 81a:	9c 83       	std	Y+4, r25	; 0x04
 81c:	02 c0       	rjmp	.+4      	; 0x822 <DIO_u8TogglePinValue+0x108>
			default: Local_u8ErrorState = NOK; break;//Not any port
			}
	}
	else
	{
		return Local_u8ErrorState;
 81e:	29 81       	ldd	r18, Y+1	; 0x01
 820:	2c 83       	std	Y+4, r18	; 0x04
 822:	8c 81       	ldd	r24, Y+4	; 0x04
	}

		return Local_u8ErrorState;
}
 824:	26 96       	adiw	r28, 0x06	; 6
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	f8 94       	cli
 82a:	de bf       	out	0x3e, r29	; 62
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	cd bf       	out	0x3d, r28	; 61
 830:	cf 91       	pop	r28
 832:	df 91       	pop	r29
 834:	08 95       	ret

00000836 <EXTI_u8IntEnable>:



/** Enabling**/
uint8 EXTI_u8IntEnable(uint8 Copy_u8Innterrupt)
{
 836:	df 93       	push	r29
 838:	cf 93       	push	r28
 83a:	00 d0       	rcall	.+0      	; 0x83c <EXTI_u8IntEnable+0x6>
 83c:	cd b7       	in	r28, 0x3d	; 61
 83e:	de b7       	in	r29, 0x3e	; 62
 840:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LocalErrorState = OK;
 842:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Innterrupt == EXTI_INT0)
 844:	8a 81       	ldd	r24, Y+2	; 0x02
 846:	88 23       	and	r24, r24
 848:	49 f4       	brne	.+18     	; 0x85c <EXTI_u8IntEnable+0x26>
	{
		LocalErrorState = OK;
 84a:	19 82       	std	Y+1, r1	; 0x01
		SET_BIT(GICR,GICR_INT0_EN);
 84c:	ab e5       	ldi	r26, 0x5B	; 91
 84e:	b0 e0       	ldi	r27, 0x00	; 0
 850:	eb e5       	ldi	r30, 0x5B	; 91
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	80 81       	ld	r24, Z
 856:	80 64       	ori	r24, 0x40	; 64
 858:	8c 93       	st	X, r24
 85a:	1a c0       	rjmp	.+52     	; 0x890 <__stack+0x31>
	}
	else if(Copy_u8Innterrupt == EXTI_INT1)
 85c:	8a 81       	ldd	r24, Y+2	; 0x02
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	49 f4       	brne	.+18     	; 0x874 <__stack+0x15>
	{
		LocalErrorState = OK;
 862:	19 82       	std	Y+1, r1	; 0x01
		SET_BIT(GICR,GICR_INT1_EN);
 864:	ab e5       	ldi	r26, 0x5B	; 91
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	eb e5       	ldi	r30, 0x5B	; 91
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	80 68       	ori	r24, 0x80	; 128
 870:	8c 93       	st	X, r24
 872:	0e c0       	rjmp	.+28     	; 0x890 <__stack+0x31>
	}
	else if(Copy_u8Innterrupt == EXTI_INT2)
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	82 30       	cpi	r24, 0x02	; 2
 878:	49 f4       	brne	.+18     	; 0x88c <__stack+0x2d>
	{
		LocalErrorState = OK;
 87a:	19 82       	std	Y+1, r1	; 0x01
		SET_BIT(GICR,GICR_INT2_EN);
 87c:	ab e5       	ldi	r26, 0x5B	; 91
 87e:	b0 e0       	ldi	r27, 0x00	; 0
 880:	eb e5       	ldi	r30, 0x5B	; 91
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	80 62       	ori	r24, 0x20	; 32
 888:	8c 93       	st	X, r24
 88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
	}
	else
	{
		LocalErrorState = NOK;
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorState;
 890:	89 81       	ldd	r24, Y+1	; 0x01
}
 892:	0f 90       	pop	r0
 894:	0f 90       	pop	r0
 896:	cf 91       	pop	r28
 898:	df 91       	pop	r29
 89a:	08 95       	ret

0000089c <EXTI_u8DisableEnable>:

/** Disabling **/

uint8 EXTI_u8DisableEnable(uint8 Copy_u8Innterrupt)
{
 89c:	df 93       	push	r29
 89e:	cf 93       	push	r28
 8a0:	00 d0       	rcall	.+0      	; 0x8a2 <EXTI_u8DisableEnable+0x6>
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
 8a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LocalErrorState = OK;
 8a8:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Innterrupt == EXTI_INT0)
 8aa:	8a 81       	ldd	r24, Y+2	; 0x02
 8ac:	88 23       	and	r24, r24
 8ae:	49 f4       	brne	.+18     	; 0x8c2 <EXTI_u8DisableEnable+0x26>
	{
		LocalErrorState = OK;
 8b0:	19 82       	std	Y+1, r1	; 0x01
		CLR_BIT(GICR,GICR_INT0_EN);
 8b2:	ab e5       	ldi	r26, 0x5B	; 91
 8b4:	b0 e0       	ldi	r27, 0x00	; 0
 8b6:	eb e5       	ldi	r30, 0x5B	; 91
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	8f 7b       	andi	r24, 0xBF	; 191
 8be:	8c 93       	st	X, r24
 8c0:	1a c0       	rjmp	.+52     	; 0x8f6 <EXTI_u8DisableEnable+0x5a>
	}
	else if(Copy_u8Innterrupt == EXTI_INT1)
 8c2:	8a 81       	ldd	r24, Y+2	; 0x02
 8c4:	81 30       	cpi	r24, 0x01	; 1
 8c6:	49 f4       	brne	.+18     	; 0x8da <EXTI_u8DisableEnable+0x3e>
	{
		LocalErrorState = OK;
 8c8:	19 82       	std	Y+1, r1	; 0x01
		CLR_BIT(GICR,GICR_INT1_EN);
 8ca:	ab e5       	ldi	r26, 0x5B	; 91
 8cc:	b0 e0       	ldi	r27, 0x00	; 0
 8ce:	eb e5       	ldi	r30, 0x5B	; 91
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	8f 77       	andi	r24, 0x7F	; 127
 8d6:	8c 93       	st	X, r24
 8d8:	0e c0       	rjmp	.+28     	; 0x8f6 <EXTI_u8DisableEnable+0x5a>
	}
	else if(Copy_u8Innterrupt == EXTI_INT2)
 8da:	8a 81       	ldd	r24, Y+2	; 0x02
 8dc:	82 30       	cpi	r24, 0x02	; 2
 8de:	49 f4       	brne	.+18     	; 0x8f2 <EXTI_u8DisableEnable+0x56>
	{
		LocalErrorState = OK;
 8e0:	19 82       	std	Y+1, r1	; 0x01
		CLR_BIT(GICR,GICR_INT2_EN);
 8e2:	ab e5       	ldi	r26, 0x5B	; 91
 8e4:	b0 e0       	ldi	r27, 0x00	; 0
 8e6:	eb e5       	ldi	r30, 0x5B	; 91
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 81       	ld	r24, Z
 8ec:	8f 7d       	andi	r24, 0xDF	; 223
 8ee:	8c 93       	st	X, r24
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <EXTI_u8DisableEnable+0x5a>
	}
	else
	{
		LocalErrorState = NOK;
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorState;
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
}
 8f8:	0f 90       	pop	r0
 8fa:	0f 90       	pop	r0
 8fc:	cf 91       	pop	r28
 8fe:	df 91       	pop	r29
 900:	08 95       	ret

00000902 <EXTI_voidINT0Init>:


/** Intializing INT0 **/
void EXTI_voidINT0Init(void)
{
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT0_CTRL_SENSE == EXTI_u8_LOGICAL_CHANGE
		SET_BIT(MCUCR,MCUCR_INT0_ISC00);
		CLR_BIT(MCUCR,MCUCR_INT0_ISC01);

#elif EXTI_INT0_CTRL_SENSE == EXTI_u8FALLING_EDGE
		CLR_BIT(MCUCR,MCUCR_INT0_ISC00);
 90a:	a5 e5       	ldi	r26, 0x55	; 85
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	e5 e5       	ldi	r30, 0x55	; 85
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	8e 7f       	andi	r24, 0xFE	; 254
 916:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_INT0_ISC01);
 918:	a5 e5       	ldi	r26, 0x55	; 85
 91a:	b0 e0       	ldi	r27, 0x00	; 0
 91c:	e5 e5       	ldi	r30, 0x55	; 85
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	82 60       	ori	r24, 0x02	; 2
 924:	8c 93       	st	X, r24
#error  Wrong INT0_Ctrl_Sense configuration options
#endif

		/*Checking Enabled or Disabled*/
#if EXTI_INT0_STATE == ENABLED
		SET_BIT(GICR,GICR_INT0_EN);
 926:	ab e5       	ldi	r26, 0x5B	; 91
 928:	b0 e0       	ldi	r27, 0x00	; 0
 92a:	eb e5       	ldi	r30, 0x5B	; 91
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	80 81       	ld	r24, Z
 930:	80 64       	ori	r24, 0x40	; 64
 932:	8c 93       	st	X, r24
		CLR_BIT(GICR,GICR_INT0_EN);

#else
#error Wrong INT0_Initial_STATE configuration options
#endif
}
 934:	cf 91       	pop	r28
 936:	df 91       	pop	r29
 938:	08 95       	ret

0000093a <EXTI_voidINT1Init>:

/** Intializing INT1 **/

void EXTI_voidINT1Init(void)
{
 93a:	df 93       	push	r29
 93c:	cf 93       	push	r28
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT0_CTRL_SENSE == EXTI_u8_LOGICAL_CHANGE
	SET_BIT(MCUCR,MCUCR_INT1_ISC10);
	CLR_BIT(MCUCR,MCUCR_INT1_ISC11);

#elif EXTI_INT0_CTRL_SENSE == EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_INT1_ISC10);
 942:	a5 e5       	ldi	r26, 0x55	; 85
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	e5 e5       	ldi	r30, 0x55	; 85
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	8b 7f       	andi	r24, 0xFB	; 251
 94e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_INT1_ISC11);
 950:	a5 e5       	ldi	r26, 0x55	; 85
 952:	b0 e0       	ldi	r27, 0x00	; 0
 954:	e5 e5       	ldi	r30, 0x55	; 85
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	88 60       	ori	r24, 0x08	; 8
 95c:	8c 93       	st	X, r24
#error  Wrong INT1_Ctrl_Sense configuration options
#endif

	/*Checking Enabled or Disabled*/
#if EXTI_INT1_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1_EN);
 95e:	ab e5       	ldi	r26, 0x5B	; 91
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	eb e5       	ldi	r30, 0x5B	; 91
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	80 68       	ori	r24, 0x80	; 128
 96a:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT1_EN);

#else
##error Wrong INT1_Initial_STATE configuration options
#endif
}
 96c:	cf 91       	pop	r28
 96e:	df 91       	pop	r29
 970:	08 95       	ret

00000972 <EXTI_voidINT2Init>:

/**Intialising INT2 **/
void EXTI_voidINT2Init(void)
{
 972:	df 93       	push	r29
 974:	cf 93       	push	r28
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62
/*Checking the control State */
#if EXTI_INT2_CTRL_SENSE == EXTI_u8FALLING_EDGE
CLR_BIT(MCUCSR,MCUCSR_INT2_ISC2);
 97a:	a4 e5       	ldi	r26, 0x54	; 84
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	e4 e5       	ldi	r30, 0x54	; 84
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	8f 7b       	andi	r24, 0xBF	; 191
 986:	8c 93       	st	X, r24
#error  Wrong INT2_Ctrl_Sense configuration options
#endif

	/*Checking Enabled or Disabled*/
#if EXTI_INT2_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2_EN);
 988:	ab e5       	ldi	r26, 0x5B	; 91
 98a:	b0 e0       	ldi	r27, 0x00	; 0
 98c:	eb e5       	ldi	r30, 0x5B	; 91
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	80 81       	ld	r24, Z
 992:	80 62       	ori	r24, 0x20	; 32
 994:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT2_EN);

#else
##error Wrong INT2_Initial_STATE configuration options
#endif
}
 996:	cf 91       	pop	r28
 998:	df 91       	pop	r29
 99a:	08 95       	ret

0000099c <EXTI_u8SetSenseControl>:


/** Sensing Control **/

uint8 EXTI_u8SetSenseControl(uint8 Copy_u8Interrupt,uint8 Copy_u8Sense_Ctrl)
{
 99c:	df 93       	push	r29
 99e:	cf 93       	push	r28
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
 9a4:	29 97       	sbiw	r28, 0x09	; 9
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	f8 94       	cli
 9aa:	de bf       	out	0x3e, r29	; 62
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	cd bf       	out	0x3d, r28	; 61
 9b0:	8a 83       	std	Y+2, r24	; 0x02
 9b2:	6b 83       	std	Y+3, r22	; 0x03

	uint8 LocalErrorState = OK;
 9b4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Interrupt == EXTI_INT0)
 9b6:	8a 81       	ldd	r24, Y+2	; 0x02
 9b8:	88 23       	and	r24, r24
 9ba:	09 f0       	breq	.+2      	; 0x9be <EXTI_u8SetSenseControl+0x22>
 9bc:	5f c0       	rjmp	.+190    	; 0xa7c <EXTI_u8SetSenseControl+0xe0>
	{
		switch(Copy_u8Sense_Ctrl)
 9be:	8b 81       	ldd	r24, Y+3	; 0x03
 9c0:	28 2f       	mov	r18, r24
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	39 87       	std	Y+9, r19	; 0x09
 9c6:	28 87       	std	Y+8, r18	; 0x08
 9c8:	88 85       	ldd	r24, Y+8	; 0x08
 9ca:	99 85       	ldd	r25, Y+9	; 0x09
 9cc:	82 30       	cpi	r24, 0x02	; 2
 9ce:	91 05       	cpc	r25, r1
 9d0:	29 f1       	breq	.+74     	; 0xa1c <EXTI_u8SetSenseControl+0x80>
 9d2:	28 85       	ldd	r18, Y+8	; 0x08
 9d4:	39 85       	ldd	r19, Y+9	; 0x09
 9d6:	23 30       	cpi	r18, 0x03	; 3
 9d8:	31 05       	cpc	r19, r1
 9da:	34 f4       	brge	.+12     	; 0x9e8 <EXTI_u8SetSenseControl+0x4c>
 9dc:	88 85       	ldd	r24, Y+8	; 0x08
 9de:	99 85       	ldd	r25, Y+9	; 0x09
 9e0:	81 30       	cpi	r24, 0x01	; 1
 9e2:	91 05       	cpc	r25, r1
 9e4:	61 f0       	breq	.+24     	; 0x9fe <EXTI_u8SetSenseControl+0x62>
 9e6:	47 c0       	rjmp	.+142    	; 0xa76 <EXTI_u8SetSenseControl+0xda>
 9e8:	28 85       	ldd	r18, Y+8	; 0x08
 9ea:	39 85       	ldd	r19, Y+9	; 0x09
 9ec:	23 30       	cpi	r18, 0x03	; 3
 9ee:	31 05       	cpc	r19, r1
 9f0:	21 f1       	breq	.+72     	; 0xa3a <EXTI_u8SetSenseControl+0x9e>
 9f2:	88 85       	ldd	r24, Y+8	; 0x08
 9f4:	99 85       	ldd	r25, Y+9	; 0x09
 9f6:	84 30       	cpi	r24, 0x04	; 4
 9f8:	91 05       	cpc	r25, r1
 9fa:	71 f1       	breq	.+92     	; 0xa58 <EXTI_u8SetSenseControl+0xbc>
 9fc:	3c c0       	rjmp	.+120    	; 0xa76 <EXTI_u8SetSenseControl+0xda>
		{
		case EXTI_u8LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_INT0_ISC00); CLR_BIT(MCUCR,MCUCR_INT0_ISC01); break;
 9fe:	a5 e5       	ldi	r26, 0x55	; 85
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	e5 e5       	ldi	r30, 0x55	; 85
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	8e 7f       	andi	r24, 0xFE	; 254
 a0a:	8c 93       	st	X, r24
 a0c:	a5 e5       	ldi	r26, 0x55	; 85
 a0e:	b0 e0       	ldi	r27, 0x00	; 0
 a10:	e5 e5       	ldi	r30, 0x55	; 85
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	80 81       	ld	r24, Z
 a16:	8d 7f       	andi	r24, 0xFD	; 253
 a18:	8c 93       	st	X, r24
 a1a:	bb c0       	rjmp	.+374    	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8_LOGICAL_CHANGE: SET_BIT(MCUCR,MCUCR_INT0_ISC00); CLR_BIT(MCUCR,MCUCR_INT0_ISC01); break;
 a1c:	a5 e5       	ldi	r26, 0x55	; 85
 a1e:	b0 e0       	ldi	r27, 0x00	; 0
 a20:	e5 e5       	ldi	r30, 0x55	; 85
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	81 60       	ori	r24, 0x01	; 1
 a28:	8c 93       	st	X, r24
 a2a:	a5 e5       	ldi	r26, 0x55	; 85
 a2c:	b0 e0       	ldi	r27, 0x00	; 0
 a2e:	e5 e5       	ldi	r30, 0x55	; 85
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	80 81       	ld	r24, Z
 a34:	8d 7f       	andi	r24, 0xFD	; 253
 a36:	8c 93       	st	X, r24
 a38:	ac c0       	rjmp	.+344    	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8FALLING_EDGE: CLR_BIT(MCUCR,MCUCR_INT0_ISC00); SET_BIT(MCUCR,MCUCR_INT0_ISC01); break;
 a3a:	a5 e5       	ldi	r26, 0x55	; 85
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	e5 e5       	ldi	r30, 0x55	; 85
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	8e 7f       	andi	r24, 0xFE	; 254
 a46:	8c 93       	st	X, r24
 a48:	a5 e5       	ldi	r26, 0x55	; 85
 a4a:	b0 e0       	ldi	r27, 0x00	; 0
 a4c:	e5 e5       	ldi	r30, 0x55	; 85
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	80 81       	ld	r24, Z
 a52:	82 60       	ori	r24, 0x02	; 2
 a54:	8c 93       	st	X, r24
 a56:	9d c0       	rjmp	.+314    	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8RISING_EDGE: SET_BIT(MCUCR,MCUCR_INT0_ISC00); SET_BIT(MCUCR,MCUCR_INT0_ISC01);break;
 a58:	a5 e5       	ldi	r26, 0x55	; 85
 a5a:	b0 e0       	ldi	r27, 0x00	; 0
 a5c:	e5 e5       	ldi	r30, 0x55	; 85
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 81       	ld	r24, Z
 a62:	81 60       	ori	r24, 0x01	; 1
 a64:	8c 93       	st	X, r24
 a66:	a5 e5       	ldi	r26, 0x55	; 85
 a68:	b0 e0       	ldi	r27, 0x00	; 0
 a6a:	e5 e5       	ldi	r30, 0x55	; 85
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	80 81       	ld	r24, Z
 a70:	82 60       	ori	r24, 0x02	; 2
 a72:	8c 93       	st	X, r24
 a74:	8e c0       	rjmp	.+284    	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		default: LocalErrorState = NOK; break;
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	89 83       	std	Y+1, r24	; 0x01
 a7a:	8b c0       	rjmp	.+278    	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		}
	}

	else if(Copy_u8Interrupt == EXTI_INT1)
 a7c:	8a 81       	ldd	r24, Y+2	; 0x02
 a7e:	81 30       	cpi	r24, 0x01	; 1
 a80:	09 f0       	breq	.+2      	; 0xa84 <EXTI_u8SetSenseControl+0xe8>
 a82:	5f c0       	rjmp	.+190    	; 0xb42 <EXTI_u8SetSenseControl+0x1a6>
	{
		switch(Copy_u8Sense_Ctrl)
 a84:	8b 81       	ldd	r24, Y+3	; 0x03
 a86:	28 2f       	mov	r18, r24
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	3f 83       	std	Y+7, r19	; 0x07
 a8c:	2e 83       	std	Y+6, r18	; 0x06
 a8e:	8e 81       	ldd	r24, Y+6	; 0x06
 a90:	9f 81       	ldd	r25, Y+7	; 0x07
 a92:	82 30       	cpi	r24, 0x02	; 2
 a94:	91 05       	cpc	r25, r1
 a96:	29 f1       	breq	.+74     	; 0xae2 <EXTI_u8SetSenseControl+0x146>
 a98:	2e 81       	ldd	r18, Y+6	; 0x06
 a9a:	3f 81       	ldd	r19, Y+7	; 0x07
 a9c:	23 30       	cpi	r18, 0x03	; 3
 a9e:	31 05       	cpc	r19, r1
 aa0:	34 f4       	brge	.+12     	; 0xaae <EXTI_u8SetSenseControl+0x112>
 aa2:	8e 81       	ldd	r24, Y+6	; 0x06
 aa4:	9f 81       	ldd	r25, Y+7	; 0x07
 aa6:	81 30       	cpi	r24, 0x01	; 1
 aa8:	91 05       	cpc	r25, r1
 aaa:	61 f0       	breq	.+24     	; 0xac4 <EXTI_u8SetSenseControl+0x128>
 aac:	47 c0       	rjmp	.+142    	; 0xb3c <EXTI_u8SetSenseControl+0x1a0>
 aae:	2e 81       	ldd	r18, Y+6	; 0x06
 ab0:	3f 81       	ldd	r19, Y+7	; 0x07
 ab2:	23 30       	cpi	r18, 0x03	; 3
 ab4:	31 05       	cpc	r19, r1
 ab6:	21 f1       	breq	.+72     	; 0xb00 <EXTI_u8SetSenseControl+0x164>
 ab8:	8e 81       	ldd	r24, Y+6	; 0x06
 aba:	9f 81       	ldd	r25, Y+7	; 0x07
 abc:	84 30       	cpi	r24, 0x04	; 4
 abe:	91 05       	cpc	r25, r1
 ac0:	71 f1       	breq	.+92     	; 0xb1e <EXTI_u8SetSenseControl+0x182>
 ac2:	3c c0       	rjmp	.+120    	; 0xb3c <EXTI_u8SetSenseControl+0x1a0>
		{
		case EXTI_u8LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_INT1_ISC10); CLR_BIT(MCUCR,MCUCR_INT1_ISC11); break;
 ac4:	a5 e5       	ldi	r26, 0x55	; 85
 ac6:	b0 e0       	ldi	r27, 0x00	; 0
 ac8:	e5 e5       	ldi	r30, 0x55	; 85
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	80 81       	ld	r24, Z
 ace:	8b 7f       	andi	r24, 0xFB	; 251
 ad0:	8c 93       	st	X, r24
 ad2:	a5 e5       	ldi	r26, 0x55	; 85
 ad4:	b0 e0       	ldi	r27, 0x00	; 0
 ad6:	e5 e5       	ldi	r30, 0x55	; 85
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	80 81       	ld	r24, Z
 adc:	87 7f       	andi	r24, 0xF7	; 247
 ade:	8c 93       	st	X, r24
 ae0:	58 c0       	rjmp	.+176    	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8_LOGICAL_CHANGE: SET_BIT(MCUCR,MCUCR_INT1_ISC10); CLR_BIT(MCUCR,MCUCR_INT1_ISC11); break;
 ae2:	a5 e5       	ldi	r26, 0x55	; 85
 ae4:	b0 e0       	ldi	r27, 0x00	; 0
 ae6:	e5 e5       	ldi	r30, 0x55	; 85
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	80 81       	ld	r24, Z
 aec:	84 60       	ori	r24, 0x04	; 4
 aee:	8c 93       	st	X, r24
 af0:	a5 e5       	ldi	r26, 0x55	; 85
 af2:	b0 e0       	ldi	r27, 0x00	; 0
 af4:	e5 e5       	ldi	r30, 0x55	; 85
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	80 81       	ld	r24, Z
 afa:	87 7f       	andi	r24, 0xF7	; 247
 afc:	8c 93       	st	X, r24
 afe:	49 c0       	rjmp	.+146    	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8FALLING_EDGE: CLR_BIT(MCUCR,MCUCR_INT1_ISC10); SET_BIT(MCUCR,MCUCR_INT1_ISC11); break;
 b00:	a5 e5       	ldi	r26, 0x55	; 85
 b02:	b0 e0       	ldi	r27, 0x00	; 0
 b04:	e5 e5       	ldi	r30, 0x55	; 85
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	80 81       	ld	r24, Z
 b0a:	8b 7f       	andi	r24, 0xFB	; 251
 b0c:	8c 93       	st	X, r24
 b0e:	a5 e5       	ldi	r26, 0x55	; 85
 b10:	b0 e0       	ldi	r27, 0x00	; 0
 b12:	e5 e5       	ldi	r30, 0x55	; 85
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	88 60       	ori	r24, 0x08	; 8
 b1a:	8c 93       	st	X, r24
 b1c:	3a c0       	rjmp	.+116    	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8RISING_EDGE: SET_BIT(MCUCR,MCUCR_INT1_ISC10); SET_BIT(MCUCR,MCUCR_INT1_ISC11);break;
 b1e:	a5 e5       	ldi	r26, 0x55	; 85
 b20:	b0 e0       	ldi	r27, 0x00	; 0
 b22:	e5 e5       	ldi	r30, 0x55	; 85
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	80 81       	ld	r24, Z
 b28:	84 60       	ori	r24, 0x04	; 4
 b2a:	8c 93       	st	X, r24
 b2c:	a5 e5       	ldi	r26, 0x55	; 85
 b2e:	b0 e0       	ldi	r27, 0x00	; 0
 b30:	e5 e5       	ldi	r30, 0x55	; 85
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	80 81       	ld	r24, Z
 b36:	88 60       	ori	r24, 0x08	; 8
 b38:	8c 93       	st	X, r24
 b3a:	2b c0       	rjmp	.+86     	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		default: LocalErrorState = NOK; break;
 b3c:	81 e0       	ldi	r24, 0x01	; 1
 b3e:	89 83       	std	Y+1, r24	; 0x01
 b40:	28 c0       	rjmp	.+80     	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		}
	}

	else if(Copy_u8Interrupt == EXTI_INT2)
 b42:	8a 81       	ldd	r24, Y+2	; 0x02
 b44:	82 30       	cpi	r24, 0x02	; 2
 b46:	19 f5       	brne	.+70     	; 0xb8e <EXTI_u8SetSenseControl+0x1f2>
	{
		switch(Copy_u8Sense_Ctrl)
 b48:	8b 81       	ldd	r24, Y+3	; 0x03
 b4a:	28 2f       	mov	r18, r24
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	3d 83       	std	Y+5, r19	; 0x05
 b50:	2c 83       	std	Y+4, r18	; 0x04
 b52:	8c 81       	ldd	r24, Y+4	; 0x04
 b54:	9d 81       	ldd	r25, Y+5	; 0x05
 b56:	83 30       	cpi	r24, 0x03	; 3
 b58:	91 05       	cpc	r25, r1
 b5a:	31 f0       	breq	.+12     	; 0xb68 <EXTI_u8SetSenseControl+0x1cc>
 b5c:	2c 81       	ldd	r18, Y+4	; 0x04
 b5e:	3d 81       	ldd	r19, Y+5	; 0x05
 b60:	24 30       	cpi	r18, 0x04	; 4
 b62:	31 05       	cpc	r19, r1
 b64:	49 f0       	breq	.+18     	; 0xb78 <EXTI_u8SetSenseControl+0x1dc>
 b66:	10 c0       	rjmp	.+32     	; 0xb88 <EXTI_u8SetSenseControl+0x1ec>
		{
		case EXTI_u8FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_INT2_ISC2);	break;
 b68:	a4 e5       	ldi	r26, 0x54	; 84
 b6a:	b0 e0       	ldi	r27, 0x00	; 0
 b6c:	e4 e5       	ldi	r30, 0x54	; 84
 b6e:	f0 e0       	ldi	r31, 0x00	; 0
 b70:	80 81       	ld	r24, Z
 b72:	8f 7b       	andi	r24, 0xBF	; 191
 b74:	8c 93       	st	X, r24
 b76:	0d c0       	rjmp	.+26     	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		case EXTI_u8RISING_EDGE: SET_BIT(MCUCSR,MCUCSR_INT2_ISC2);    break;
 b78:	a4 e5       	ldi	r26, 0x54	; 84
 b7a:	b0 e0       	ldi	r27, 0x00	; 0
 b7c:	e4 e5       	ldi	r30, 0x54	; 84
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	80 81       	ld	r24, Z
 b82:	80 64       	ori	r24, 0x40	; 64
 b84:	8c 93       	st	X, r24
 b86:	05 c0       	rjmp	.+10     	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		default: LocalErrorState = NOK; break;
 b88:	81 e0       	ldi	r24, 0x01	; 1
 b8a:	89 83       	std	Y+1, r24	; 0x01
 b8c:	02 c0       	rjmp	.+4      	; 0xb92 <EXTI_u8SetSenseControl+0x1f6>
		}
	}
	else
	{
		LocalErrorState = NOK;
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorState;
 b92:	89 81       	ldd	r24, Y+1	; 0x01


}
 b94:	29 96       	adiw	r28, 0x09	; 9
 b96:	0f b6       	in	r0, 0x3f	; 63
 b98:	f8 94       	cli
 b9a:	de bf       	out	0x3e, r29	; 62
 b9c:	0f be       	out	0x3f, r0	; 63
 b9e:	cd bf       	out	0x3d, r28	; 61
 ba0:	cf 91       	pop	r28
 ba2:	df 91       	pop	r29
 ba4:	08 95       	ret

00000ba6 <EXTI_u8SetCallBack>:




uint8 EXTI_u8SetCallBack(uint8 Copy_u8Interrupt, void (*Copy_pfFuncPtr)(void))
{
 ba6:	df 93       	push	r29
 ba8:	cf 93       	push	r28
 baa:	00 d0       	rcall	.+0      	; 0xbac <EXTI_u8SetCallBack+0x6>
 bac:	00 d0       	rcall	.+0      	; 0xbae <EXTI_u8SetCallBack+0x8>
 bae:	cd b7       	in	r28, 0x3d	; 61
 bb0:	de b7       	in	r29, 0x3e	; 62
 bb2:	8a 83       	std	Y+2, r24	; 0x02
 bb4:	7c 83       	std	Y+4, r23	; 0x04
 bb6:	6b 83       	std	Y+3, r22	; 0x03

	uint8 LocalErrorState = OK;
 bb8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfFuncPtr != NULL)
 bba:	8b 81       	ldd	r24, Y+3	; 0x03
 bbc:	9c 81       	ldd	r25, Y+4	; 0x04
 bbe:	00 97       	sbiw	r24, 0x00	; 0
 bc0:	69 f0       	breq	.+26     	; 0xbdc <EXTI_u8SetCallBack+0x36>
	{
		EXTI_pfINTFuncPrt[Copy_u8Interrupt] = Copy_pfFuncPtr;
 bc2:	8a 81       	ldd	r24, Y+2	; 0x02
 bc4:	88 2f       	mov	r24, r24
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	88 0f       	add	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	fc 01       	movw	r30, r24
 bce:	e0 5a       	subi	r30, 0xA0	; 160
 bd0:	ff 4f       	sbci	r31, 0xFF	; 255
 bd2:	8b 81       	ldd	r24, Y+3	; 0x03
 bd4:	9c 81       	ldd	r25, Y+4	; 0x04
 bd6:	91 83       	std	Z+1, r25	; 0x01
 bd8:	80 83       	st	Z, r24
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <EXTI_u8SetCallBack+0x3a>
	}
	else
	{
		LocalErrorState = NULL_PTR_ERR;
 bdc:	82 e0       	ldi	r24, 0x02	; 2
 bde:	89 83       	std	Y+1, r24	; 0x01
	}


	return LocalErrorState;
 be0:	89 81       	ldd	r24, Y+1	; 0x01

}
 be2:	0f 90       	pop	r0
 be4:	0f 90       	pop	r0
 be6:	0f 90       	pop	r0
 be8:	0f 90       	pop	r0
 bea:	cf 91       	pop	r28
 bec:	df 91       	pop	r29
 bee:	08 95       	ret

00000bf0 <__vector_1>:
/** ISR of INT0**/


void __vector_1 (void) __attribute((signal)); /** For linker to cancel linker optimization**/
void __vector_1 (void)
{
 bf0:	1f 92       	push	r1
 bf2:	0f 92       	push	r0
 bf4:	0f b6       	in	r0, 0x3f	; 63
 bf6:	0f 92       	push	r0
 bf8:	11 24       	eor	r1, r1
 bfa:	2f 93       	push	r18
 bfc:	3f 93       	push	r19
 bfe:	4f 93       	push	r20
 c00:	5f 93       	push	r21
 c02:	6f 93       	push	r22
 c04:	7f 93       	push	r23
 c06:	8f 93       	push	r24
 c08:	9f 93       	push	r25
 c0a:	af 93       	push	r26
 c0c:	bf 93       	push	r27
 c0e:	ef 93       	push	r30
 c10:	ff 93       	push	r31
 c12:	df 93       	push	r29
 c14:	cf 93       	push	r28
 c16:	cd b7       	in	r28, 0x3d	; 61
 c18:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfINTFuncPrt[EXTI_INT0] != NULL)
 c1a:	80 91 60 00 	lds	r24, 0x0060
 c1e:	90 91 61 00 	lds	r25, 0x0061
 c22:	00 97       	sbiw	r24, 0x00	; 0
 c24:	29 f0       	breq	.+10     	; 0xc30 <__vector_1+0x40>
	{
		EXTI_pfINTFuncPrt[EXTI_INT0]();
 c26:	e0 91 60 00 	lds	r30, 0x0060
 c2a:	f0 91 61 00 	lds	r31, 0x0061
 c2e:	09 95       	icall
	}
}
 c30:	cf 91       	pop	r28
 c32:	df 91       	pop	r29
 c34:	ff 91       	pop	r31
 c36:	ef 91       	pop	r30
 c38:	bf 91       	pop	r27
 c3a:	af 91       	pop	r26
 c3c:	9f 91       	pop	r25
 c3e:	8f 91       	pop	r24
 c40:	7f 91       	pop	r23
 c42:	6f 91       	pop	r22
 c44:	5f 91       	pop	r21
 c46:	4f 91       	pop	r20
 c48:	3f 91       	pop	r19
 c4a:	2f 91       	pop	r18
 c4c:	0f 90       	pop	r0
 c4e:	0f be       	out	0x3f, r0	; 63
 c50:	0f 90       	pop	r0
 c52:	1f 90       	pop	r1
 c54:	18 95       	reti

00000c56 <__vector_2>:


/** ISR of INT1**/
void __vector_2 (void) __attribute((signal));
void __vector_2 (void)
{
 c56:	1f 92       	push	r1
 c58:	0f 92       	push	r0
 c5a:	0f b6       	in	r0, 0x3f	; 63
 c5c:	0f 92       	push	r0
 c5e:	11 24       	eor	r1, r1
 c60:	2f 93       	push	r18
 c62:	3f 93       	push	r19
 c64:	4f 93       	push	r20
 c66:	5f 93       	push	r21
 c68:	6f 93       	push	r22
 c6a:	7f 93       	push	r23
 c6c:	8f 93       	push	r24
 c6e:	9f 93       	push	r25
 c70:	af 93       	push	r26
 c72:	bf 93       	push	r27
 c74:	ef 93       	push	r30
 c76:	ff 93       	push	r31
 c78:	df 93       	push	r29
 c7a:	cf 93       	push	r28
 c7c:	cd b7       	in	r28, 0x3d	; 61
 c7e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfINTFuncPrt[EXTI_INT1] != NULL)
 c80:	80 91 62 00 	lds	r24, 0x0062
 c84:	90 91 63 00 	lds	r25, 0x0063
 c88:	00 97       	sbiw	r24, 0x00	; 0
 c8a:	29 f0       	breq	.+10     	; 0xc96 <__vector_2+0x40>
	{
		EXTI_pfINTFuncPrt[EXTI_INT1]();
 c8c:	e0 91 62 00 	lds	r30, 0x0062
 c90:	f0 91 63 00 	lds	r31, 0x0063
 c94:	09 95       	icall
	}
}
 c96:	cf 91       	pop	r28
 c98:	df 91       	pop	r29
 c9a:	ff 91       	pop	r31
 c9c:	ef 91       	pop	r30
 c9e:	bf 91       	pop	r27
 ca0:	af 91       	pop	r26
 ca2:	9f 91       	pop	r25
 ca4:	8f 91       	pop	r24
 ca6:	7f 91       	pop	r23
 ca8:	6f 91       	pop	r22
 caa:	5f 91       	pop	r21
 cac:	4f 91       	pop	r20
 cae:	3f 91       	pop	r19
 cb0:	2f 91       	pop	r18
 cb2:	0f 90       	pop	r0
 cb4:	0f be       	out	0x3f, r0	; 63
 cb6:	0f 90       	pop	r0
 cb8:	1f 90       	pop	r1
 cba:	18 95       	reti

00000cbc <__vector_3>:

/** ISR of INT2**/

void __vector_3 (void) __attribute((signal));
void __vector_3 (void)
{
 cbc:	1f 92       	push	r1
 cbe:	0f 92       	push	r0
 cc0:	0f b6       	in	r0, 0x3f	; 63
 cc2:	0f 92       	push	r0
 cc4:	11 24       	eor	r1, r1
 cc6:	2f 93       	push	r18
 cc8:	3f 93       	push	r19
 cca:	4f 93       	push	r20
 ccc:	5f 93       	push	r21
 cce:	6f 93       	push	r22
 cd0:	7f 93       	push	r23
 cd2:	8f 93       	push	r24
 cd4:	9f 93       	push	r25
 cd6:	af 93       	push	r26
 cd8:	bf 93       	push	r27
 cda:	ef 93       	push	r30
 cdc:	ff 93       	push	r31
 cde:	df 93       	push	r29
 ce0:	cf 93       	push	r28
 ce2:	cd b7       	in	r28, 0x3d	; 61
 ce4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfINTFuncPrt[EXTI_INT2] != NULL)
 ce6:	80 91 64 00 	lds	r24, 0x0064
 cea:	90 91 65 00 	lds	r25, 0x0065
 cee:	00 97       	sbiw	r24, 0x00	; 0
 cf0:	29 f0       	breq	.+10     	; 0xcfc <__vector_3+0x40>
	{
		EXTI_pfINTFuncPrt[EXTI_INT2]();
 cf2:	e0 91 64 00 	lds	r30, 0x0064
 cf6:	f0 91 65 00 	lds	r31, 0x0065
 cfa:	09 95       	icall
	}
}
 cfc:	cf 91       	pop	r28
 cfe:	df 91       	pop	r29
 d00:	ff 91       	pop	r31
 d02:	ef 91       	pop	r30
 d04:	bf 91       	pop	r27
 d06:	af 91       	pop	r26
 d08:	9f 91       	pop	r25
 d0a:	8f 91       	pop	r24
 d0c:	7f 91       	pop	r23
 d0e:	6f 91       	pop	r22
 d10:	5f 91       	pop	r21
 d12:	4f 91       	pop	r20
 d14:	3f 91       	pop	r19
 d16:	2f 91       	pop	r18
 d18:	0f 90       	pop	r0
 d1a:	0f be       	out	0x3f, r0	; 63
 d1c:	0f 90       	pop	r0
 d1e:	1f 90       	pop	r1
 d20:	18 95       	reti

00000d22 <GIE_voidEnableGlobal>:



/** using inline assembly is useful to be more faster in some critical cases**/
void GIE_voidEnableGlobal(void)
{
 d22:	df 93       	push	r29
 d24:	cf 93       	push	r28
 d26:	cd b7       	in	r28, 0x3d	; 61
 d28:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(GIE_SREG,SREG_I);
	 __asm __volatile("SEI");  /** To enable the Global Interrupt**/
 d2a:	78 94       	sei
}
 d2c:	cf 91       	pop	r28
 d2e:	df 91       	pop	r29
 d30:	08 95       	ret

00000d32 <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
 d32:	df 93       	push	r29
 d34:	cf 93       	push	r28
 d36:	cd b7       	in	r28, 0x3d	; 61
 d38:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(GIE_SREG,SREG_I);
	__asm __volatile("CLI");/**To Disable the global interrupt**/
 d3a:	f8 94       	cli
}
 d3c:	cf 91       	pop	r28
 d3e:	df 91       	pop	r29
 d40:	08 95       	ret

00000d42 <SSD_voidInit>:




void SSD_voidInit(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
 d42:	df 93       	push	r29
 d44:	cf 93       	push	r28
 d46:	00 d0       	rcall	.+0      	; 0xd48 <SSD_voidInit+0x6>
 d48:	cd b7       	in	r28, 0x3d	; 61
 d4a:	de b7       	in	r29, 0x3e	; 62
 d4c:	89 83       	std	Y+1, r24	; 0x01
 d4e:	6a 83       	std	Y+2, r22	; 0x02

	DIO_u8SetPinDirection(Copy_u8Port, Copy_u8Pin, DIO_u8PIN_OUTPUT);
 d50:	89 81       	ldd	r24, Y+1	; 0x01
 d52:	6a 81       	ldd	r22, Y+2	; 0x02
 d54:	41 e0       	ldi	r20, 0x01	; 1
 d56:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_u8SetPinDirection>

#if CoMMON_USED == Common_Anode
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8Pin, DIO_u8PIN_LOW);
 d5a:	89 81       	ldd	r24, Y+1	; 0x01
 d5c:	6a 81       	ldd	r22, Y+2	; 0x02
 d5e:	40 e0       	ldi	r20, 0x00	; 0
 d60:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
#elif CoMMON_USED == Common_Cathod
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8Pin, DIO_u8PIN_HIGH);
#endif

}
 d64:	0f 90       	pop	r0
 d66:	0f 90       	pop	r0
 d68:	cf 91       	pop	r28
 d6a:	df 91       	pop	r29
 d6c:	08 95       	ret

00000d6e <SSD_voidDecoderInit>:



void SSD_voidDecoderInit(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
 d6e:	df 93       	push	r29
 d70:	cf 93       	push	r28
 d72:	00 d0       	rcall	.+0      	; 0xd74 <SSD_voidDecoderInit+0x6>
 d74:	cd b7       	in	r28, 0x3d	; 61
 d76:	de b7       	in	r29, 0x3e	; 62
 d78:	89 83       	std	Y+1, r24	; 0x01
 d7a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPortDirection(DIO_u8PORTB, 0b00010111);
 d7c:	81 e0       	ldi	r24, 0x01	; 1
 d7e:	67 e1       	ldi	r22, 0x17	; 23
 d80:	0e 94 fd 02 	call	0x5fa	; 0x5fa <DIO_u8SetPortDirection>
}
 d84:	0f 90       	pop	r0
 d86:	0f 90       	pop	r0
 d88:	cf 91       	pop	r28
 d8a:	df 91       	pop	r29
 d8c:	08 95       	ret

00000d8e <SSD_voidDecoderDisable>:

void SSD_voidDecoderDisable(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
 d8e:	df 93       	push	r29
 d90:	cf 93       	push	r28
 d92:	00 d0       	rcall	.+0      	; 0xd94 <SSD_voidDecoderDisable+0x6>
 d94:	cd b7       	in	r28, 0x3d	; 61
 d96:	de b7       	in	r29, 0x3e	; 62
 d98:	89 83       	std	Y+1, r24	; 0x01
 d9a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPortDirection(DIO_u8PORTB, 0b0000000);
 d9c:	81 e0       	ldi	r24, 0x01	; 1
 d9e:	60 e0       	ldi	r22, 0x00	; 0
 da0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <DIO_u8SetPortDirection>

}
 da4:	0f 90       	pop	r0
 da6:	0f 90       	pop	r0
 da8:	cf 91       	pop	r28
 daa:	df 91       	pop	r29
 dac:	08 95       	ret

00000dae <SSD_u8SSDisplay>:


uint8 SSD_u8SSDisplay(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
 dae:	df 93       	push	r29
 db0:	cf 93       	push	r28
 db2:	00 d0       	rcall	.+0      	; 0xdb4 <SSD_u8SSDisplay+0x6>
 db4:	00 d0       	rcall	.+0      	; 0xdb6 <SSD_u8SSDisplay+0x8>
 db6:	cd b7       	in	r28, 0x3d	; 61
 db8:	de b7       	in	r29, 0x3e	; 62
 dba:	8a 83       	std	Y+2, r24	; 0x02
 dbc:	6b 83       	std	Y+3, r22	; 0x03
 dbe:	4c 83       	std	Y+4, r20	; 0x04

	uint8 dummy = 0;
 dc0:	19 82       	std	Y+1, r1	; 0x01

	dummy = ((0b00000111) & Copy_u8Value);
 dc2:	8c 81       	ldd	r24, Y+4	; 0x04
 dc4:	87 70       	andi	r24, 0x07	; 7
 dc6:	89 83       	std	Y+1, r24	; 0x01
	dummy |=	((GET_BIT(Copy_u8Value,3))<<4);
 dc8:	8c 81       	ldd	r24, Y+4	; 0x04
 dca:	86 95       	lsr	r24
 dcc:	86 95       	lsr	r24
 dce:	86 95       	lsr	r24
 dd0:	88 2f       	mov	r24, r24
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	81 70       	andi	r24, 0x01	; 1
 dd6:	90 70       	andi	r25, 0x00	; 0
 dd8:	82 95       	swap	r24
 dda:	92 95       	swap	r25
 ddc:	90 7f       	andi	r25, 0xF0	; 240
 dde:	98 27       	eor	r25, r24
 de0:	80 7f       	andi	r24, 0xF0	; 240
 de2:	98 27       	eor	r25, r24
 de4:	98 2f       	mov	r25, r24
 de6:	89 81       	ldd	r24, Y+1	; 0x01
 de8:	89 2b       	or	r24, r25
 dea:	89 83       	std	Y+1, r24	; 0x01

	PORTB = dummy;
 dec:	e8 e3       	ldi	r30, 0x38	; 56
 dee:	f0 e0       	ldi	r31, 0x00	; 0
 df0:	89 81       	ldd	r24, Y+1	; 0x01
 df2:	80 83       	st	Z, r24


	return PORTB;
 df4:	e8 e3       	ldi	r30, 0x38	; 56
 df6:	f0 e0       	ldi	r31, 0x00	; 0
 df8:	80 81       	ld	r24, Z
}
 dfa:	0f 90       	pop	r0
 dfc:	0f 90       	pop	r0
 dfe:	0f 90       	pop	r0
 e00:	0f 90       	pop	r0
 e02:	cf 91       	pop	r28
 e04:	df 91       	pop	r29
 e06:	08 95       	ret

00000e08 <main>:

void EXTI0_voidISR(void);
void EXTI1_voidISR(void);

void main(void)
{
 e08:	df 93       	push	r29
 e0a:	cf 93       	push	r28
 e0c:	cd b7       	in	r28, 0x3d	; 61
 e0e:	de b7       	in	r29, 0x3e	; 62

	SSD_voidInit(DIO_u8PORTA, DIO_u8PIN3);/**First 7Seg**/
 e10:	80 e0       	ldi	r24, 0x00	; 0
 e12:	63 e0       	ldi	r22, 0x03	; 3
 e14:	0e 94 a1 06 	call	0xd42	; 0xd42 <SSD_voidInit>
	SSD_voidInit(DIO_u8PORTA, DIO_u8PIN2);/** Second 7Seg**/
 e18:	80 e0       	ldi	r24, 0x00	; 0
 e1a:	62 e0       	ldi	r22, 0x02	; 2
 e1c:	0e 94 a1 06 	call	0xd42	; 0xd42 <SSD_voidInit>

	SSD_voidDecoderInit(DIO_u8PORTA, DIO_u8PIN3);
 e20:	80 e0       	ldi	r24, 0x00	; 0
 e22:	63 e0       	ldi	r22, 0x03	; 3
 e24:	0e 94 b7 06 	call	0xd6e	; 0xd6e <SSD_voidDecoderInit>
	SSD_voidDecoderInit(DIO_u8PORTA, DIO_u8PIN2);
 e28:	80 e0       	ldi	r24, 0x00	; 0
 e2a:	62 e0       	ldi	r22, 0x02	; 2
 e2c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <SSD_voidDecoderInit>


	EXTI_voidINT0Init();
 e30:	0e 94 81 04 	call	0x902	; 0x902 <EXTI_voidINT0Init>
	EXTI_voidINT1Init();
 e34:	0e 94 9d 04 	call	0x93a	; 0x93a <EXTI_voidINT1Init>

	EXTI_u8SetCallBack(EXTI_INT0, &EXTI0_voidISR);
 e38:	26 e3       	ldi	r18, 0x36	; 54
 e3a:	37 e0       	ldi	r19, 0x07	; 7
 e3c:	80 e0       	ldi	r24, 0x00	; 0
 e3e:	b9 01       	movw	r22, r18
 e40:	0e 94 d3 05 	call	0xba6	; 0xba6 <EXTI_u8SetCallBack>
	EXTI_u8SetCallBack(EXTI_INT1, &EXTI1_voidISR);
 e44:	21 e4       	ldi	r18, 0x41	; 65
 e46:	37 e0       	ldi	r19, 0x07	; 7
 e48:	81 e0       	ldi	r24, 0x01	; 1
 e4a:	b9 01       	movw	r22, r18
 e4c:	0e 94 d3 05 	call	0xba6	; 0xba6 <EXTI_u8SetCallBack>
	GIE_voidEnableGlobal();
 e50:	0e 94 91 06 	call	0xd22	; 0xd22 <GIE_voidEnableGlobal>


	while(1)
	{
		SSD_u8SSDisplay(DIO_u8PORTA, DIO_u8PIN3, ones);
 e54:	90 91 66 00 	lds	r25, 0x0066
 e58:	80 e0       	ldi	r24, 0x00	; 0
 e5a:	63 e0       	ldi	r22, 0x03	; 3
 e5c:	49 2f       	mov	r20, r25
 e5e:	0e 94 d7 06 	call	0xdae	; 0xdae <SSD_u8SSDisplay>
		SSD_voidDecoderDisable(DIO_u8PORTA, DIO_u8PIN2);
 e62:	80 e0       	ldi	r24, 0x00	; 0
 e64:	62 e0       	ldi	r22, 0x02	; 2
 e66:	0e 94 c7 06 	call	0xd8e	; 0xd8e <SSD_voidDecoderDisable>
 e6a:	f4 cf       	rjmp	.-24     	; 0xe54 <main+0x4c>

00000e6c <EXTI0_voidISR>:

}


void EXTI0_voidISR(void)
{
 e6c:	df 93       	push	r29
 e6e:	cf 93       	push	r28
 e70:	cd b7       	in	r28, 0x3d	; 61
 e72:	de b7       	in	r29, 0x3e	; 62
	ones = 0;
 e74:	10 92 66 00 	sts	0x0066, r1
	tens = 0;
 e78:	10 92 67 00 	sts	0x0067, r1
}
 e7c:	cf 91       	pop	r28
 e7e:	df 91       	pop	r29
 e80:	08 95       	ret

00000e82 <EXTI1_voidISR>:
void EXTI1_voidISR(void)
{
 e82:	df 93       	push	r29
 e84:	cf 93       	push	r28
 e86:	cd b7       	in	r28, 0x3d	; 61
 e88:	de b7       	in	r29, 0x3e	; 62

	if(tens < 9)
 e8a:	80 91 67 00 	lds	r24, 0x0067
 e8e:	89 30       	cpi	r24, 0x09	; 9
 e90:	30 f4       	brcc	.+12     	; 0xe9e <EXTI1_voidISR+0x1c>
	{
		ones++;
 e92:	80 91 66 00 	lds	r24, 0x0066
 e96:	8f 5f       	subi	r24, 0xFF	; 255
 e98:	80 93 66 00 	sts	0x0066, r24
 e9c:	0b c0       	rjmp	.+22     	; 0xeb4 <EXTI1_voidISR+0x32>
	}
	else if(ones == 9)
 e9e:	80 91 66 00 	lds	r24, 0x0066
 ea2:	89 30       	cpi	r24, 0x09	; 9
 ea4:	39 f4       	brne	.+14     	; 0xeb4 <EXTI1_voidISR+0x32>
	{
		ones = 0 ;
 ea6:	10 92 66 00 	sts	0x0066, r1
		tens++;
 eaa:	80 91 67 00 	lds	r24, 0x0067
 eae:	8f 5f       	subi	r24, 0xFF	; 255
 eb0:	80 93 67 00 	sts	0x0067, r24
	}
	if(tens > 9)
 eb4:	80 91 67 00 	lds	r24, 0x0067
 eb8:	8a 30       	cpi	r24, 0x0A	; 10
 eba:	20 f0       	brcs	.+8      	; 0xec4 <EXTI1_voidISR+0x42>
	{
		ones = 0;
 ebc:	10 92 66 00 	sts	0x0066, r1
		tens = 0;
 ec0:	10 92 67 00 	sts	0x0067, r1
	}

}
 ec4:	cf 91       	pop	r28
 ec6:	df 91       	pop	r29
 ec8:	08 95       	ret

00000eca <_exit>:
 eca:	f8 94       	cli

00000ecc <__stop_program>:
 ecc:	ff cf       	rjmp	.-2      	; 0xecc <__stop_program>
