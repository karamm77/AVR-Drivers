
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d8e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00001d8e  00001e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000016e0  00000000  00000000  00001e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ca8  00000000  00000000  00003504  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000041ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000042ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000445c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000060a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000812d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000088fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <main>
      7a:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <voidSendEnablePulse>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"


static void voidSendEnablePulse(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	62 e0       	ldi	r22, 0x02	; 2
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8SetPinValue>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e4       	ldi	r27, 0x40	; 64
     b5c:	8b 87       	std	Y+11, r24	; 0x0b
     b5e:	9c 87       	std	Y+12, r25	; 0x0c
     b60:	ad 87       	std	Y+13, r26	; 0x0d
     b62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b64:	6b 85       	ldd	r22, Y+11	; 0x0b
     b66:	7c 85       	ldd	r23, Y+12	; 0x0c
     b68:	8d 85       	ldd	r24, Y+13	; 0x0d
     b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	4a e7       	ldi	r20, 0x7A	; 122
     b72:	55 e4       	ldi	r21, 0x45	; 69
     b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	8f 83       	std	Y+7, r24	; 0x07
     b7e:	98 87       	std	Y+8, r25	; 0x08
     b80:	a9 87       	std	Y+9, r26	; 0x09
     b82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b84:	6f 81       	ldd	r22, Y+7	; 0x07
     b86:	78 85       	ldd	r23, Y+8	; 0x08
     b88:	89 85       	ldd	r24, Y+9	; 0x09
     b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e8       	ldi	r20, 0x80	; 128
     b92:	5f e3       	ldi	r21, 0x3F	; 63
     b94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     b98:	88 23       	and	r24, r24
     b9a:	2c f4       	brge	.+10     	; 0xba6 <voidSendEnablePulse+0x70>
		__ticks = 1;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	9e 83       	std	Y+6, r25	; 0x06
     ba2:	8d 83       	std	Y+5, r24	; 0x05
     ba4:	3f c0       	rjmp	.+126    	; 0xc24 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     ba6:	6f 81       	ldd	r22, Y+7	; 0x07
     ba8:	78 85       	ldd	r23, Y+8	; 0x08
     baa:	89 85       	ldd	r24, Y+9	; 0x09
     bac:	9a 85       	ldd	r25, Y+10	; 0x0a
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	3f ef       	ldi	r19, 0xFF	; 255
     bb2:	4f e7       	ldi	r20, 0x7F	; 127
     bb4:	57 e4       	ldi	r21, 0x47	; 71
     bb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bba:	18 16       	cp	r1, r24
     bbc:	4c f5       	brge	.+82     	; 0xc10 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e2       	ldi	r20, 0x20	; 32
     bcc:	51 e4       	ldi	r21, 0x41	; 65
     bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	8d 83       	std	Y+5, r24	; 0x05
     be6:	0f c0       	rjmp	.+30     	; 0xc06 <voidSendEnablePulse+0xd0>
     be8:	80 e9       	ldi	r24, 0x90	; 144
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <voidSendEnablePulse+0xbe>
     bf8:	9c 83       	std	Y+4, r25	; 0x04
     bfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	9e 81       	ldd	r25, Y+6	; 0x06
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	9e 83       	std	Y+6, r25	; 0x06
     c04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	69 f7       	brne	.-38     	; 0xbe8 <voidSendEnablePulse+0xb2>
     c0e:	14 c0       	rjmp	.+40     	; 0xc38 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <voidSendEnablePulse+0xfa>
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8SetPinValue>
}
     c42:	2e 96       	adiw	r28, 0x0e	; 14
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <voidSetLCDHalfDataPort>:


static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	0f 92       	push	r0
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	98 2f       	mov	r25, r24
     c64:	91 70       	andi	r25, 0x01	; 1
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	49 2f       	mov	r20, r25
     c6c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	86 95       	lsr	r24
     c74:	98 2f       	mov	r25, r24
     c76:	91 70       	andi	r25, 0x01	; 1
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	49 2f       	mov	r20, r25
     c7e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	86 95       	lsr	r24
     c86:	86 95       	lsr	r24
     c88:	98 2f       	mov	r25, r24
     c8a:	91 70       	andi	r25, 0x01	; 1
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	62 e0       	ldi	r22, 0x02	; 2
     c90:	49 2f       	mov	r20, r25
     c92:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	86 95       	lsr	r24
     c9a:	86 95       	lsr	r24
     c9c:	86 95       	lsr	r24
     c9e:	98 2f       	mov	r25, r24
     ca0:	91 70       	andi	r25, 0x01	; 1
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	64 e0       	ldi	r22, 0x04	; 4
     ca6:	49 2f       	mov	r20, r25
     ca8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8SetPinValue>
}
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <CLCD_voidSendCmd>:


void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	63 e0       	ldi	r22, 0x03	; 3
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	82 95       	swap	r24
     cce:	8f 70       	andi	r24, 0x0F	; 15
     cd0:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cd4:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     cde:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
#endif
}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	0f 92       	push	r0
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	63 e0       	ldi	r22, 0x03	; 3
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	82 95       	swap	r24
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d0a:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     d14:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
#endif

}
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	2e 97       	sbiw	r28, 0x0e	; 14
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61

	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN3, DIO_u8PIN_OUTPUT); //RS
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	63 e0       	ldi	r22, 0x03	; 3
     d38:	41 e0       	ldi	r20, 0x01	; 1
     d3a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN2, DIO_u8PIN_OUTPUT);//E
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_OUTPUT);//D4
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN1, DIO_u8PIN_OUTPUT);//D4
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN2, DIO_u8PIN_OUTPUT);//D4
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	62 e0       	ldi	r22, 0x02	; 2
     d60:	41 e0       	ldi	r20, 0x01	; 1
     d62:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN4, DIO_u8PIN_OUTPUT);//D4
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	64 e0       	ldi	r22, 0x04	; 4
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_u8SetPinDirection>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a0 e2       	ldi	r26, 0x20	; 32
     d76:	b2 e4       	ldi	r27, 0x42	; 66
     d78:	8b 87       	std	Y+11, r24	; 0x0b
     d7a:	9c 87       	std	Y+12, r25	; 0x0c
     d7c:	ad 87       	std	Y+13, r26	; 0x0d
     d7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d80:	6b 85       	ldd	r22, Y+11	; 0x0b
     d82:	7c 85       	ldd	r23, Y+12	; 0x0c
     d84:	8d 85       	ldd	r24, Y+13	; 0x0d
     d86:	9e 85       	ldd	r25, Y+14	; 0x0e
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	4a e7       	ldi	r20, 0x7A	; 122
     d8e:	55 e4       	ldi	r21, 0x45	; 69
     d90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	8f 83       	std	Y+7, r24	; 0x07
     d9a:	98 87       	std	Y+8, r25	; 0x08
     d9c:	a9 87       	std	Y+9, r26	; 0x09
     d9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     da0:	6f 81       	ldd	r22, Y+7	; 0x07
     da2:	78 85       	ldd	r23, Y+8	; 0x08
     da4:	89 85       	ldd	r24, Y+9	; 0x09
     da6:	9a 85       	ldd	r25, Y+10	; 0x0a
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e8       	ldi	r20, 0x80	; 128
     dae:	5f e3       	ldi	r21, 0x3F	; 63
     db0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     db4:	88 23       	and	r24, r24
     db6:	2c f4       	brge	.+10     	; 0xdc2 <CLCD_voidInit+0xa2>
		__ticks = 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	9e 83       	std	Y+6, r25	; 0x06
     dbe:	8d 83       	std	Y+5, r24	; 0x05
     dc0:	3f c0       	rjmp	.+126    	; 0xe40 <CLCD_voidInit+0x120>
	else if (__tmp > 65535)
     dc2:	6f 81       	ldd	r22, Y+7	; 0x07
     dc4:	78 85       	ldd	r23, Y+8	; 0x08
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	57 e4       	ldi	r21, 0x47	; 71
     dd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	4c f5       	brge	.+82     	; 0xe2c <CLCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dda:	6b 85       	ldd	r22, Y+11	; 0x0b
     ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dde:	8d 85       	ldd	r24, Y+13	; 0x0d
     de0:	9e 85       	ldd	r25, Y+14	; 0x0e
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e2       	ldi	r20, 0x20	; 32
     de8:	51 e4       	ldi	r21, 0x41	; 65
     dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	bc 01       	movw	r22, r24
     df4:	cd 01       	movw	r24, r26
     df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	9e 83       	std	Y+6, r25	; 0x06
     e00:	8d 83       	std	Y+5, r24	; 0x05
     e02:	0f c0       	rjmp	.+30     	; 0xe22 <CLCD_voidInit+0x102>
     e04:	80 e9       	ldi	r24, 0x90	; 144
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	9c 83       	std	Y+4, r25	; 0x04
     e0a:	8b 83       	std	Y+3, r24	; 0x03
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	9c 81       	ldd	r25, Y+4	; 0x04
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <CLCD_voidInit+0xf0>
     e14:	9c 83       	std	Y+4, r25	; 0x04
     e16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e18:	8d 81       	ldd	r24, Y+5	; 0x05
     e1a:	9e 81       	ldd	r25, Y+6	; 0x06
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e22:	8d 81       	ldd	r24, Y+5	; 0x05
     e24:	9e 81       	ldd	r25, Y+6	; 0x06
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	69 f7       	brne	.-38     	; 0xe04 <CLCD_voidInit+0xe4>
     e2a:	14 c0       	rjmp	.+40     	; 0xe54 <CLCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2c:	6f 81       	ldd	r22, Y+7	; 0x07
     e2e:	78 85       	ldd	r23, Y+8	; 0x08
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9e 83       	std	Y+6, r25	; 0x06
     e3e:	8d 83       	std	Y+5, r24	; 0x05
     e40:	8d 81       	ldd	r24, Y+5	; 0x05
     e42:	9e 81       	ldd	r25, Y+6	; 0x06
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <CLCD_voidInit+0x12c>
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e5a:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e64:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
     e68:	88 e0       	ldi	r24, 0x08	; 8
     e6a:	0e 94 2a 06 	call	0xc54	; 0xc54 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e6e:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
     e72:	8c e0       	ldi	r24, 0x0C	; 12
     e74:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
}
     e7e:	2e 96       	adiw	r28, 0x0e	; 14
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <CLCD_u8SendString>:


uint8 CLCD_u8SendString(const char* Copy_chString)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <CLCD_u8SendString+0x6>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <CLCD_u8SendString+0x8>
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	9c 83       	std	Y+4, r25	; 0x04
     e9e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState= OK;
     ea0:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chString != NULL)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	e1 f0       	breq	.+56     	; 0xee2 <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Counter=0u;
     eaa:	19 82       	std	Y+1, r1	; 0x01
     eac:	0e c0       	rjmp	.+28     	; 0xeca <CLCD_u8SendString+0x3a>
		while(Copy_chString[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	fc 01       	movw	r30, r24
     eba:	e2 0f       	add	r30, r18
     ebc:	f3 1f       	adc	r31, r19
     ebe:	80 81       	ld	r24, Z
     ec0:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
			Local_u8Counter++;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
     ec8:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState= OK;
	if(Copy_chString != NULL)
	{
		uint8 Local_u8Counter=0u;
		while(Copy_chString[Local_u8Counter] != '\0')
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	fc 01       	movw	r30, r24
     ed6:	e2 0f       	add	r30, r18
     ed8:	f3 1f       	adc	r31, r19
     eda:	80 81       	ld	r24, Z
     edc:	88 23       	and	r24, r24
     ede:	39 f7       	brne	.-50     	; 0xeae <CLCD_u8SendString+0x1e>
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	61 97       	sbiw	r28, 0x11	; 17
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	6e 87       	std	Y+14, r22	; 0x0e
     f0c:	7f 87       	std	Y+15, r23	; 0x0f
     f0e:	88 8b       	std	Y+16, r24	; 0x10
     f10:	99 8b       	std	Y+17, r25	; 0x11
	char Local_u8ChArr[10];
	uint8 Local_RightDigit;
	uint8 Local_u32Counter1 = 0;
     f12:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_u32Counter2 = 0;
     f14:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_s32Number == 0)
     f16:	8e 85       	ldd	r24, Y+14	; 0x0e
     f18:	9f 85       	ldd	r25, Y+15	; 0x0f
     f1a:	a8 89       	ldd	r26, Y+16	; 0x10
     f1c:	b9 89       	ldd	r27, Y+17	; 0x11
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	a1 05       	cpc	r26, r1
     f22:	b1 05       	cpc	r27, r1
     f24:	21 f4       	brne	.+8      	; 0xf2e <CLCD_voidSendNumber+0x38>
	{
		CLCD_voidSendData('0');
     f26:	80 e3       	ldi	r24, 0x30	; 48
     f28:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
     f2c:	69 c0       	rjmp	.+210    	; 0x1000 <CLCD_voidSendNumber+0x10a>
		return;
	}
	else if (Copy_s32Number < 0)
     f2e:	8e 85       	ldd	r24, Y+14	; 0x0e
     f30:	9f 85       	ldd	r25, Y+15	; 0x0f
     f32:	a8 89       	ldd	r26, Y+16	; 0x10
     f34:	b9 89       	ldd	r27, Y+17	; 0x11
     f36:	bb 23       	and	r27, r27
     f38:	0c f0       	brlt	.+2      	; 0xf3c <CLCD_voidSendNumber+0x46>
     f3a:	43 c0       	rjmp	.+134    	; 0xfc2 <CLCD_voidSendNumber+0xcc>
	{
		CLCD_voidSendData('-');
     f3c:	8d e2       	ldi	r24, 0x2D	; 45
     f3e:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
		Copy_s32Number *= -1;
     f42:	8e 85       	ldd	r24, Y+14	; 0x0e
     f44:	9f 85       	ldd	r25, Y+15	; 0x0f
     f46:	a8 89       	ldd	r26, Y+16	; 0x10
     f48:	b9 89       	ldd	r27, Y+17	; 0x11
     f4a:	b0 95       	com	r27
     f4c:	a0 95       	com	r26
     f4e:	90 95       	com	r25
     f50:	81 95       	neg	r24
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	af 4f       	sbci	r26, 0xFF	; 255
     f56:	bf 4f       	sbci	r27, 0xFF	; 255
     f58:	8e 87       	std	Y+14, r24	; 0x0e
     f5a:	9f 87       	std	Y+15, r25	; 0x0f
     f5c:	a8 8b       	std	Y+16, r26	; 0x10
     f5e:	b9 8b       	std	Y+17, r27	; 0x11
     f60:	30 c0       	rjmp	.+96     	; 0xfc2 <CLCD_voidSendNumber+0xcc>
	}

	while (Copy_s32Number != 0)
	{
		Local_RightDigit = Copy_s32Number % 10;
     f62:	8e 85       	ldd	r24, Y+14	; 0x0e
     f64:	9f 85       	ldd	r25, Y+15	; 0x0f
     f66:	a8 89       	ldd	r26, Y+16	; 0x10
     f68:	b9 89       	ldd	r27, Y+17	; 0x11
     f6a:	2a e0       	ldi	r18, 0x0A	; 10
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	bc 01       	movw	r22, r24
     f74:	cd 01       	movw	r24, r26
     f76:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__divmodsi4>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number /= 10;
     f80:	8e 85       	ldd	r24, Y+14	; 0x0e
     f82:	9f 85       	ldd	r25, Y+15	; 0x0f
     f84:	a8 89       	ldd	r26, Y+16	; 0x10
     f86:	b9 89       	ldd	r27, Y+17	; 0x11
     f88:	2a e0       	ldi	r18, 0x0A	; 10
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__divmodsi4>
     f98:	da 01       	movw	r26, r20
     f9a:	c9 01       	movw	r24, r18
     f9c:	8e 87       	std	Y+14, r24	; 0x0e
     f9e:	9f 87       	std	Y+15, r25	; 0x0f
     fa0:	a8 8b       	std	Y+16, r26	; 0x10
     fa2:	b9 8b       	std	Y+17, r27	; 0x11
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	48 2f       	mov	r20, r24
     fae:	40 5d       	subi	r20, 0xD0	; 208
     fb0:	ce 01       	movw	r24, r28
     fb2:	04 96       	adiw	r24, 0x04	; 4
     fb4:	fc 01       	movw	r30, r24
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	40 83       	st	Z, r20
		Local_u32Counter1++;
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('-');
		Copy_s32Number *= -1;
	}

	while (Copy_s32Number != 0)
     fc2:	8e 85       	ldd	r24, Y+14	; 0x0e
     fc4:	9f 85       	ldd	r25, Y+15	; 0x0f
     fc6:	a8 89       	ldd	r26, Y+16	; 0x10
     fc8:	b9 89       	ldd	r27, Y+17	; 0x11
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	a1 05       	cpc	r26, r1
     fce:	b1 05       	cpc	r27, r1
     fd0:	41 f6       	brne	.-112    	; 0xf62 <CLCD_voidSendNumber+0x6c>
		Copy_s32Number /= 10;
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
		Local_u32Counter1++;
	}

	for (Local_u32Counter2 = Local_u32Counter1 - 1; Local_u32Counter2 >= 0; Local_u32Counter2--)
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	81 50       	subi	r24, 0x01	; 1
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	10 c0       	rjmp	.+32     	; 0xffa <CLCD_voidSendNumber+0x104>
	{
		CLCD_voidSendData(Local_u8ChArr[Local_u32Counter2]);
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	33 27       	eor	r19, r19
     fe0:	27 fd       	sbrc	r18, 7
     fe2:	30 95       	com	r19
     fe4:	ce 01       	movw	r24, r28
     fe6:	04 96       	adiw	r24, 0x04	; 4
     fe8:	fc 01       	movw	r30, r24
     fea:	e2 0f       	add	r30, r18
     fec:	f3 1f       	adc	r31, r19
     fee:	80 81       	ld	r24, Z
     ff0:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
		Copy_s32Number /= 10;
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
		Local_u32Counter1++;
	}

	for (Local_u32Counter2 = Local_u32Counter1 - 1; Local_u32Counter2 >= 0; Local_u32Counter2--)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	81 50       	subi	r24, 0x01	; 1
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	88 23       	and	r24, r24
     ffe:	6c f7       	brge	.-38     	; 0xfda <CLCD_voidSendNumber+0xe4>
	{
		CLCD_voidSendData(Local_u8ChArr[Local_u32Counter2]);
	}
}
    1000:	61 96       	adiw	r28, 0x11	; 17
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <CLCD_voidGoToXY>:


/************************ Go to x and y Simple *****************/

void CLCD_voidGoToXY(uint8 Copy_u8Row,uint8 Copy_u8Col)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <CLCD_voidGoToXY+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <CLCD_voidGoToXY+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_Address;

	switch(Copy_u8Row)
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3d 83       	std	Y+5, r19	; 0x05
    102c:	2c 83       	std	Y+4, r18	; 0x04
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	c1 f0       	breq	.+48     	; 0x1068 <CLCD_voidGoToXY+0x56>
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	2c f4       	brge	.+10     	; 0x104c <CLCD_voidGoToXY+0x3a>
    1042:	8c 81       	ldd	r24, Y+4	; 0x04
    1044:	9d 81       	ldd	r25, Y+5	; 0x05
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	61 f0       	breq	.+24     	; 0x1062 <CLCD_voidGoToXY+0x50>
    104a:	19 c0       	rjmp	.+50     	; 0x107e <CLCD_voidGoToXY+0x6c>
    104c:	2c 81       	ldd	r18, Y+4	; 0x04
    104e:	3d 81       	ldd	r19, Y+5	; 0x05
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	69 f0       	breq	.+26     	; 0x1070 <CLCD_voidGoToXY+0x5e>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	91 05       	cpc	r25, r1
    105e:	61 f0       	breq	.+24     	; 0x1078 <CLCD_voidGoToXY+0x66>
    1060:	0e c0       	rjmp	.+28     	; 0x107e <CLCD_voidGoToXY+0x6c>
	{
	case 0: Local_Address = 0x00+Copy_u8Col;	break;
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	0b c0       	rjmp	.+22     	; 0x107e <CLCD_voidGoToXY+0x6c>
	case 1: Local_Address = 0x40+Copy_u8Col;	break;
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	80 5c       	subi	r24, 0xC0	; 192
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	07 c0       	rjmp	.+14     	; 0x107e <CLCD_voidGoToXY+0x6c>
	case 2: Local_Address = 0x14+Copy_u8Col;	break;
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	8c 5e       	subi	r24, 0xEC	; 236
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	03 c0       	rjmp	.+6      	; 0x107e <CLCD_voidGoToXY+0x6c>
	case 3: Local_Address = 0x54+Copy_u8Col;	break;
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	8c 5a       	subi	r24, 0xAC	; 172
    107c:	89 83       	std	Y+1, r24	; 0x01

	}

	CLCD_voidSendCmd(Local_Address+DDRAM_ADDRESS);
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	80 58       	subi	r24, 0x80	; 128
    1082:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>


}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <CLCD_voidClrScr>:



void CLCD_voidClrScr(void)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
}
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <CLCD_voidCursorON>:
void CLCD_voidCursorON(void)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x0D);
    10b2:	8d e0       	ldi	r24, 0x0D	; 13
    10b4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <CLCD_voidCursorOFF>:
void CLCD_voidCursorOFF(void)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(0x0C);
    10c6:	8c e0       	ldi	r24, 0x0C	; 12
    10c8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

}
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <DIO_u8SetPinValue>:
#include"DIO_prv.h"
#include"DIO_reg.h"


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)//which port we want to srt, and which pin
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	28 97       	sbiw	r28, 0x08	; 8
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	8a 83       	std	Y+2, r24	; 0x02
    10e8:	6b 83       	std	Y+3, r22	; 0x03
    10ea:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    10ec:	19 82       	std	Y+1, r1	; 0x01

		if (Copy_u8Pin <= DIO_u8PIN7)
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	88 30       	cpi	r24, 0x08	; 8
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <DIO_u8SetPinValue+0x24>
    10f4:	f4 c0       	rjmp	.+488    	; 0x12de <DIO_u8SetPinValue+0x20c>
		{
			if(Copy_u8Value == DIO_u8PIN_LOW)
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	88 23       	and	r24, r24
    10fa:	09 f0       	breq	.+2      	; 0x10fe <DIO_u8SetPinValue+0x2c>
    10fc:	77 c0       	rjmp	.+238    	; 0x11ec <DIO_u8SetPinValue+0x11a>
			{
				switch(Copy_u8Port)//which port you want it as input
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	38 87       	std	Y+8, r19	; 0x08
    1106:	2f 83       	std	Y+7, r18	; 0x07
    1108:	8f 81       	ldd	r24, Y+7	; 0x07
    110a:	98 85       	ldd	r25, Y+8	; 0x08
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	59 f1       	breq	.+86     	; 0x1168 <DIO_u8SetPinValue+0x96>
    1112:	2f 81       	ldd	r18, Y+7	; 0x07
    1114:	38 85       	ldd	r19, Y+8	; 0x08
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	2c f4       	brge	.+10     	; 0x1126 <DIO_u8SetPinValue+0x54>
    111c:	8f 81       	ldd	r24, Y+7	; 0x07
    111e:	98 85       	ldd	r25, Y+8	; 0x08
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	69 f0       	breq	.+26     	; 0x113e <DIO_u8SetPinValue+0x6c>
    1124:	60 c0       	rjmp	.+192    	; 0x11e6 <DIO_u8SetPinValue+0x114>
    1126:	2f 81       	ldd	r18, Y+7	; 0x07
    1128:	38 85       	ldd	r19, Y+8	; 0x08
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	89 f1       	breq	.+98     	; 0x1192 <DIO_u8SetPinValue+0xc0>
    1130:	8f 81       	ldd	r24, Y+7	; 0x07
    1132:	98 85       	ldd	r25, Y+8	; 0x08
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	91 05       	cpc	r25, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <DIO_u8SetPinValue+0x6a>
    113a:	40 c0       	rjmp	.+128    	; 0x11bc <DIO_u8SetPinValue+0xea>
    113c:	54 c0       	rjmp	.+168    	; 0x11e6 <DIO_u8SetPinValue+0x114>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    113e:	ab e3       	ldi	r26, 0x3B	; 59
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e3       	ldi	r30, 0x3B	; 59
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_u8SetPinValue+0x8a>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_u8SetPinValue+0x86>
    1160:	80 95       	com	r24
    1162:	84 23       	and	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	bd c0       	rjmp	.+378    	; 0x12e2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1168:	a8 e3       	ldi	r26, 0x38	; 56
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e8 e3       	ldi	r30, 0x38	; 56
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_u8SetPinValue+0xb4>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_u8SetPinValue+0xb0>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	a8 c0       	rjmp	.+336    	; 0x12e2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1192:	a5 e3       	ldi	r26, 0x35	; 53
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e5 e3       	ldi	r30, 0x35	; 53
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8SetPinValue+0xde>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8SetPinValue+0xda>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	93 c0       	rjmp	.+294    	; 0x12e2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    11bc:	a2 e3       	ldi	r26, 0x32	; 50
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e2 e3       	ldi	r30, 0x32	; 50
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_u8SetPinValue+0x108>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_u8SetPinValue+0x104>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	7e c0       	rjmp	.+252    	; 0x12e2 <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState = NOK; break;//Not any port
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	7b c0       	rjmp	.+246    	; 0x12e2 <DIO_u8SetPinValue+0x210>
				}
			}
			else if(Copy_u8Value == DIO_u8PIN_HIGH)
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <DIO_u8SetPinValue+0x122>
    11f2:	72 c0       	rjmp	.+228    	; 0x12d8 <DIO_u8SetPinValue+0x206>
			{
				switch(Copy_u8Port)//which port you want it as input
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3e 83       	std	Y+6, r19	; 0x06
    11fc:	2d 83       	std	Y+5, r18	; 0x05
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	9e 81       	ldd	r25, Y+6	; 0x06
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	49 f1       	breq	.+82     	; 0x125a <DIO_u8SetPinValue+0x188>
    1208:	2d 81       	ldd	r18, Y+5	; 0x05
    120a:	3e 81       	ldd	r19, Y+6	; 0x06
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	2c f4       	brge	.+10     	; 0x121c <DIO_u8SetPinValue+0x14a>
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	61 f0       	breq	.+24     	; 0x1232 <DIO_u8SetPinValue+0x160>
    121a:	5b c0       	rjmp	.+182    	; 0x12d2 <DIO_u8SetPinValue+0x200>
    121c:	2d 81       	ldd	r18, Y+5	; 0x05
    121e:	3e 81       	ldd	r19, Y+6	; 0x06
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	71 f1       	breq	.+92     	; 0x1282 <DIO_u8SetPinValue+0x1b0>
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	e9 f1       	breq	.+122    	; 0x12aa <DIO_u8SetPinValue+0x1d8>
    1230:	50 c0       	rjmp	.+160    	; 0x12d2 <DIO_u8SetPinValue+0x200>
				{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1232:	ab e3       	ldi	r26, 0x3B	; 59
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e3       	ldi	r30, 0x3B	; 59
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_u8SetPinValue+0x17e>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_u8SetPinValue+0x17a>
    1254:	84 2b       	or	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	44 c0       	rjmp	.+136    	; 0x12e2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    125a:	a8 e3       	ldi	r26, 0x38	; 56
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e8 e3       	ldi	r30, 0x38	; 56
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_u8SetPinValue+0x1a6>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_u8SetPinValue+0x1a2>
    127c:	84 2b       	or	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	30 c0       	rjmp	.+96     	; 0x12e2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1282:	a5 e3       	ldi	r26, 0x35	; 53
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e5 e3       	ldi	r30, 0x35	; 53
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_u8SetPinValue+0x1ce>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_u8SetPinValue+0x1ca>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	1c c0       	rjmp	.+56     	; 0x12e2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    12aa:	a2 e3       	ldi	r26, 0x32	; 50
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e2 e3       	ldi	r30, 0x32	; 50
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_u8SetPinValue+0x1f6>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_u8SetPinValue+0x1f2>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState = NOK; break;//Not any port
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <DIO_u8SetPinValue+0x210>
				}
			}
			else
			{
				Local_u8ErrorState = NOK;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	89 83       	std	Y+1, r24	; 0x01
		}


		return Local_u8ErrorState;
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e4:	28 96       	adiw	r28, 0x08	; 8
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <DIO_u8SetPinDirection>:




uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)//which port we want to srt, and which pin
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	28 97       	sbiw	r28, 0x08	; 8
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	8a 83       	std	Y+2, r24	; 0x02
    130c:	6b 83       	std	Y+3, r22	; 0x03
    130e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1310:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	88 30       	cpi	r24, 0x08	; 8
    1316:	08 f0       	brcs	.+2      	; 0x131a <DIO_u8SetPinDirection+0x24>
    1318:	f4 c0       	rjmp	.+488    	; 0x1502 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	88 23       	and	r24, r24
    131e:	09 f0       	breq	.+2      	; 0x1322 <DIO_u8SetPinDirection+0x2c>
    1320:	77 c0       	rjmp	.+238    	; 0x1410 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)//which port you want it as input
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	38 87       	std	Y+8, r19	; 0x08
    132a:	2f 83       	std	Y+7, r18	; 0x07
    132c:	8f 81       	ldd	r24, Y+7	; 0x07
    132e:	98 85       	ldd	r25, Y+8	; 0x08
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	91 05       	cpc	r25, r1
    1334:	59 f1       	breq	.+86     	; 0x138c <DIO_u8SetPinDirection+0x96>
    1336:	2f 81       	ldd	r18, Y+7	; 0x07
    1338:	38 85       	ldd	r19, Y+8	; 0x08
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	2c f4       	brge	.+10     	; 0x134a <DIO_u8SetPinDirection+0x54>
    1340:	8f 81       	ldd	r24, Y+7	; 0x07
    1342:	98 85       	ldd	r25, Y+8	; 0x08
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	69 f0       	breq	.+26     	; 0x1362 <DIO_u8SetPinDirection+0x6c>
    1348:	60 c0       	rjmp	.+192    	; 0x140a <DIO_u8SetPinDirection+0x114>
    134a:	2f 81       	ldd	r18, Y+7	; 0x07
    134c:	38 85       	ldd	r19, Y+8	; 0x08
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	89 f1       	breq	.+98     	; 0x13b6 <DIO_u8SetPinDirection+0xc0>
    1354:	8f 81       	ldd	r24, Y+7	; 0x07
    1356:	98 85       	ldd	r25, Y+8	; 0x08
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <DIO_u8SetPinDirection+0x6a>
    135e:	40 c0       	rjmp	.+128    	; 0x13e0 <DIO_u8SetPinDirection+0xea>
    1360:	54 c0       	rjmp	.+168    	; 0x140a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    1362:	aa e3       	ldi	r26, 0x3A	; 58
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ea e3       	ldi	r30, 0x3A	; 58
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_u8SetPinDirection+0x8a>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_u8SetPinDirection+0x86>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	bd c0       	rjmp	.+378    	; 0x1506 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    138c:	a7 e3       	ldi	r26, 0x37	; 55
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e7 e3       	ldi	r30, 0x37	; 55
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_u8SetPinDirection+0xb4>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_u8SetPinDirection+0xb0>
    13ae:	80 95       	com	r24
    13b0:	84 23       	and	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	a8 c0       	rjmp	.+336    	; 0x1506 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    13b6:	a4 e3       	ldi	r26, 0x34	; 52
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e4 e3       	ldi	r30, 0x34	; 52
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_u8SetPinDirection+0xde>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_u8SetPinDirection+0xda>
    13d8:	80 95       	com	r24
    13da:	84 23       	and	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	93 c0       	rjmp	.+294    	; 0x1506 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    13e0:	a1 e3       	ldi	r26, 0x31	; 49
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e1 e3       	ldi	r30, 0x31	; 49
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_u8SetPinDirection+0x108>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_u8SetPinDirection+0x104>
    1402:	80 95       	com	r24
    1404:	84 23       	and	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	7e c0       	rjmp	.+252    	; 0x1506 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;//Not any port
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	7b c0       	rjmp	.+246    	; 0x1506 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	09 f0       	breq	.+2      	; 0x1418 <DIO_u8SetPinDirection+0x122>
    1416:	72 c0       	rjmp	.+228    	; 0x14fc <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)//which port you want it as input
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	3e 83       	std	Y+6, r19	; 0x06
    1420:	2d 83       	std	Y+5, r18	; 0x05
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	91 05       	cpc	r25, r1
    142a:	49 f1       	breq	.+82     	; 0x147e <DIO_u8SetPinDirection+0x188>
    142c:	2d 81       	ldd	r18, Y+5	; 0x05
    142e:	3e 81       	ldd	r19, Y+6	; 0x06
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	2c f4       	brge	.+10     	; 0x1440 <DIO_u8SetPinDirection+0x14a>
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	9e 81       	ldd	r25, Y+6	; 0x06
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	61 f0       	breq	.+24     	; 0x1456 <DIO_u8SetPinDirection+0x160>
    143e:	5b c0       	rjmp	.+182    	; 0x14f6 <DIO_u8SetPinDirection+0x200>
    1440:	2d 81       	ldd	r18, Y+5	; 0x05
    1442:	3e 81       	ldd	r19, Y+6	; 0x06
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	71 f1       	breq	.+92     	; 0x14a6 <DIO_u8SetPinDirection+0x1b0>
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	91 05       	cpc	r25, r1
    1452:	e9 f1       	breq	.+122    	; 0x14ce <DIO_u8SetPinDirection+0x1d8>
    1454:	50 c0       	rjmp	.+160    	; 0x14f6 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    1456:	aa e3       	ldi	r26, 0x3A	; 58
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ea e3       	ldi	r30, 0x3A	; 58
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_u8SetPinDirection+0x17e>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_u8SetPinDirection+0x17a>
    1478:	84 2b       	or	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	44 c0       	rjmp	.+136    	; 0x1506 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    147e:	a7 e3       	ldi	r26, 0x37	; 55
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e7 e3       	ldi	r30, 0x37	; 55
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_u8SetPinDirection+0x1a6>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_u8SetPinDirection+0x1a2>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	30 c0       	rjmp	.+96     	; 0x1506 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    14a6:	a4 e3       	ldi	r26, 0x34	; 52
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e4 e3       	ldi	r30, 0x34	; 52
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_u8SetPinDirection+0x1ce>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_u8SetPinDirection+0x1ca>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	1c c0       	rjmp	.+56     	; 0x1506 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    14ce:	a1 e3       	ldi	r26, 0x31	; 49
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e1 e3       	ldi	r30, 0x31	; 49
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_u8SetPinDirection+0x1f6>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_u8SetPinDirection+0x1f2>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	08 c0       	rjmp	.+16     	; 0x1506 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;//Not any port
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	05 c0       	rjmp	.+10     	; 0x1506 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
}
    1508:	28 96       	adiw	r28, 0x08	; 8
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <DIO_u8GetPinValue>:


uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)//which port we want to srt, and which pin
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	27 97       	sbiw	r28, 0x07	; 7
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	8a 83       	std	Y+2, r24	; 0x02
    1530:	6b 83       	std	Y+3, r22	; 0x03
    1532:	5d 83       	std	Y+5, r21	; 0x05
    1534:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1536:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	09 f4       	brne	.+2      	; 0x1542 <DIO_u8GetPinValue+0x28>
    1540:	7b c0       	rjmp	.+246    	; 0x1638 <DIO_u8GetPinValue+0x11e>
	{
		if( Copy_u8Pin <= DIO_u8PIN7)
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	88 30       	cpi	r24, 0x08	; 8
    1546:	08 f0       	brcs	.+2      	; 0x154a <DIO_u8GetPinValue+0x30>
    1548:	74 c0       	rjmp	.+232    	; 0x1632 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)//which port you want it as input
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3f 83       	std	Y+7, r19	; 0x07
    1552:	2e 83       	std	Y+6, r18	; 0x06
    1554:	4e 81       	ldd	r20, Y+6	; 0x06
    1556:	5f 81       	ldd	r21, Y+7	; 0x07
    1558:	41 30       	cpi	r20, 0x01	; 1
    155a:	51 05       	cpc	r21, r1
    155c:	59 f1       	breq	.+86     	; 0x15b4 <DIO_u8GetPinValue+0x9a>
    155e:	8e 81       	ldd	r24, Y+6	; 0x06
    1560:	9f 81       	ldd	r25, Y+7	; 0x07
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	91 05       	cpc	r25, r1
    1566:	34 f4       	brge	.+12     	; 0x1574 <DIO_u8GetPinValue+0x5a>
    1568:	2e 81       	ldd	r18, Y+6	; 0x06
    156a:	3f 81       	ldd	r19, Y+7	; 0x07
    156c:	21 15       	cp	r18, r1
    156e:	31 05       	cpc	r19, r1
    1570:	69 f0       	breq	.+26     	; 0x158c <DIO_u8GetPinValue+0x72>
    1572:	5c c0       	rjmp	.+184    	; 0x162c <DIO_u8GetPinValue+0x112>
    1574:	4e 81       	ldd	r20, Y+6	; 0x06
    1576:	5f 81       	ldd	r21, Y+7	; 0x07
    1578:	42 30       	cpi	r20, 0x02	; 2
    157a:	51 05       	cpc	r21, r1
    157c:	79 f1       	breq	.+94     	; 0x15dc <DIO_u8GetPinValue+0xc2>
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	9f 81       	ldd	r25, Y+7	; 0x07
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <DIO_u8GetPinValue+0x70>
    1588:	3d c0       	rjmp	.+122    	; 0x1604 <DIO_u8GetPinValue+0xea>
    158a:	50 c0       	rjmp	.+160    	; 0x162c <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:*Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
    158c:	e9 e3       	ldi	r30, 0x39	; 57
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a9 01       	movw	r20, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_u8GetPinValue+0x8a>
    15a0:	55 95       	asr	r21
    15a2:	47 95       	ror	r20
    15a4:	8a 95       	dec	r24
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_u8GetPinValue+0x86>
    15a8:	ca 01       	movw	r24, r20
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	ec 81       	ldd	r30, Y+4	; 0x04
    15ae:	fd 81       	ldd	r31, Y+5	; 0x05
    15b0:	80 83       	st	Z, r24
    15b2:	44 c0       	rjmp	.+136    	; 0x163c <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTB:*Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
    15b4:	e6 e3       	ldi	r30, 0x36	; 54
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_u8GetPinValue+0xb2>
    15c8:	55 95       	asr	r21
    15ca:	47 95       	ror	r20
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_u8GetPinValue+0xae>
    15d0:	ca 01       	movw	r24, r20
    15d2:	81 70       	andi	r24, 0x01	; 1
    15d4:	ec 81       	ldd	r30, Y+4	; 0x04
    15d6:	fd 81       	ldd	r31, Y+5	; 0x05
    15d8:	80 83       	st	Z, r24
    15da:	30 c0       	rjmp	.+96     	; 0x163c <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTC:*Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
    15dc:	e3 e3       	ldi	r30, 0x33	; 51
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	a9 01       	movw	r20, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_u8GetPinValue+0xda>
    15f0:	55 95       	asr	r21
    15f2:	47 95       	ror	r20
    15f4:	8a 95       	dec	r24
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_u8GetPinValue+0xd6>
    15f8:	ca 01       	movw	r24, r20
    15fa:	81 70       	andi	r24, 0x01	; 1
    15fc:	ec 81       	ldd	r30, Y+4	; 0x04
    15fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1600:	80 83       	st	Z, r24
    1602:	1c c0       	rjmp	.+56     	; 0x163c <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTD:*Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
    1604:	e0 e3       	ldi	r30, 0x30	; 48
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a9 01       	movw	r20, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_u8GetPinValue+0x102>
    1618:	55 95       	asr	r21
    161a:	47 95       	ror	r20
    161c:	8a 95       	dec	r24
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_u8GetPinValue+0xfe>
    1620:	ca 01       	movw	r24, r20
    1622:	81 70       	andi	r24, 0x01	; 1
    1624:	ec 81       	ldd	r30, Y+4	; 0x04
    1626:	fd 81       	ldd	r31, Y+5	; 0x05
    1628:	80 83       	st	Z, r24
    162a:	08 c0       	rjmp	.+16     	; 0x163c <DIO_u8GetPinValue+0x122>
			default: Local_u8ErrorState = NOK; break;//Not any port
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	05 c0       	rjmp	.+10     	; 0x163c <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_u8GetPinValue+0x122>
		}

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    163c:	89 81       	ldd	r24, Y+1	; 0x01
}
    163e:	27 96       	adiw	r28, 0x07	; 7
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <DIO_u8SetPortDirection+0x6>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <DIO_u8SetPortDirection+0x8>
    1658:	0f 92       	push	r0
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	8a 83       	std	Y+2, r24	; 0x02
    1660:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1662:	19 82       	std	Y+1, r1	; 0x01


				switch(Copy_u8Port)//which port you want it as input
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	3d 83       	std	Y+5, r19	; 0x05
    166c:	2c 83       	std	Y+4, r18	; 0x04
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	9d 81       	ldd	r25, Y+5	; 0x05
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	91 05       	cpc	r25, r1
    1676:	d1 f0       	breq	.+52     	; 0x16ac <DIO_u8SetPortDirection+0x5c>
    1678:	2c 81       	ldd	r18, Y+4	; 0x04
    167a:	3d 81       	ldd	r19, Y+5	; 0x05
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	2c f4       	brge	.+10     	; 0x168c <DIO_u8SetPortDirection+0x3c>
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	61 f0       	breq	.+24     	; 0x16a2 <DIO_u8SetPortDirection+0x52>
    168a:	1f c0       	rjmp	.+62     	; 0x16ca <DIO_u8SetPortDirection+0x7a>
    168c:	2c 81       	ldd	r18, Y+4	; 0x04
    168e:	3d 81       	ldd	r19, Y+5	; 0x05
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	81 f0       	breq	.+32     	; 0x16b6 <DIO_u8SetPortDirection+0x66>
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	9d 81       	ldd	r25, Y+5	; 0x05
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	91 05       	cpc	r25, r1
    169e:	81 f0       	breq	.+32     	; 0x16c0 <DIO_u8SetPortDirection+0x70>
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <DIO_u8SetPortDirection+0x7a>
				{
				case DIO_u8PORTA:DDRA = Copy_u8Direction; break;
    16a2:	ea e3       	ldi	r30, 0x3A	; 58
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	80 83       	st	Z, r24
    16aa:	11 c0       	rjmp	.+34     	; 0x16ce <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTB:DDRB = Copy_u8Direction; break;
    16ac:	e7 e3       	ldi	r30, 0x37	; 55
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	80 83       	st	Z, r24
    16b4:	0c c0       	rjmp	.+24     	; 0x16ce <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTC:DDRC = Copy_u8Direction; break;
    16b6:	e4 e3       	ldi	r30, 0x34	; 52
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	80 83       	st	Z, r24
    16be:	07 c0       	rjmp	.+14     	; 0x16ce <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTD:DDRD = Copy_u8Direction; break;
    16c0:	e1 e3       	ldi	r30, 0x31	; 49
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	80 83       	st	Z, r24
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_u8SetPortDirection+0x7e>
				default: Local_u8ErrorState = NOK; break;//Not any port
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	89 83       	std	Y+1, r24	; 0x01
				}

		return Local_u8ErrorState;
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <DIO_u8SetPortValue+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <DIO_u8SetPortValue+0x8>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	8a 83       	std	Y+2, r24	; 0x02
    16f0:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState = OK;
    16f2:	19 82       	std	Y+1, r1	; 0x01


				switch(Copy_u8Port)//which port you want it as input
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	3d 83       	std	Y+5, r19	; 0x05
    16fc:	2c 83       	std	Y+4, r18	; 0x04
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	d1 f0       	breq	.+52     	; 0x173c <DIO_u8SetPortValue+0x5c>
    1708:	2c 81       	ldd	r18, Y+4	; 0x04
    170a:	3d 81       	ldd	r19, Y+5	; 0x05
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	2c f4       	brge	.+10     	; 0x171c <DIO_u8SetPortValue+0x3c>
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	61 f0       	breq	.+24     	; 0x1732 <DIO_u8SetPortValue+0x52>
    171a:	1f c0       	rjmp	.+62     	; 0x175a <DIO_u8SetPortValue+0x7a>
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	81 f0       	breq	.+32     	; 0x1746 <DIO_u8SetPortValue+0x66>
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	81 f0       	breq	.+32     	; 0x1750 <DIO_u8SetPortValue+0x70>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <DIO_u8SetPortValue+0x7a>
				{
				case DIO_u8PORTA:PORTA = Copy_u8Value; break;
    1732:	eb e3       	ldi	r30, 0x3B	; 59
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	80 83       	st	Z, r24
    173a:	11 c0       	rjmp	.+34     	; 0x175e <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTB:PORTB = Copy_u8Value; break;
    173c:	e8 e3       	ldi	r30, 0x38	; 56
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	80 83       	st	Z, r24
    1744:	0c c0       	rjmp	.+24     	; 0x175e <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTC:PORTC = Copy_u8Value; break;
    1746:	e5 e3       	ldi	r30, 0x35	; 53
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	80 83       	st	Z, r24
    174e:	07 c0       	rjmp	.+14     	; 0x175e <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTD:PORTD = Copy_u8Value; break;
    1750:	e2 e3       	ldi	r30, 0x32	; 50
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	80 83       	st	Z, r24
    1758:	02 c0       	rjmp	.+4      	; 0x175e <DIO_u8SetPortValue+0x7e>
				default: Local_u8ErrorState = NOK; break;//Not any port
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
				}

		return Local_u8ErrorState;
    175e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <DIO_u8TogglePinValue+0x6>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <DIO_u8TogglePinValue+0x8>
    1778:	00 d0       	rcall	.+0      	; 0x177a <DIO_u8TogglePinValue+0xa>
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	8a 83       	std	Y+2, r24	; 0x02
    1780:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1782:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 30       	cpi	r24, 0x08	; 8
    1788:	08 f0       	brcs	.+2      	; 0x178c <DIO_u8TogglePinValue+0x1c>
    178a:	74 c0       	rjmp	.+232    	; 0x1874 <DIO_u8TogglePinValue+0x104>
	{

			switch(Copy_u8Port)//which port you want it as input
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3e 83       	std	Y+6, r19	; 0x06
    1794:	2d 83       	std	Y+5, r18	; 0x05
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	91 05       	cpc	r25, r1
    179e:	49 f1       	breq	.+82     	; 0x17f2 <DIO_u8TogglePinValue+0x82>
    17a0:	2d 81       	ldd	r18, Y+5	; 0x05
    17a2:	3e 81       	ldd	r19, Y+6	; 0x06
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <DIO_u8TogglePinValue+0x44>
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	61 f0       	breq	.+24     	; 0x17ca <DIO_u8TogglePinValue+0x5a>
    17b2:	5b c0       	rjmp	.+182    	; 0x186a <DIO_u8TogglePinValue+0xfa>
    17b4:	2d 81       	ldd	r18, Y+5	; 0x05
    17b6:	3e 81       	ldd	r19, Y+6	; 0x06
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	71 f1       	breq	.+92     	; 0x181a <DIO_u8TogglePinValue+0xaa>
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	83 30       	cpi	r24, 0x03	; 3
    17c4:	91 05       	cpc	r25, r1
    17c6:	e9 f1       	breq	.+122    	; 0x1842 <DIO_u8TogglePinValue+0xd2>
    17c8:	50 c0       	rjmp	.+160    	; 0x186a <DIO_u8TogglePinValue+0xfa>
			{
			case DIO_u8PORTA:TOG_BIT(PORTA,Copy_u8Pin); break;
    17ca:	ab e3       	ldi	r26, 0x3B	; 59
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	eb e3       	ldi	r30, 0x3B	; 59
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_u8TogglePinValue+0x78>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <DIO_u8TogglePinValue+0x74>
    17ec:	84 27       	eor	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	3e c0       	rjmp	.+124    	; 0x186e <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTB:TOG_BIT(PORTB,Copy_u8Pin); break;
    17f2:	a8 e3       	ldi	r26, 0x38	; 56
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e8 e3       	ldi	r30, 0x38	; 56
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DIO_u8TogglePinValue+0xa0>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DIO_u8TogglePinValue+0x9c>
    1814:	84 27       	eor	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	2a c0       	rjmp	.+84     	; 0x186e <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTC:TOG_BIT(PORTC,Copy_u8Pin); break;
    181a:	a5 e3       	ldi	r26, 0x35	; 53
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e5 e3       	ldi	r30, 0x35	; 53
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	48 2f       	mov	r20, r24
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 2e       	mov	r0, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <DIO_u8TogglePinValue+0xc8>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	0a 94       	dec	r0
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <DIO_u8TogglePinValue+0xc4>
    183c:	84 27       	eor	r24, r20
    183e:	8c 93       	st	X, r24
    1840:	16 c0       	rjmp	.+44     	; 0x186e <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTD:TOG_BIT(PORTD,Copy_u8Pin); break;
    1842:	a2 e3       	ldi	r26, 0x32	; 50
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e2 e3       	ldi	r30, 0x32	; 50
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_u8TogglePinValue+0xf0>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_u8TogglePinValue+0xec>
    1864:	84 27       	eor	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_u8TogglePinValue+0xfe>
			default: Local_u8ErrorState = NOK; break;//Not any port
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return Local_u8ErrorState;
	}

		return Local_u8ErrorState;
    186e:	99 81       	ldd	r25, Y+1	; 0x01
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <DIO_u8TogglePinValue+0x108>
			default: Local_u8ErrorState = NOK; break;//Not any port
			}
	}
	else
	{
		return Local_u8ErrorState;
    1874:	29 81       	ldd	r18, Y+1	; 0x01
    1876:	2c 83       	std	Y+4, r18	; 0x04
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
	}

		return Local_u8ErrorState;
}
    187a:	26 96       	adiw	r28, 0x06	; 6
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <KEYPAD_voidInit>:
#include "Keypad_prv.h"



void KEYPAD_voidInit(void)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(KPD_u8Row_PORT, 0b00000000); //Set as Input
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(KPD_u8Row_PORT, 0b00111100);//Set as High to get pull up on Rows
    189c:	82 e0       	ldi	r24, 0x02	; 2
    189e:	6c e3       	ldi	r22, 0x3C	; 60
    18a0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <DIO_u8SetPortValue>

	DIO_u8SetPortDirection(KPD_u8Col_PORT, 0b11101000);
    18a4:	83 e0       	ldi	r24, 0x03	; 3
    18a6:	68 ee       	ldi	r22, 0xE8	; 232
    18a8:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(KPD_u8Col_PORT, 0b11101000);
    18ac:	83 e0       	ldi	r24, 0x03	; 3
    18ae:	68 ee       	ldi	r22, 0xE8	; 232
    18b0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <DIO_u8SetPortValue>
}
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <KEYPAD_GetPressedKey>:

uint8 KEYPAD_GetPressedKey(void)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <KEYPAD_GetPressedKey+0x6>
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <KEYPAD_GetPressedKey+0x8>
    18c2:	0f 92       	push	r0
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	/** No pressed key**/
	uint8 Local_u8PressedKey = KEY_PRESSED_VAL; //All High Not Pressed
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	8b 83       	std	Y+3, r24	; 0x03



	/** To send the sequence **/
	/** Activate The columns **/
	for(Local_u8ColCounter = 0; Local_u8ColCounter < COL_NUM; Local_u8ColCounter++)
    18cc:	19 82       	std	Y+1, r1	; 0x01
    18ce:	6d c0       	rjmp	.+218    	; 0x19aa <KEYPAD_GetPressedKey+0xf0>
	{

		DIO_u8SetPinValue(KPD_u8Col_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_LOW);
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	fc 01       	movw	r30, r24
    18d8:	e4 58       	subi	r30, 0x84	; 132
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	90 81       	ld	r25, Z
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	69 2f       	mov	r22, r25
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8SetPinValue>

		for(Local_u8RowCounter = 0; Local_u8RowCounter < ROW_NUM; Local_u8RowCounter++)
    18e8:	1a 82       	std	Y+2, r1	; 0x02
    18ea:	4c c0       	rjmp	.+152    	; 0x1984 <KEYPAD_GetPressedKey+0xca>
		{
			/** Read the state of bush button of each row**/
			DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	fc 01       	movw	r30, r24
    18f4:	e8 58       	subi	r30, 0x88	; 136
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	90 81       	ld	r25, Z
    18fa:	9e 01       	movw	r18, r28
    18fc:	2c 5f       	subi	r18, 0xFC	; 252
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	69 2f       	mov	r22, r25
    1904:	a9 01       	movw	r20, r18
    1906:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_u8GetPinValue>

			/** If low so it is pressed **/
			if(Local_u8KeyState == DIO_u8PIN_LOW)
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	88 23       	and	r24, r24
    190e:	b9 f5       	brne	.+110    	; 0x197e <KEYPAD_GetPressedKey+0xc4>
			{
				//_delay_ms(10); /** debouncing **/
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	48 2f       	mov	r20, r24
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	ca 01       	movw	r24, r20
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	82 0f       	add	r24, r18
    1928:	93 1f       	adc	r25, r19
    192a:	fc 01       	movw	r30, r24
    192c:	e8 59       	subi	r30, 0x98	; 152
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 81       	ld	r24, Z
    1932:	8b 83       	std	Y+3, r24	; 0x03
				DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	fc 01       	movw	r30, r24
    193c:	e8 58       	subi	r30, 0x88	; 136
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	90 81       	ld	r25, Z
    1942:	9e 01       	movw	r18, r28
    1944:	2c 5f       	subi	r18, 0xFC	; 252
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	69 2f       	mov	r22, r25
    194c:	a9 01       	movw	r20, r18
    194e:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_u8GetPinValue>
    1952:	0f c0       	rjmp	.+30     	; 0x1972 <KEYPAD_GetPressedKey+0xb8>
				while(Local_u8KeyState == DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	fc 01       	movw	r30, r24
    195c:	e8 58       	subi	r30, 0x88	; 136
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	90 81       	ld	r25, Z
    1962:	9e 01       	movw	r18, r28
    1964:	2c 5f       	subi	r18, 0xFC	; 252
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	69 2f       	mov	r22, r25
    196c:	a9 01       	movw	r20, r18
    196e:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_u8GetPinValue>
			if(Local_u8KeyState == DIO_u8PIN_LOW)
			{
				//_delay_ms(10); /** debouncing **/
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
				DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
				while(Local_u8KeyState == DIO_u8PIN_LOW)
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	88 23       	and	r24, r24
    1976:	71 f3       	breq	.-36     	; 0x1954 <KEYPAD_GetPressedKey+0x9a>
				{
					DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
				}
				return Local_u8PressedKey;
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	8d 83       	std	Y+5, r24	; 0x05
    197c:	1c c0       	rjmp	.+56     	; 0x19b6 <KEYPAD_GetPressedKey+0xfc>
	for(Local_u8ColCounter = 0; Local_u8ColCounter < COL_NUM; Local_u8ColCounter++)
	{

		DIO_u8SetPinValue(KPD_u8Col_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_LOW);

		for(Local_u8RowCounter = 0; Local_u8RowCounter < ROW_NUM; Local_u8RowCounter++)
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	8f 5f       	subi	r24, 0xFF	; 255
    1982:	8a 83       	std	Y+2, r24	; 0x02
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	08 f4       	brcc	.+2      	; 0x198c <KEYPAD_GetPressedKey+0xd2>
    198a:	b0 cf       	rjmp	.-160    	; 0x18ec <KEYPAD_GetPressedKey+0x32>
					DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
				}
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_u8Col_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_HIGH);
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	fc 01       	movw	r30, r24
    1994:	e4 58       	subi	r30, 0x84	; 132
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	90 81       	ld	r25, Z
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	69 2f       	mov	r22, r25
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_u8SetPinValue>



	/** To send the sequence **/
	/** Activate The columns **/
	for(Local_u8ColCounter = 0; Local_u8ColCounter < COL_NUM; Local_u8ColCounter++)
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	8f 5f       	subi	r24, 0xFF	; 255
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	84 30       	cpi	r24, 0x04	; 4
    19ae:	08 f4       	brcc	.+2      	; 0x19b2 <KEYPAD_GetPressedKey+0xf8>
    19b0:	8f cf       	rjmp	.-226    	; 0x18d0 <KEYPAD_GetPressedKey+0x16>





	return Local_u8PressedKey;
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05

}
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <main>:
#define Max				1000

#include <util/delay.h>

void main(void)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	60 97       	sbiw	r28, 0x10	; 16
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    CLCD_voidInit();
    19dc:	0e 94 90 06 	call	0xd20	; 0xd20 <CLCD_voidInit>
    KEYPAD_voidInit();
    19e0:	0e 94 46 0c 	call	0x188c	; 0x188c <KEYPAD_voidInit>

    uint32 Num1 = 0;
    19e4:	1b 86       	std	Y+11, r1	; 0x0b
    19e6:	1c 86       	std	Y+12, r1	; 0x0c
    19e8:	1d 86       	std	Y+13, r1	; 0x0d
    19ea:	1e 86       	std	Y+14, r1	; 0x0e
    uint32 Num2 = 0;
    19ec:	1f 82       	std	Y+7, r1	; 0x07
    19ee:	18 86       	std	Y+8, r1	; 0x08
    19f0:	19 86       	std	Y+9, r1	; 0x09
    19f2:	1a 86       	std	Y+10, r1	; 0x0a
    uint32 result = 0;
    19f4:	1b 82       	std	Y+3, r1	; 0x03
    19f6:	1c 82       	std	Y+4, r1	; 0x04
    19f8:	1d 82       	std	Y+5, r1	; 0x05
    19fa:	1e 82       	std	Y+6, r1	; 0x06
    uint8 operation = 0;
    19fc:	1a 82       	std	Y+2, r1	; 0x02

    while (1) {
        uint8 key = KEYPAD_GetPressedKey();
    19fe:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <KEYPAD_GetPressedKey>
    1a02:	89 83       	std	Y+1, r24	; 0x01


        switch (key) {
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	38 8b       	std	Y+16, r19	; 0x10
    1a0c:	2f 87       	std	Y+15, r18	; 0x0f
    1a0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a10:	98 89       	ldd	r25, Y+16	; 0x10
    1a12:	8a 33       	cpi	r24, 0x3A	; 58
    1a14:	91 05       	cpc	r25, r1
    1a16:	24 f5       	brge	.+72     	; 0x1a60 <main+0x98>
    1a18:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a1a:	38 89       	ldd	r19, Y+16	; 0x10
    1a1c:	20 33       	cpi	r18, 0x30	; 48
    1a1e:	31 05       	cpc	r19, r1
    1a20:	34 f5       	brge	.+76     	; 0x1a6e <main+0xa6>
    1a22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a24:	98 89       	ldd	r25, Y+16	; 0x10
    1a26:	8b 32       	cpi	r24, 0x2B	; 43
    1a28:	91 05       	cpc	r25, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <main+0x66>
    1a2c:	93 c0       	rjmp	.+294    	; 0x1b54 <main+0x18c>
    1a2e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a30:	38 89       	ldd	r19, Y+16	; 0x10
    1a32:	2c 32       	cpi	r18, 0x2C	; 44
    1a34:	31 05       	cpc	r19, r1
    1a36:	3c f4       	brge	.+14     	; 0x1a46 <main+0x7e>
    1a38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a3a:	98 89       	ldd	r25, Y+16	; 0x10
    1a3c:	8a 32       	cpi	r24, 0x2A	; 42
    1a3e:	91 05       	cpc	r25, r1
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <main+0x7c>
    1a42:	94 c0       	rjmp	.+296    	; 0x1b6c <main+0x1a4>
    1a44:	dc cf       	rjmp	.-72     	; 0x19fe <main+0x36>
    1a46:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a48:	38 89       	ldd	r19, Y+16	; 0x10
    1a4a:	2d 32       	cpi	r18, 0x2D	; 45
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <main+0x8a>
    1a50:	87 c0       	rjmp	.+270    	; 0x1b60 <main+0x198>
    1a52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a54:	98 89       	ldd	r25, Y+16	; 0x10
    1a56:	8f 32       	cpi	r24, 0x2F	; 47
    1a58:	91 05       	cpc	r25, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <main+0x96>
    1a5c:	8d c0       	rjmp	.+282    	; 0x1b78 <main+0x1b0>
    1a5e:	cf cf       	rjmp	.-98     	; 0x19fe <main+0x36>
    1a60:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a62:	38 89       	ldd	r19, Y+16	; 0x10
    1a64:	2d 33       	cpi	r18, 0x3D	; 61
    1a66:	31 05       	cpc	r19, r1
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <main+0xa4>
    1a6a:	8c c0       	rjmp	.+280    	; 0x1b84 <main+0x1bc>
    1a6c:	c8 cf       	rjmp	.-112    	; 0x19fe <main+0x36>
            case'5':
            case'6':
            case'7':
            case'8':
            case'9':
               if(operation == 0) {
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	88 23       	and	r24, r24
    1a72:	c1 f5       	brne	.+112    	; 0x1ae4 <main+0x11c>

                   Num1 = ((Num1 * 10 )+ (key - '0'));
    1a74:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a76:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a78:	ad 85       	ldd	r26, Y+13	; 0x0d
    1a7a:	be 85       	ldd	r27, Y+14	; 0x0e
    1a7c:	2a e0       	ldi	r18, 0x0A	; 10
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__mulsi3>
    1a8c:	9b 01       	movw	r18, r22
    1a8e:	ac 01       	movw	r20, r24
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	c0 97       	sbiw	r24, 0x30	; 48
    1a98:	aa 27       	eor	r26, r26
    1a9a:	97 fd       	sbrc	r25, 7
    1a9c:	a0 95       	com	r26
    1a9e:	ba 2f       	mov	r27, r26
    1aa0:	82 0f       	add	r24, r18
    1aa2:	93 1f       	adc	r25, r19
    1aa4:	a4 1f       	adc	r26, r20
    1aa6:	b5 1f       	adc	r27, r21
    1aa8:	8b 87       	std	Y+11, r24	; 0x0b
    1aaa:	9c 87       	std	Y+12, r25	; 0x0c
    1aac:	ad 87       	std	Y+13, r26	; 0x0d
    1aae:	be 87       	std	Y+14, r27	; 0x0e


                   if(Num1 <= Max)
    1ab0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ab4:	ad 85       	ldd	r26, Y+13	; 0x0d
    1ab6:	be 85       	ldd	r27, Y+14	; 0x0e
    1ab8:	89 3e       	cpi	r24, 0xE9	; 233
    1aba:	33 e0       	ldi	r19, 0x03	; 3
    1abc:	93 07       	cpc	r25, r19
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	a3 07       	cpc	r26, r19
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	b3 07       	cpc	r27, r19
    1ac6:	08 f0       	brcs	.+2      	; 0x1aca <main+0x102>
    1ac8:	9a cf       	rjmp	.-204    	; 0x19fe <main+0x36>
                   {
                	   CLCD_voidSendNumber(key-'0');
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	c0 97       	sbiw	r24, 0x30	; 48
    1ad2:	aa 27       	eor	r26, r26
    1ad4:	97 fd       	sbrc	r25, 7
    1ad6:	a0 95       	com	r26
    1ad8:	ba 2f       	mov	r27, r26
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 7b 07 	call	0xef6	; 0xef6 <CLCD_voidSendNumber>
    1ae2:	8d cf       	rjmp	.-230    	; 0x19fe <main+0x36>
                   }

                } else {
                    Num2 = Num2 * 10 + (key - '0');
    1ae4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae6:	98 85       	ldd	r25, Y+8	; 0x08
    1ae8:	a9 85       	ldd	r26, Y+9	; 0x09
    1aea:	ba 85       	ldd	r27, Y+10	; 0x0a
    1aec:	2a e0       	ldi	r18, 0x0A	; 10
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__mulsi3>
    1afc:	9b 01       	movw	r18, r22
    1afe:	ac 01       	movw	r20, r24
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	c0 97       	sbiw	r24, 0x30	; 48
    1b08:	aa 27       	eor	r26, r26
    1b0a:	97 fd       	sbrc	r25, 7
    1b0c:	a0 95       	com	r26
    1b0e:	ba 2f       	mov	r27, r26
    1b10:	82 0f       	add	r24, r18
    1b12:	93 1f       	adc	r25, r19
    1b14:	a4 1f       	adc	r26, r20
    1b16:	b5 1f       	adc	r27, r21
    1b18:	8f 83       	std	Y+7, r24	; 0x07
    1b1a:	98 87       	std	Y+8, r25	; 0x08
    1b1c:	a9 87       	std	Y+9, r26	; 0x09
    1b1e:	ba 87       	std	Y+10, r27	; 0x0a
                    if(Num2 <= Max)
    1b20:	8f 81       	ldd	r24, Y+7	; 0x07
    1b22:	98 85       	ldd	r25, Y+8	; 0x08
    1b24:	a9 85       	ldd	r26, Y+9	; 0x09
    1b26:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b28:	89 3e       	cpi	r24, 0xE9	; 233
    1b2a:	23 e0       	ldi	r18, 0x03	; 3
    1b2c:	92 07       	cpc	r25, r18
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	a2 07       	cpc	r26, r18
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	b2 07       	cpc	r27, r18
    1b36:	08 f0       	brcs	.+2      	; 0x1b3a <main+0x172>
    1b38:	62 cf       	rjmp	.-316    	; 0x19fe <main+0x36>
                     {
                  	   CLCD_voidSendNumber(key-'0');
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	88 2f       	mov	r24, r24
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	c0 97       	sbiw	r24, 0x30	; 48
    1b42:	aa 27       	eor	r26, r26
    1b44:	97 fd       	sbrc	r25, 7
    1b46:	a0 95       	com	r26
    1b48:	ba 2f       	mov	r27, r26
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 7b 07 	call	0xef6	; 0xef6 <CLCD_voidSendNumber>
    1b52:	55 cf       	rjmp	.-342    	; 0x19fe <main+0x36>
                     }

                }
                break;
            case '+':
                operation = '+';
    1b54:	8b e2       	ldi	r24, 0x2B	; 43
    1b56:	8a 83       	std	Y+2, r24	; 0x02
                CLCD_voidSendData('+');
    1b58:	8b e2       	ldi	r24, 0x2B	; 43
    1b5a:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
    1b5e:	4f cf       	rjmp	.-354    	; 0x19fe <main+0x36>
                break;
            case '-':
                operation = '-';
    1b60:	8d e2       	ldi	r24, 0x2D	; 45
    1b62:	8a 83       	std	Y+2, r24	; 0x02
                CLCD_voidSendData('-');
    1b64:	8d e2       	ldi	r24, 0x2D	; 45
    1b66:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
    1b6a:	49 cf       	rjmp	.-366    	; 0x19fe <main+0x36>
                break;
            case '*':
                operation = '*';
    1b6c:	8a e2       	ldi	r24, 0x2A	; 42
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
                CLCD_voidSendData('*');
    1b70:	8a e2       	ldi	r24, 0x2A	; 42
    1b72:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
    1b76:	43 cf       	rjmp	.-378    	; 0x19fe <main+0x36>
                break;
            case '/':
                operation = '/';
    1b78:	8f e2       	ldi	r24, 0x2F	; 47
    1b7a:	8a 83       	std	Y+2, r24	; 0x02
                CLCD_voidSendData('/');
    1b7c:	8f e2       	ldi	r24, 0x2F	; 47
    1b7e:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
    1b82:	3d cf       	rjmp	.-390    	; 0x19fe <main+0x36>
                break;
            case '=':
                if (operation == '+') {
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	8b 32       	cpi	r24, 0x2B	; 43
    1b88:	89 f4       	brne	.+34     	; 0x1bac <main+0x1e4>
                    result = Num1 + Num2;
    1b8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b8e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1b90:	be 85       	ldd	r27, Y+14	; 0x0e
    1b92:	2f 81       	ldd	r18, Y+7	; 0x07
    1b94:	38 85       	ldd	r19, Y+8	; 0x08
    1b96:	49 85       	ldd	r20, Y+9	; 0x09
    1b98:	5a 85       	ldd	r21, Y+10	; 0x0a
    1b9a:	82 0f       	add	r24, r18
    1b9c:	93 1f       	adc	r25, r19
    1b9e:	a4 1f       	adc	r26, r20
    1ba0:	b5 1f       	adc	r27, r21
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	ad 83       	std	Y+5, r26	; 0x05
    1ba8:	be 83       	std	Y+6, r27	; 0x06
    1baa:	47 c0       	rjmp	.+142    	; 0x1c3a <main+0x272>
                } else if (operation == '-') {
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	8d 32       	cpi	r24, 0x2D	; 45
    1bb0:	89 f4       	brne	.+34     	; 0x1bd4 <main+0x20c>
                    result = Num1 - Num2;
    1bb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bb6:	ad 85       	ldd	r26, Y+13	; 0x0d
    1bb8:	be 85       	ldd	r27, Y+14	; 0x0e
    1bba:	2f 81       	ldd	r18, Y+7	; 0x07
    1bbc:	38 85       	ldd	r19, Y+8	; 0x08
    1bbe:	49 85       	ldd	r20, Y+9	; 0x09
    1bc0:	5a 85       	ldd	r21, Y+10	; 0x0a
    1bc2:	82 1b       	sub	r24, r18
    1bc4:	93 0b       	sbc	r25, r19
    1bc6:	a4 0b       	sbc	r26, r20
    1bc8:	b5 0b       	sbc	r27, r21
    1bca:	8b 83       	std	Y+3, r24	; 0x03
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	ad 83       	std	Y+5, r26	; 0x05
    1bd0:	be 83       	std	Y+6, r27	; 0x06
    1bd2:	33 c0       	rjmp	.+102    	; 0x1c3a <main+0x272>
                } else if (operation == '*') {
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	8a 32       	cpi	r24, 0x2A	; 42
    1bd8:	99 f4       	brne	.+38     	; 0x1c00 <main+0x238>
                    result = Num1 * Num2;
    1bda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bde:	ad 85       	ldd	r26, Y+13	; 0x0d
    1be0:	be 85       	ldd	r27, Y+14	; 0x0e
    1be2:	2f 81       	ldd	r18, Y+7	; 0x07
    1be4:	38 85       	ldd	r19, Y+8	; 0x08
    1be6:	49 85       	ldd	r20, Y+9	; 0x09
    1be8:	5a 85       	ldd	r21, Y+10	; 0x0a
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__mulsi3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	ad 83       	std	Y+5, r26	; 0x05
    1bfc:	be 83       	std	Y+6, r27	; 0x06
    1bfe:	1d c0       	rjmp	.+58     	; 0x1c3a <main+0x272>
                } else if (operation == '/') {
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	8f 32       	cpi	r24, 0x2F	; 47
    1c04:	d1 f4       	brne	.+52     	; 0x1c3a <main+0x272>
                    if (Num2 != 0) {
    1c06:	8f 81       	ldd	r24, Y+7	; 0x07
    1c08:	98 85       	ldd	r25, Y+8	; 0x08
    1c0a:	a9 85       	ldd	r26, Y+9	; 0x09
    1c0c:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	a1 05       	cpc	r26, r1
    1c12:	b1 05       	cpc	r27, r1
    1c14:	91 f0       	breq	.+36     	; 0x1c3a <main+0x272>
                        result = Num1 / Num2;
    1c16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c18:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c1a:	ad 85       	ldd	r26, Y+13	; 0x0d
    1c1c:	be 85       	ldd	r27, Y+14	; 0x0e
    1c1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c20:	38 85       	ldd	r19, Y+8	; 0x08
    1c22:	49 85       	ldd	r20, Y+9	; 0x09
    1c24:	5a 85       	ldd	r21, Y+10	; 0x0a
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__udivmodsi4>
    1c2e:	da 01       	movw	r26, r20
    1c30:	c9 01       	movw	r24, r18
    1c32:	8b 83       	std	Y+3, r24	; 0x03
    1c34:	9c 83       	std	Y+4, r25	; 0x04
    1c36:	ad 83       	std	Y+5, r26	; 0x05
    1c38:	be 83       	std	Y+6, r27	; 0x06
                    }
                }
                CLCD_voidSendData('=');
    1c3a:	8d e3       	ldi	r24, 0x3D	; 61
    1c3c:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
                CLCD_voidSendNumber(result);
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	ad 81       	ldd	r26, Y+5	; 0x05
    1c46:	be 81       	ldd	r27, Y+6	; 0x06
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 7b 07 	call	0xef6	; 0xef6 <CLCD_voidSendNumber>
                operation = 0;
    1c50:	1a 82       	std	Y+2, r1	; 0x02
                Num1 = 0;
    1c52:	1b 86       	std	Y+11, r1	; 0x0b
    1c54:	1c 86       	std	Y+12, r1	; 0x0c
    1c56:	1d 86       	std	Y+13, r1	; 0x0d
    1c58:	1e 86       	std	Y+14, r1	; 0x0e
                Num2 = 0;
    1c5a:	1f 82       	std	Y+7, r1	; 0x07
    1c5c:	18 86       	std	Y+8, r1	; 0x08
    1c5e:	19 86       	std	Y+9, r1	; 0x09
    1c60:	1a 86       	std	Y+10, r1	; 0x0a
    1c62:	cd ce       	rjmp	.-614    	; 0x19fe <main+0x36>

00001c64 <__mulsi3>:
    1c64:	62 9f       	mul	r22, r18
    1c66:	d0 01       	movw	r26, r0
    1c68:	73 9f       	mul	r23, r19
    1c6a:	f0 01       	movw	r30, r0
    1c6c:	82 9f       	mul	r24, r18
    1c6e:	e0 0d       	add	r30, r0
    1c70:	f1 1d       	adc	r31, r1
    1c72:	64 9f       	mul	r22, r20
    1c74:	e0 0d       	add	r30, r0
    1c76:	f1 1d       	adc	r31, r1
    1c78:	92 9f       	mul	r25, r18
    1c7a:	f0 0d       	add	r31, r0
    1c7c:	83 9f       	mul	r24, r19
    1c7e:	f0 0d       	add	r31, r0
    1c80:	74 9f       	mul	r23, r20
    1c82:	f0 0d       	add	r31, r0
    1c84:	65 9f       	mul	r22, r21
    1c86:	f0 0d       	add	r31, r0
    1c88:	99 27       	eor	r25, r25
    1c8a:	72 9f       	mul	r23, r18
    1c8c:	b0 0d       	add	r27, r0
    1c8e:	e1 1d       	adc	r30, r1
    1c90:	f9 1f       	adc	r31, r25
    1c92:	63 9f       	mul	r22, r19
    1c94:	b0 0d       	add	r27, r0
    1c96:	e1 1d       	adc	r30, r1
    1c98:	f9 1f       	adc	r31, r25
    1c9a:	bd 01       	movw	r22, r26
    1c9c:	cf 01       	movw	r24, r30
    1c9e:	11 24       	eor	r1, r1
    1ca0:	08 95       	ret

00001ca2 <__udivmodsi4>:
    1ca2:	a1 e2       	ldi	r26, 0x21	; 33
    1ca4:	1a 2e       	mov	r1, r26
    1ca6:	aa 1b       	sub	r26, r26
    1ca8:	bb 1b       	sub	r27, r27
    1caa:	fd 01       	movw	r30, r26
    1cac:	0d c0       	rjmp	.+26     	; 0x1cc8 <__udivmodsi4_ep>

00001cae <__udivmodsi4_loop>:
    1cae:	aa 1f       	adc	r26, r26
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	ee 1f       	adc	r30, r30
    1cb4:	ff 1f       	adc	r31, r31
    1cb6:	a2 17       	cp	r26, r18
    1cb8:	b3 07       	cpc	r27, r19
    1cba:	e4 07       	cpc	r30, r20
    1cbc:	f5 07       	cpc	r31, r21
    1cbe:	20 f0       	brcs	.+8      	; 0x1cc8 <__udivmodsi4_ep>
    1cc0:	a2 1b       	sub	r26, r18
    1cc2:	b3 0b       	sbc	r27, r19
    1cc4:	e4 0b       	sbc	r30, r20
    1cc6:	f5 0b       	sbc	r31, r21

00001cc8 <__udivmodsi4_ep>:
    1cc8:	66 1f       	adc	r22, r22
    1cca:	77 1f       	adc	r23, r23
    1ccc:	88 1f       	adc	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	1a 94       	dec	r1
    1cd2:	69 f7       	brne	.-38     	; 0x1cae <__udivmodsi4_loop>
    1cd4:	60 95       	com	r22
    1cd6:	70 95       	com	r23
    1cd8:	80 95       	com	r24
    1cda:	90 95       	com	r25
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
    1ce0:	bd 01       	movw	r22, r26
    1ce2:	cf 01       	movw	r24, r30
    1ce4:	08 95       	ret

00001ce6 <__divmodsi4>:
    1ce6:	97 fb       	bst	r25, 7
    1ce8:	09 2e       	mov	r0, r25
    1cea:	05 26       	eor	r0, r21
    1cec:	0e d0       	rcall	.+28     	; 0x1d0a <__divmodsi4_neg1>
    1cee:	57 fd       	sbrc	r21, 7
    1cf0:	04 d0       	rcall	.+8      	; 0x1cfa <__divmodsi4_neg2>
    1cf2:	d7 df       	rcall	.-82     	; 0x1ca2 <__udivmodsi4>
    1cf4:	0a d0       	rcall	.+20     	; 0x1d0a <__divmodsi4_neg1>
    1cf6:	00 1c       	adc	r0, r0
    1cf8:	38 f4       	brcc	.+14     	; 0x1d08 <__divmodsi4_exit>

00001cfa <__divmodsi4_neg2>:
    1cfa:	50 95       	com	r21
    1cfc:	40 95       	com	r20
    1cfe:	30 95       	com	r19
    1d00:	21 95       	neg	r18
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	4f 4f       	sbci	r20, 0xFF	; 255
    1d06:	5f 4f       	sbci	r21, 0xFF	; 255

00001d08 <__divmodsi4_exit>:
    1d08:	08 95       	ret

00001d0a <__divmodsi4_neg1>:
    1d0a:	f6 f7       	brtc	.-4      	; 0x1d08 <__divmodsi4_exit>
    1d0c:	90 95       	com	r25
    1d0e:	80 95       	com	r24
    1d10:	70 95       	com	r23
    1d12:	61 95       	neg	r22
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	8f 4f       	sbci	r24, 0xFF	; 255
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	08 95       	ret

00001d1c <__prologue_saves__>:
    1d1c:	2f 92       	push	r2
    1d1e:	3f 92       	push	r3
    1d20:	4f 92       	push	r4
    1d22:	5f 92       	push	r5
    1d24:	6f 92       	push	r6
    1d26:	7f 92       	push	r7
    1d28:	8f 92       	push	r8
    1d2a:	9f 92       	push	r9
    1d2c:	af 92       	push	r10
    1d2e:	bf 92       	push	r11
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	ca 1b       	sub	r28, r26
    1d46:	db 0b       	sbc	r29, r27
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	09 94       	ijmp

00001d54 <__epilogue_restores__>:
    1d54:	2a 88       	ldd	r2, Y+18	; 0x12
    1d56:	39 88       	ldd	r3, Y+17	; 0x11
    1d58:	48 88       	ldd	r4, Y+16	; 0x10
    1d5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d60:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d62:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d64:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d66:	b9 84       	ldd	r11, Y+9	; 0x09
    1d68:	c8 84       	ldd	r12, Y+8	; 0x08
    1d6a:	df 80       	ldd	r13, Y+7	; 0x07
    1d6c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d6e:	fd 80       	ldd	r15, Y+5	; 0x05
    1d70:	0c 81       	ldd	r16, Y+4	; 0x04
    1d72:	1b 81       	ldd	r17, Y+3	; 0x03
    1d74:	aa 81       	ldd	r26, Y+2	; 0x02
    1d76:	b9 81       	ldd	r27, Y+1	; 0x01
    1d78:	ce 0f       	add	r28, r30
    1d7a:	d1 1d       	adc	r29, r1
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	ed 01       	movw	r28, r26
    1d88:	08 95       	ret

00001d8a <_exit>:
    1d8a:	f8 94       	cli

00001d8c <__stop_program>:
    1d8c:	ff cf       	rjmp	.-2      	; 0x1d8c <__stop_program>
