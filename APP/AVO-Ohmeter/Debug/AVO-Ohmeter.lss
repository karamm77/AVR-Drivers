
AVO-Ohmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002130  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00002130  000021c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a4  008000a4  00002208  2**0
                  ALLOC
  3 .stab         00001bfc  00000000  00000000  00002208  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e27  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000087bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000891c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009377  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <main>
      8a:	0c 94 96 10 	jmp	0x212c	; 0x212c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:




void  ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/**Voltage Reference **/
#if AVREF_USED == AVREF_AVCC_5V
	SET_BIT(ADMUX,ADC_MUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADC_MUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
#endif

	/** Select Adjustment RIGHT **/

#if Adjustment_used == RIGHT_Adjustment
	CLR_BIT(ADMUX,ADC_MUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
#else
#error Wrong Agjustment
#endif

	/** Choosing prescaler as 64**/
	CLR_BIT(ADCSRA,ADCSRA_ADPS0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8e 7f       	andi	r24, 0xFE	; 254
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24

}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_voidInitTriggerSource>:

/************Using Trigger Source *******************/
void  ADC_voidInitTriggerSource(void)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62

	/**Voltage Reference **/
#if AVREF_USED == AVREF_AVCC_5V
	SET_BIT(ADMUX,ADC_MUX_REFS0);
     bb0:	a7 e2       	ldi	r26, 0x27	; 39
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e7 e2       	ldi	r30, 0x27	; 39
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 64       	ori	r24, 0x40	; 64
     bbc:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADC_MUX_REFS1);
     bbe:	a7 e2       	ldi	r26, 0x27	; 39
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e7 e2       	ldi	r30, 0x27	; 39
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 77       	andi	r24, 0x7F	; 127
     bca:	8c 93       	st	X, r24
#endif

	/** Select Adjustment RIGHT **/

#if Adjustment_used == RIGHT_Adjustment
	CLR_BIT(ADMUX,ADC_MUX_ADLAR);
     bcc:	a7 e2       	ldi	r26, 0x27	; 39
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e7 e2       	ldi	r30, 0x27	; 39
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8f 7d       	andi	r24, 0xDF	; 223
     bd8:	8c 93       	st	X, r24
#else
#error Wrong Agjustment
#endif

	/** Choosing prescaler as 64**/
	CLR_BIT(ADCSRA,ADCSRA_ADPS0);
     bda:	a6 e2       	ldi	r26, 0x26	; 38
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e6 e2       	ldi	r30, 0x26	; 38
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8e 7f       	andi	r24, 0xFE	; 254
     be6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     be8:	a6 e2       	ldi	r26, 0x26	; 38
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e6 e2       	ldi	r30, 0x26	; 38
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	82 60       	ori	r24, 0x02	; 2
     bf4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     bf6:	a6 e2       	ldi	r26, 0x26	; 38
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	84 60       	ori	r24, 0x04	; 4
     c02:	8c 93       	st	X, r24


	/***** Using External Interrupt ****/

	CLR_BIT(SFIOR,SFIOR_ADTS0);
     c04:	a0 e5       	ldi	r26, 0x50	; 80
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e0 e5       	ldi	r30, 0x50	; 80
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8e 7f       	andi	r24, 0xFE	; 254
     c10:	8c 93       	st	X, r24
	SET_BIT(SFIOR,SFIOR_ADTS1);
     c12:	a0 e5       	ldi	r26, 0x50	; 80
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e0 e5       	ldi	r30, 0x50	; 80
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	82 60       	ori	r24, 0x02	; 2
     c1e:	8c 93       	st	X, r24
	CLR_BIT(SFIOR,SFIOR_ADTS2);
     c20:	a0 e5       	ldi	r26, 0x50	; 80
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e0 e5       	ldi	r30, 0x50	; 80
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8b 7f       	andi	r24, 0xFB	; 251
     c2c:	8c 93       	st	X, r24

	/***** Setting BIT 5 in ADCSRA ***/
	SET_BIT(ADCSRA,ADCSRA_ADATE);
     c2e:	a6 e2       	ldi	r26, 0x26	; 38
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e6 e2       	ldi	r30, 0x26	; 38
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	80 62       	ori	r24, 0x20	; 32
     c3a:	8c 93       	st	X, r24

}
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <ADC_voidEnable>:

void ADC_voidEnable(void)
{
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
	/** Enabling ADC peripheral**/

	SET_BIT(ADCSRA,ADCSRA_ADEN);
     c4a:	a6 e2       	ldi	r26, 0x26	; 38
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e6 e2       	ldi	r30, 0x26	; 38
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	80 68       	ori	r24, 0x80	; 128
     c56:	8c 93       	st	X, r24
}
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <ADC_voidDisable>:
void ADC_voidDisable(void)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	/**Disabling ADC peripheral **/
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
     c66:	a6 e2       	ldi	r26, 0x26	; 38
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e6 e2       	ldi	r30, 0x26	; 38
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	8c 93       	st	X, r24
}
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <ADC_voidInterruptEnable>:

void ADC_voidInterruptEnable(void)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
	/**Enabling PIE **/
	SET_BIT(ADCSRA,ADCSRA_ADIE);
     c82:	a6 e2       	ldi	r26, 0x26	; 38
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e6 e2       	ldi	r30, 0x26	; 38
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 60       	ori	r24, 0x08	; 8
     c8e:	8c 93       	st	X, r24

}
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <ADC_voidInterruptDisable>:
void ADC_voidInterruptDisable(void)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
	/** Disbling Interrupt **/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     c9e:	a6 e2       	ldi	r26, 0x26	; 38
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e6 e2       	ldi	r30, 0x26	; 38
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	87 7f       	andi	r24, 0xF7	; 247
     caa:	8c 93       	st	X, r24
	/** Clear Flag **/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     cac:	a6 e2       	ldi	r26, 0x26	; 38
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e6 e2       	ldi	r30, 0x26	; 38
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	80 61       	ori	r24, 0x10	; 16
     cb8:	8c 93       	st	X, r24

}
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <ADC_uint16GetDigitalValue>:

/** Function for one sample **/

/** For Polling **/
uint16 ADC_uint16GetDigitalValue(uint8 Copy_uint8ChannelNum)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	0f 92       	push	r0
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	89 83       	std	Y+1, r24	; 0x01
	/**Clear channel number bits **/

	ADMUX &= ADC_CHANNEL_MSK;
     ccc:	a7 e2       	ldi	r26, 0x27	; 39
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e7 e2       	ldi	r30, 0x27	; 39
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	80 7e       	andi	r24, 0xE0	; 224
     cd8:	8c 93       	st	X, r24

	/** Select channel Number **/

	ADMUX |= Copy_uint8ChannelNum;
     cda:	a7 e2       	ldi	r26, 0x27	; 39
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e7 e2       	ldi	r30, 0x27	; 39
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	90 81       	ld	r25, Z
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	89 2b       	or	r24, r25
     ce8:	8c 93       	st	X, r24

	/** After choosing the channel i start conversion**/

	SET_BIT(ADCSRA,ADCSRA_ADSC);
     cea:	a6 e2       	ldi	r26, 0x26	; 38
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e6 e2       	ldi	r30, 0x26	; 38
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	80 64       	ori	r24, 0x40	; 64
     cf6:	8c 93       	st	X, r24
	/*polling technique*/

	while(GET_BIT(ADCSRA,ADCSRA_ADIF) == 0);
     cf8:	e6 e2       	ldi	r30, 0x26	; 38
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	82 95       	swap	r24
     d00:	8f 70       	andi	r24, 0x0F	; 15
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	81 70       	andi	r24, 0x01	; 1
     d08:	90 70       	andi	r25, 0x00	; 0
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	a9 f3       	breq	.-22     	; 0xcf8 <ADC_uint16GetDigitalValue+0x38>
	/** Clearing the flag **/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     d0e:	a6 e2       	ldi	r26, 0x26	; 38
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e6 e2       	ldi	r30, 0x26	; 38
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 61       	ori	r24, 0x10	; 16
     d1a:	8c 93       	st	X, r24

	/** Read the ADC Value **/
	return ADC;
     d1c:	e4 e2       	ldi	r30, 0x24	; 36
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
}
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <ADC_u16StartConversion>:
/*********************************/
/** For Interrupt **/

void ADC_u16StartConversion(uint8 Copy_uint8ChannelNum)
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ADC_CHANNEL_MSK;
     d38:	a7 e2       	ldi	r26, 0x27	; 39
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e2       	ldi	r30, 0x27	; 39
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 7e       	andi	r24, 0xE0	; 224
     d44:	8c 93       	st	X, r24
	ADMUX |= Copy_uint8ChannelNum;
     d46:	a7 e2       	ldi	r26, 0x27	; 39
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e7 e2       	ldi	r30, 0x27	; 39
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	90 81       	ld	r25, Z
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	89 2b       	or	r24, r25
     d54:	8c 93       	st	X, r24

	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     d56:	a6 e2       	ldi	r26, 0x26	; 38
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e6 e2       	ldi	r30, 0x26	; 38
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	80 64       	ori	r24, 0x40	; 64
     d62:	8c 93       	st	X, r24

}
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <ADC_CallBck>:


void ADC_CallBck(void (*Copy_ptr)(void))
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	00 d0       	rcall	.+0      	; 0xd72 <ADC_CallBck+0x6>
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	9a 83       	std	Y+2, r25	; 0x02
     d78:	89 83       	std	Y+1, r24	; 0x01
	Funcptr = Copy_ptr;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	90 93 a5 00 	sts	0x00A5, r25
     d82:	80 93 a4 00 	sts	0x00A4, r24
}
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <__vector_16>:


/** ISR of ADC**/
void __vector_16 (void) __attribute((signal));
void __vector_16 (void)
{
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
	if(Funcptr != NULL)
     dba:	80 91 a4 00 	lds	r24, 0x00A4
     dbe:	90 91 a5 00 	lds	r25, 0x00A5
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	29 f0       	breq	.+10     	; 0xdd0 <__vector_16+0x40>
	{
		Funcptr();
     dc6:	e0 91 a4 00 	lds	r30, 0x00A4
     dca:	f0 91 a5 00 	lds	r31, 0x00A5
     dce:	09 95       	icall
	}
}
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	ff 91       	pop	r31
     dd6:	ef 91       	pop	r30
     dd8:	bf 91       	pop	r27
     dda:	af 91       	pop	r26
     ddc:	9f 91       	pop	r25
     dde:	8f 91       	pop	r24
     de0:	7f 91       	pop	r23
     de2:	6f 91       	pop	r22
     de4:	5f 91       	pop	r21
     de6:	4f 91       	pop	r20
     de8:	3f 91       	pop	r19
     dea:	2f 91       	pop	r18
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <voidSendEnablePulse>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"


static void voidSendEnablePulse(void)
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	2e 97       	sbiw	r28, 0x0e	; 14
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8SetPinValue>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a0 e0       	ldi	r26, 0x00	; 0
     e1a:	b0 e4       	ldi	r27, 0x40	; 64
     e1c:	8b 87       	std	Y+11, r24	; 0x0b
     e1e:	9c 87       	std	Y+12, r25	; 0x0c
     e20:	ad 87       	std	Y+13, r26	; 0x0d
     e22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e24:	6b 85       	ldd	r22, Y+11	; 0x0b
     e26:	7c 85       	ldd	r23, Y+12	; 0x0c
     e28:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	4a e7       	ldi	r20, 0x7A	; 122
     e32:	55 e4       	ldi	r21, 0x45	; 69
     e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	8f 83       	std	Y+7, r24	; 0x07
     e3e:	98 87       	std	Y+8, r25	; 0x08
     e40:	a9 87       	std	Y+9, r26	; 0x09
     e42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e44:	6f 81       	ldd	r22, Y+7	; 0x07
     e46:	78 85       	ldd	r23, Y+8	; 0x08
     e48:	89 85       	ldd	r24, Y+9	; 0x09
     e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e8       	ldi	r20, 0x80	; 128
     e52:	5f e3       	ldi	r21, 0x3F	; 63
     e54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e58:	88 23       	and	r24, r24
     e5a:	2c f4       	brge	.+10     	; 0xe66 <voidSendEnablePulse+0x70>
		__ticks = 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     e66:	6f 81       	ldd	r22, Y+7	; 0x07
     e68:	78 85       	ldd	r23, Y+8	; 0x08
     e6a:	89 85       	ldd	r24, Y+9	; 0x09
     e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	3f ef       	ldi	r19, 0xFF	; 255
     e72:	4f e7       	ldi	r20, 0x7F	; 127
     e74:	57 e4       	ldi	r21, 0x47	; 71
     e76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e7a:	18 16       	cp	r1, r24
     e7c:	4c f5       	brge	.+82     	; 0xed0 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e80:	7c 85       	ldd	r23, Y+12	; 0x0c
     e82:	8d 85       	ldd	r24, Y+13	; 0x0d
     e84:	9e 85       	ldd	r25, Y+14	; 0x0e
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e2       	ldi	r20, 0x20	; 32
     e8c:	51 e4       	ldi	r21, 0x41	; 65
     e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	9e 83       	std	Y+6, r25	; 0x06
     ea4:	8d 83       	std	Y+5, r24	; 0x05
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <voidSendEnablePulse+0xd0>
     ea8:	80 e9       	ldi	r24, 0x90	; 144
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	9c 83       	std	Y+4, r25	; 0x04
     eae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <voidSendEnablePulse+0xbe>
     eb8:	9c 83       	std	Y+4, r25	; 0x04
     eba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	9e 83       	std	Y+6, r25	; 0x06
     ec4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	9e 81       	ldd	r25, Y+6	; 0x06
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	69 f7       	brne	.-38     	; 0xea8 <voidSendEnablePulse+0xb2>
     ece:	14 c0       	rjmp	.+40     	; 0xef8 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed0:	6f 81       	ldd	r22, Y+7	; 0x07
     ed2:	78 85       	ldd	r23, Y+8	; 0x08
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	8d 83       	std	Y+5, r24	; 0x05
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <voidSendEnablePulse+0xfa>
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	62 e0       	ldi	r22, 0x02	; 2
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8SetPinValue>
}
     f02:	2e 96       	adiw	r28, 0x0e	; 14
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <voidSetLCDHalfDataPort>:


static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	98 2f       	mov	r25, r24
     f24:	91 70       	andi	r25, 0x01	; 1
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	49 2f       	mov	r20, r25
     f2c:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	86 95       	lsr	r24
     f34:	98 2f       	mov	r25, r24
     f36:	91 70       	andi	r25, 0x01	; 1
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	49 2f       	mov	r20, r25
     f3e:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	86 95       	lsr	r24
     f46:	86 95       	lsr	r24
     f48:	98 2f       	mov	r25, r24
     f4a:	91 70       	andi	r25, 0x01	; 1
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	62 e0       	ldi	r22, 0x02	; 2
     f50:	49 2f       	mov	r20, r25
     f52:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	86 95       	lsr	r24
     f5a:	86 95       	lsr	r24
     f5c:	86 95       	lsr	r24
     f5e:	98 2f       	mov	r25, r24
     f60:	91 70       	andi	r25, 0x01	; 1
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	64 e0       	ldi	r22, 0x04	; 4
     f66:	49 2f       	mov	r20, r25
     f68:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8SetPinValue>
}
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <CLCD_voidSendCmd>:


void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	63 e0       	ldi	r22, 0x03	; 3
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	82 95       	swap	r24
     f8e:	8f 70       	andi	r24, 0x0F	; 15
     f90:	0e 94 8a 07 	call	0xf14	; 0xf14 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     f94:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	0e 94 8a 07 	call	0xf14	; 0xf14 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     f9e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <voidSendEnablePulse>
#endif
}
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	0f 92       	push	r0
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	63 e0       	ldi	r22, 0x03	; 3
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	82 95       	swap	r24
     fc4:	8f 70       	andi	r24, 0x0F	; 15
     fc6:	0e 94 8a 07 	call	0xf14	; 0xf14 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     fca:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	0e 94 8a 07 	call	0xf14	; 0xf14 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     fd4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <voidSendEnablePulse>
#endif

}
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	2e 97       	sbiw	r28, 0x0e	; 14
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61

	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN3, DIO_u8PIN_OUTPUT); //RS
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	63 e0       	ldi	r22, 0x03	; 3
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN2, DIO_u8PIN_OUTPUT);//E
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	62 e0       	ldi	r22, 0x02	; 2
    1002:	41 e0       	ldi	r20, 0x01	; 1
    1004:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_OUTPUT);//D4
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	41 e0       	ldi	r20, 0x01	; 1
    100e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN1, DIO_u8PIN_OUTPUT);//D4
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	41 e0       	ldi	r20, 0x01	; 1
    1018:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN2, DIO_u8PIN_OUTPUT);//D4
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	62 e0       	ldi	r22, 0x02	; 2
    1020:	41 e0       	ldi	r20, 0x01	; 1
    1022:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB, DIO_u8PIN4, DIO_u8PIN_OUTPUT);//D4
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	64 e0       	ldi	r22, 0x04	; 4
    102a:	41 e0       	ldi	r20, 0x01	; 1
    102c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_u8SetPinDirection>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a0 e2       	ldi	r26, 0x20	; 32
    1036:	b2 e4       	ldi	r27, 0x42	; 66
    1038:	8b 87       	std	Y+11, r24	; 0x0b
    103a:	9c 87       	std	Y+12, r25	; 0x0c
    103c:	ad 87       	std	Y+13, r26	; 0x0d
    103e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1040:	6b 85       	ldd	r22, Y+11	; 0x0b
    1042:	7c 85       	ldd	r23, Y+12	; 0x0c
    1044:	8d 85       	ldd	r24, Y+13	; 0x0d
    1046:	9e 85       	ldd	r25, Y+14	; 0x0e
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	4a e7       	ldi	r20, 0x7A	; 122
    104e:	55 e4       	ldi	r21, 0x45	; 69
    1050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	8f 83       	std	Y+7, r24	; 0x07
    105a:	98 87       	std	Y+8, r25	; 0x08
    105c:	a9 87       	std	Y+9, r26	; 0x09
    105e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1060:	6f 81       	ldd	r22, Y+7	; 0x07
    1062:	78 85       	ldd	r23, Y+8	; 0x08
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e8       	ldi	r20, 0x80	; 128
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1074:	88 23       	and	r24, r24
    1076:	2c f4       	brge	.+10     	; 0x1082 <CLCD_voidInit+0xa2>
		__ticks = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9e 83       	std	Y+6, r25	; 0x06
    107e:	8d 83       	std	Y+5, r24	; 0x05
    1080:	3f c0       	rjmp	.+126    	; 0x1100 <CLCD_voidInit+0x120>
	else if (__tmp > 65535)
    1082:	6f 81       	ldd	r22, Y+7	; 0x07
    1084:	78 85       	ldd	r23, Y+8	; 0x08
    1086:	89 85       	ldd	r24, Y+9	; 0x09
    1088:	9a 85       	ldd	r25, Y+10	; 0x0a
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	57 e4       	ldi	r21, 0x47	; 71
    1092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1096:	18 16       	cp	r1, r24
    1098:	4c f5       	brge	.+82     	; 0x10ec <CLCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109a:	6b 85       	ldd	r22, Y+11	; 0x0b
    109c:	7c 85       	ldd	r23, Y+12	; 0x0c
    109e:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e2       	ldi	r20, 0x20	; 32
    10a8:	51 e4       	ldi	r21, 0x41	; 65
    10aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	9e 83       	std	Y+6, r25	; 0x06
    10c0:	8d 83       	std	Y+5, r24	; 0x05
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <CLCD_voidInit+0x102>
    10c4:	80 e9       	ldi	r24, 0x90	; 144
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	9c 83       	std	Y+4, r25	; 0x04
    10ca:	8b 83       	std	Y+3, r24	; 0x03
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <CLCD_voidInit+0xf0>
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	9e 83       	std	Y+6, r25	; 0x06
    10e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	69 f7       	brne	.-38     	; 0x10c4 <CLCD_voidInit+0xe4>
    10ea:	14 c0       	rjmp	.+40     	; 0x1114 <CLCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ec:	6f 81       	ldd	r22, Y+7	; 0x07
    10ee:	78 85       	ldd	r23, Y+8	; 0x08
    10f0:	89 85       	ldd	r24, Y+9	; 0x09
    10f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9e 83       	std	Y+6, r25	; 0x06
    10fe:	8d 83       	std	Y+5, r24	; 0x05
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	9a 81       	ldd	r25, Y+2	; 0x02
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <CLCD_voidInit+0x12c>
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	0e 94 8a 07 	call	0xf14	; 0xf14 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    111a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	0e 94 8a 07 	call	0xf14	; 0xf14 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1124:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    1128:	88 e0       	ldi	r24, 0x08	; 8
    112a:	0e 94 8a 07 	call	0xf14	; 0xf14 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    112e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    1132:	8c e0       	ldi	r24, 0x0C	; 12
    1134:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendCmd>
}
    113e:	2e 96       	adiw	r28, 0x0e	; 14
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <CLCD_u8SendString>:


uint8 CLCD_u8SendString(const char* Copy_chString)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <CLCD_u8SendString+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <CLCD_u8SendString+0x8>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	9c 83       	std	Y+4, r25	; 0x04
    115e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState= OK;
    1160:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chString != NULL)
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	e1 f0       	breq	.+56     	; 0x11a2 <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Counter=0u;
    116a:	19 82       	std	Y+1, r1	; 0x01
    116c:	0e c0       	rjmp	.+28     	; 0x118a <CLCD_u8SendString+0x3a>
		while(Copy_chString[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	fc 01       	movw	r30, r24
    117a:	e2 0f       	add	r30, r18
    117c:	f3 1f       	adc	r31, r19
    117e:	80 81       	ld	r24, Z
    1180:	0e 94 d5 07 	call	0xfaa	; 0xfaa <CLCD_voidSendData>
			Local_u8Counter++;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState= OK;
	if(Copy_chString != NULL)
	{
		uint8 Local_u8Counter=0u;
		while(Copy_chString[Local_u8Counter] != '\0')
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	fc 01       	movw	r30, r24
    1196:	e2 0f       	add	r30, r18
    1198:	f3 1f       	adc	r31, r19
    119a:	80 81       	ld	r24, Z
    119c:	88 23       	and	r24, r24
    119e:	39 f7       	brne	.-50     	; 0x116e <CLCD_u8SendString+0x1e>
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	61 97       	sbiw	r28, 0x11	; 17
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	6e 87       	std	Y+14, r22	; 0x0e
    11cc:	7f 87       	std	Y+15, r23	; 0x0f
    11ce:	88 8b       	std	Y+16, r24	; 0x10
    11d0:	99 8b       	std	Y+17, r25	; 0x11
	char Local_u8ChArr[10];
	uint8 Local_RightDigit;
	uint8 Local_u32Counter1 = 0;
    11d2:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_u32Counter2 = 0;
    11d4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_s32Number == 0)
    11d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    11d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    11da:	a8 89       	ldd	r26, Y+16	; 0x10
    11dc:	b9 89       	ldd	r27, Y+17	; 0x11
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	a1 05       	cpc	r26, r1
    11e2:	b1 05       	cpc	r27, r1
    11e4:	21 f4       	brne	.+8      	; 0x11ee <CLCD_voidSendNumber+0x38>
	{
		CLCD_voidSendData('0');
    11e6:	80 e3       	ldi	r24, 0x30	; 48
    11e8:	0e 94 d5 07 	call	0xfaa	; 0xfaa <CLCD_voidSendData>
    11ec:	69 c0       	rjmp	.+210    	; 0x12c0 <CLCD_voidSendNumber+0x10a>
		return;
	}
	else if (Copy_s32Number < 0)
    11ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    11f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    11f2:	a8 89       	ldd	r26, Y+16	; 0x10
    11f4:	b9 89       	ldd	r27, Y+17	; 0x11
    11f6:	bb 23       	and	r27, r27
    11f8:	0c f0       	brlt	.+2      	; 0x11fc <CLCD_voidSendNumber+0x46>
    11fa:	43 c0       	rjmp	.+134    	; 0x1282 <CLCD_voidSendNumber+0xcc>
	{
		CLCD_voidSendData('-');
    11fc:	8d e2       	ldi	r24, 0x2D	; 45
    11fe:	0e 94 d5 07 	call	0xfaa	; 0xfaa <CLCD_voidSendData>
		Copy_s32Number *= -1;
    1202:	8e 85       	ldd	r24, Y+14	; 0x0e
    1204:	9f 85       	ldd	r25, Y+15	; 0x0f
    1206:	a8 89       	ldd	r26, Y+16	; 0x10
    1208:	b9 89       	ldd	r27, Y+17	; 0x11
    120a:	b0 95       	com	r27
    120c:	a0 95       	com	r26
    120e:	90 95       	com	r25
    1210:	81 95       	neg	r24
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	af 4f       	sbci	r26, 0xFF	; 255
    1216:	bf 4f       	sbci	r27, 0xFF	; 255
    1218:	8e 87       	std	Y+14, r24	; 0x0e
    121a:	9f 87       	std	Y+15, r25	; 0x0f
    121c:	a8 8b       	std	Y+16, r26	; 0x10
    121e:	b9 8b       	std	Y+17, r27	; 0x11
    1220:	30 c0       	rjmp	.+96     	; 0x1282 <CLCD_voidSendNumber+0xcc>
	}

	while (Copy_s32Number != 0)
	{
		Local_RightDigit = Copy_s32Number % 10;
    1222:	8e 85       	ldd	r24, Y+14	; 0x0e
    1224:	9f 85       	ldd	r25, Y+15	; 0x0f
    1226:	a8 89       	ldd	r26, Y+16	; 0x10
    1228:	b9 89       	ldd	r27, Y+17	; 0x11
    122a:	2a e0       	ldi	r18, 0x0A	; 10
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	0e 94 44 10 	call	0x2088	; 0x2088 <__divmodsi4>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number /= 10;
    1240:	8e 85       	ldd	r24, Y+14	; 0x0e
    1242:	9f 85       	ldd	r25, Y+15	; 0x0f
    1244:	a8 89       	ldd	r26, Y+16	; 0x10
    1246:	b9 89       	ldd	r27, Y+17	; 0x11
    1248:	2a e0       	ldi	r18, 0x0A	; 10
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	bc 01       	movw	r22, r24
    1252:	cd 01       	movw	r24, r26
    1254:	0e 94 44 10 	call	0x2088	; 0x2088 <__divmodsi4>
    1258:	da 01       	movw	r26, r20
    125a:	c9 01       	movw	r24, r18
    125c:	8e 87       	std	Y+14, r24	; 0x0e
    125e:	9f 87       	std	Y+15, r25	; 0x0f
    1260:	a8 8b       	std	Y+16, r26	; 0x10
    1262:	b9 8b       	std	Y+17, r27	; 0x11
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	48 2f       	mov	r20, r24
    126e:	40 5d       	subi	r20, 0xD0	; 208
    1270:	ce 01       	movw	r24, r28
    1272:	04 96       	adiw	r24, 0x04	; 4
    1274:	fc 01       	movw	r30, r24
    1276:	e2 0f       	add	r30, r18
    1278:	f3 1f       	adc	r31, r19
    127a:	40 83       	st	Z, r20
		Local_u32Counter1++;
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('-');
		Copy_s32Number *= -1;
	}

	while (Copy_s32Number != 0)
    1282:	8e 85       	ldd	r24, Y+14	; 0x0e
    1284:	9f 85       	ldd	r25, Y+15	; 0x0f
    1286:	a8 89       	ldd	r26, Y+16	; 0x10
    1288:	b9 89       	ldd	r27, Y+17	; 0x11
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	a1 05       	cpc	r26, r1
    128e:	b1 05       	cpc	r27, r1
    1290:	41 f6       	brne	.-112    	; 0x1222 <CLCD_voidSendNumber+0x6c>
		Copy_s32Number /= 10;
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
		Local_u32Counter1++;
	}

	for (Local_u32Counter2 = Local_u32Counter1 - 1; Local_u32Counter2 >= 0; Local_u32Counter2--)
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	81 50       	subi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	10 c0       	rjmp	.+32     	; 0x12ba <CLCD_voidSendNumber+0x104>
	{
		CLCD_voidSendData(Local_u8ChArr[Local_u32Counter2]);
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	33 27       	eor	r19, r19
    12a0:	27 fd       	sbrc	r18, 7
    12a2:	30 95       	com	r19
    12a4:	ce 01       	movw	r24, r28
    12a6:	04 96       	adiw	r24, 0x04	; 4
    12a8:	fc 01       	movw	r30, r24
    12aa:	e2 0f       	add	r30, r18
    12ac:	f3 1f       	adc	r31, r19
    12ae:	80 81       	ld	r24, Z
    12b0:	0e 94 d5 07 	call	0xfaa	; 0xfaa <CLCD_voidSendData>
		Copy_s32Number /= 10;
		Local_u8ChArr[Local_u32Counter1] = Local_RightDigit + '0';
		Local_u32Counter1++;
	}

	for (Local_u32Counter2 = Local_u32Counter1 - 1; Local_u32Counter2 >= 0; Local_u32Counter2--)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	81 50       	subi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	88 23       	and	r24, r24
    12be:	6c f7       	brge	.-38     	; 0x129a <CLCD_voidSendNumber+0xe4>
	{
		CLCD_voidSendData(Local_u8ChArr[Local_u32Counter2]);
	}
}
    12c0:	61 96       	adiw	r28, 0x11	; 17
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <CLCD_voidGoToXY>:


/************************ Go to x and y Simple *****************/

void CLCD_voidGoToXY(uint8 Copy_u8Row,uint8 Copy_u8Col)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <CLCD_voidGoToXY+0x6>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <CLCD_voidGoToXY+0x8>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	8a 83       	std	Y+2, r24	; 0x02
    12e2:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_Address;

	switch(Copy_u8Row)
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3d 83       	std	Y+5, r19	; 0x05
    12ec:	2c 83       	std	Y+4, r18	; 0x04
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	91 05       	cpc	r25, r1
    12f6:	c1 f0       	breq	.+48     	; 0x1328 <CLCD_voidGoToXY+0x56>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	2c f4       	brge	.+10     	; 0x130c <CLCD_voidGoToXY+0x3a>
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	61 f0       	breq	.+24     	; 0x1322 <CLCD_voidGoToXY+0x50>
    130a:	19 c0       	rjmp	.+50     	; 0x133e <CLCD_voidGoToXY+0x6c>
    130c:	2c 81       	ldd	r18, Y+4	; 0x04
    130e:	3d 81       	ldd	r19, Y+5	; 0x05
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	69 f0       	breq	.+26     	; 0x1330 <CLCD_voidGoToXY+0x5e>
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	91 05       	cpc	r25, r1
    131e:	61 f0       	breq	.+24     	; 0x1338 <CLCD_voidGoToXY+0x66>
    1320:	0e c0       	rjmp	.+28     	; 0x133e <CLCD_voidGoToXY+0x6c>
	{
	case 0: Local_Address = 0x00+Copy_u8Col;	break;
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	0b c0       	rjmp	.+22     	; 0x133e <CLCD_voidGoToXY+0x6c>
	case 1: Local_Address = 0x40+Copy_u8Col;	break;
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	80 5c       	subi	r24, 0xC0	; 192
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	07 c0       	rjmp	.+14     	; 0x133e <CLCD_voidGoToXY+0x6c>
	case 2: Local_Address = 0x14+Copy_u8Col;	break;
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	8c 5e       	subi	r24, 0xEC	; 236
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	03 c0       	rjmp	.+6      	; 0x133e <CLCD_voidGoToXY+0x6c>
	case 3: Local_Address = 0x54+Copy_u8Col;	break;
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	8c 5a       	subi	r24, 0xAC	; 172
    133c:	89 83       	std	Y+1, r24	; 0x01

	}

	CLCD_voidSendCmd(Local_Address+DDRAM_ADDRESS);
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	80 58       	subi	r24, 0x80	; 128
    1342:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendCmd>


}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <CLCD_voidClrScr>:



void CLCD_voidClrScr(void)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendCmd>
}
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <CLCD_voidCursorON>:
void CLCD_voidCursorON(void)
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x0D);
    1372:	8d e0       	ldi	r24, 0x0D	; 13
    1374:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendCmd>
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <CLCD_voidCursorOFF>:
void CLCD_voidCursorOFF(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidSendCmd(0x0C);
    1386:	8c e0       	ldi	r24, 0x0C	; 12
    1388:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendCmd>

}
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <DIO_u8SetPinValue>:
#include"DIO_prv.h"
#include"DIO_reg.h"


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)//which port we want to srt, and which pin
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	28 97       	sbiw	r28, 0x08	; 8
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	6b 83       	std	Y+3, r22	; 0x03
    13aa:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    13ac:	19 82       	std	Y+1, r1	; 0x01

		if (Copy_u8Pin <= DIO_u8PIN7)
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 30       	cpi	r24, 0x08	; 8
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <DIO_u8SetPinValue+0x24>
    13b4:	f4 c0       	rjmp	.+488    	; 0x159e <DIO_u8SetPinValue+0x20c>
		{
			if(Copy_u8Value == DIO_u8PIN_LOW)
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	88 23       	and	r24, r24
    13ba:	09 f0       	breq	.+2      	; 0x13be <DIO_u8SetPinValue+0x2c>
    13bc:	77 c0       	rjmp	.+238    	; 0x14ac <DIO_u8SetPinValue+0x11a>
			{
				switch(Copy_u8Port)//which port you want it as input
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	38 87       	std	Y+8, r19	; 0x08
    13c6:	2f 83       	std	Y+7, r18	; 0x07
    13c8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ca:	98 85       	ldd	r25, Y+8	; 0x08
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	91 05       	cpc	r25, r1
    13d0:	59 f1       	breq	.+86     	; 0x1428 <DIO_u8SetPinValue+0x96>
    13d2:	2f 81       	ldd	r18, Y+7	; 0x07
    13d4:	38 85       	ldd	r19, Y+8	; 0x08
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	2c f4       	brge	.+10     	; 0x13e6 <DIO_u8SetPinValue+0x54>
    13dc:	8f 81       	ldd	r24, Y+7	; 0x07
    13de:	98 85       	ldd	r25, Y+8	; 0x08
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	69 f0       	breq	.+26     	; 0x13fe <DIO_u8SetPinValue+0x6c>
    13e4:	60 c0       	rjmp	.+192    	; 0x14a6 <DIO_u8SetPinValue+0x114>
    13e6:	2f 81       	ldd	r18, Y+7	; 0x07
    13e8:	38 85       	ldd	r19, Y+8	; 0x08
    13ea:	22 30       	cpi	r18, 0x02	; 2
    13ec:	31 05       	cpc	r19, r1
    13ee:	89 f1       	breq	.+98     	; 0x1452 <DIO_u8SetPinValue+0xc0>
    13f0:	8f 81       	ldd	r24, Y+7	; 0x07
    13f2:	98 85       	ldd	r25, Y+8	; 0x08
    13f4:	83 30       	cpi	r24, 0x03	; 3
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <DIO_u8SetPinValue+0x6a>
    13fa:	40 c0       	rjmp	.+128    	; 0x147c <DIO_u8SetPinValue+0xea>
    13fc:	54 c0       	rjmp	.+168    	; 0x14a6 <DIO_u8SetPinValue+0x114>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    13fe:	ab e3       	ldi	r26, 0x3B	; 59
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	eb e3       	ldi	r30, 0x3B	; 59
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_u8SetPinValue+0x8a>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_u8SetPinValue+0x86>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	bd c0       	rjmp	.+378    	; 0x15a2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1428:	a8 e3       	ldi	r26, 0x38	; 56
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e8 e3       	ldi	r30, 0x38	; 56
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_u8SetPinValue+0xb4>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_u8SetPinValue+0xb0>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	a8 c0       	rjmp	.+336    	; 0x15a2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1452:	a5 e3       	ldi	r26, 0x35	; 53
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e3       	ldi	r30, 0x35	; 53
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_u8SetPinValue+0xde>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_u8SetPinValue+0xda>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	93 c0       	rjmp	.+294    	; 0x15a2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    147c:	a2 e3       	ldi	r26, 0x32	; 50
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e2 e3       	ldi	r30, 0x32	; 50
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_u8SetPinValue+0x108>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_u8SetPinValue+0x104>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	7e c0       	rjmp	.+252    	; 0x15a2 <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState = NOK; break;//Not any port
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	7b c0       	rjmp	.+246    	; 0x15a2 <DIO_u8SetPinValue+0x210>
				}
			}
			else if(Copy_u8Value == DIO_u8PIN_HIGH)
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <DIO_u8SetPinValue+0x122>
    14b2:	72 c0       	rjmp	.+228    	; 0x1598 <DIO_u8SetPinValue+0x206>
			{
				switch(Copy_u8Port)//which port you want it as input
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3e 83       	std	Y+6, r19	; 0x06
    14bc:	2d 83       	std	Y+5, r18	; 0x05
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	49 f1       	breq	.+82     	; 0x151a <DIO_u8SetPinValue+0x188>
    14c8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ca:	3e 81       	ldd	r19, Y+6	; 0x06
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	2c f4       	brge	.+10     	; 0x14dc <DIO_u8SetPinValue+0x14a>
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	61 f0       	breq	.+24     	; 0x14f2 <DIO_u8SetPinValue+0x160>
    14da:	5b c0       	rjmp	.+182    	; 0x1592 <DIO_u8SetPinValue+0x200>
    14dc:	2d 81       	ldd	r18, Y+5	; 0x05
    14de:	3e 81       	ldd	r19, Y+6	; 0x06
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	71 f1       	breq	.+92     	; 0x1542 <DIO_u8SetPinValue+0x1b0>
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	e9 f1       	breq	.+122    	; 0x156a <DIO_u8SetPinValue+0x1d8>
    14f0:	50 c0       	rjmp	.+160    	; 0x1592 <DIO_u8SetPinValue+0x200>
				{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    14f2:	ab e3       	ldi	r26, 0x3B	; 59
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	eb e3       	ldi	r30, 0x3B	; 59
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_u8SetPinValue+0x17e>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_u8SetPinValue+0x17a>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	44 c0       	rjmp	.+136    	; 0x15a2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    151a:	a8 e3       	ldi	r26, 0x38	; 56
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e8 e3       	ldi	r30, 0x38	; 56
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_u8SetPinValue+0x1a6>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_u8SetPinValue+0x1a2>
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	30 c0       	rjmp	.+96     	; 0x15a2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1542:	a5 e3       	ldi	r26, 0x35	; 53
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_u8SetPinValue+0x1ce>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_u8SetPinValue+0x1ca>
    1564:	84 2b       	or	r24, r20
    1566:	8c 93       	st	X, r24
    1568:	1c c0       	rjmp	.+56     	; 0x15a2 <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    156a:	a2 e3       	ldi	r26, 0x32	; 50
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e2 e3       	ldi	r30, 0x32	; 50
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_u8SetPinValue+0x1f6>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_u8SetPinValue+0x1f2>
    158c:	84 2b       	or	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	08 c0       	rjmp	.+16     	; 0x15a2 <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState = NOK; break;//Not any port
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <DIO_u8SetPinValue+0x210>
				}
			}
			else
			{
				Local_u8ErrorState = NOK;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	89 83       	std	Y+1, r24	; 0x01
		}


		return Local_u8ErrorState;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a4:	28 96       	adiw	r28, 0x08	; 8
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <DIO_u8SetPinDirection>:




uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)//which port we want to srt, and which pin
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	28 97       	sbiw	r28, 0x08	; 8
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	6b 83       	std	Y+3, r22	; 0x03
    15ce:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    15d0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	88 30       	cpi	r24, 0x08	; 8
    15d6:	08 f0       	brcs	.+2      	; 0x15da <DIO_u8SetPinDirection+0x24>
    15d8:	f4 c0       	rjmp	.+488    	; 0x17c2 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	88 23       	and	r24, r24
    15de:	09 f0       	breq	.+2      	; 0x15e2 <DIO_u8SetPinDirection+0x2c>
    15e0:	77 c0       	rjmp	.+238    	; 0x16d0 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)//which port you want it as input
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	38 87       	std	Y+8, r19	; 0x08
    15ea:	2f 83       	std	Y+7, r18	; 0x07
    15ec:	8f 81       	ldd	r24, Y+7	; 0x07
    15ee:	98 85       	ldd	r25, Y+8	; 0x08
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	91 05       	cpc	r25, r1
    15f4:	59 f1       	breq	.+86     	; 0x164c <DIO_u8SetPinDirection+0x96>
    15f6:	2f 81       	ldd	r18, Y+7	; 0x07
    15f8:	38 85       	ldd	r19, Y+8	; 0x08
    15fa:	22 30       	cpi	r18, 0x02	; 2
    15fc:	31 05       	cpc	r19, r1
    15fe:	2c f4       	brge	.+10     	; 0x160a <DIO_u8SetPinDirection+0x54>
    1600:	8f 81       	ldd	r24, Y+7	; 0x07
    1602:	98 85       	ldd	r25, Y+8	; 0x08
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	69 f0       	breq	.+26     	; 0x1622 <DIO_u8SetPinDirection+0x6c>
    1608:	60 c0       	rjmp	.+192    	; 0x16ca <DIO_u8SetPinDirection+0x114>
    160a:	2f 81       	ldd	r18, Y+7	; 0x07
    160c:	38 85       	ldd	r19, Y+8	; 0x08
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	89 f1       	breq	.+98     	; 0x1676 <DIO_u8SetPinDirection+0xc0>
    1614:	8f 81       	ldd	r24, Y+7	; 0x07
    1616:	98 85       	ldd	r25, Y+8	; 0x08
    1618:	83 30       	cpi	r24, 0x03	; 3
    161a:	91 05       	cpc	r25, r1
    161c:	09 f4       	brne	.+2      	; 0x1620 <DIO_u8SetPinDirection+0x6a>
    161e:	40 c0       	rjmp	.+128    	; 0x16a0 <DIO_u8SetPinDirection+0xea>
    1620:	54 c0       	rjmp	.+168    	; 0x16ca <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    1622:	aa e3       	ldi	r26, 0x3A	; 58
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ea e3       	ldi	r30, 0x3A	; 58
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_u8SetPinDirection+0x8a>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_u8SetPinDirection+0x86>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	bd c0       	rjmp	.+378    	; 0x17c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    164c:	a7 e3       	ldi	r26, 0x37	; 55
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e7 e3       	ldi	r30, 0x37	; 55
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_u8SetPinDirection+0xb4>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_u8SetPinDirection+0xb0>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	a8 c0       	rjmp	.+336    	; 0x17c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    1676:	a4 e3       	ldi	r26, 0x34	; 52
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e4 e3       	ldi	r30, 0x34	; 52
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_u8SetPinDirection+0xde>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_u8SetPinDirection+0xda>
    1698:	80 95       	com	r24
    169a:	84 23       	and	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	93 c0       	rjmp	.+294    	; 0x17c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    16a0:	a1 e3       	ldi	r26, 0x31	; 49
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e1 e3       	ldi	r30, 0x31	; 49
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_u8SetPinDirection+0x108>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_u8SetPinDirection+0x104>
    16c2:	80 95       	com	r24
    16c4:	84 23       	and	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	7e c0       	rjmp	.+252    	; 0x17c6 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;//Not any port
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	7b c0       	rjmp	.+246    	; 0x17c6 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <DIO_u8SetPinDirection+0x122>
    16d6:	72 c0       	rjmp	.+228    	; 0x17bc <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)//which port you want it as input
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3e 83       	std	Y+6, r19	; 0x06
    16e0:	2d 83       	std	Y+5, r18	; 0x05
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	49 f1       	breq	.+82     	; 0x173e <DIO_u8SetPinDirection+0x188>
    16ec:	2d 81       	ldd	r18, Y+5	; 0x05
    16ee:	3e 81       	ldd	r19, Y+6	; 0x06
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	2c f4       	brge	.+10     	; 0x1700 <DIO_u8SetPinDirection+0x14a>
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	61 f0       	breq	.+24     	; 0x1716 <DIO_u8SetPinDirection+0x160>
    16fe:	5b c0       	rjmp	.+182    	; 0x17b6 <DIO_u8SetPinDirection+0x200>
    1700:	2d 81       	ldd	r18, Y+5	; 0x05
    1702:	3e 81       	ldd	r19, Y+6	; 0x06
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	71 f1       	breq	.+92     	; 0x1766 <DIO_u8SetPinDirection+0x1b0>
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	91 05       	cpc	r25, r1
    1712:	e9 f1       	breq	.+122    	; 0x178e <DIO_u8SetPinDirection+0x1d8>
    1714:	50 c0       	rjmp	.+160    	; 0x17b6 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    1716:	aa e3       	ldi	r26, 0x3A	; 58
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ea e3       	ldi	r30, 0x3A	; 58
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_u8SetPinDirection+0x17e>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <DIO_u8SetPinDirection+0x17a>
    1738:	84 2b       	or	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	44 c0       	rjmp	.+136    	; 0x17c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    173e:	a7 e3       	ldi	r26, 0x37	; 55
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e7 e3       	ldi	r30, 0x37	; 55
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_u8SetPinDirection+0x1a6>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_u8SetPinDirection+0x1a2>
    1760:	84 2b       	or	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	30 c0       	rjmp	.+96     	; 0x17c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    1766:	a4 e3       	ldi	r26, 0x34	; 52
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e4 e3       	ldi	r30, 0x34	; 52
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <DIO_u8SetPinDirection+0x1ce>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <DIO_u8SetPinDirection+0x1ca>
    1788:	84 2b       	or	r24, r20
    178a:	8c 93       	st	X, r24
    178c:	1c c0       	rjmp	.+56     	; 0x17c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    178e:	a1 e3       	ldi	r26, 0x31	; 49
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e1 e3       	ldi	r30, 0x31	; 49
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	48 2f       	mov	r20, r24
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	02 2e       	mov	r0, r18
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <DIO_u8SetPinDirection+0x1f6>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	0a 94       	dec	r0
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <DIO_u8SetPinDirection+0x1f2>
    17b0:	84 2b       	or	r24, r20
    17b2:	8c 93       	st	X, r24
    17b4:	08 c0       	rjmp	.+16     	; 0x17c6 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState = NOK; break;//Not any port
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	05 c0       	rjmp	.+10     	; 0x17c6 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c8:	28 96       	adiw	r28, 0x08	; 8
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <DIO_u8GetPinValue>:


uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)//which port we want to srt, and which pin
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	27 97       	sbiw	r28, 0x07	; 7
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	8a 83       	std	Y+2, r24	; 0x02
    17f0:	6b 83       	std	Y+3, r22	; 0x03
    17f2:	5d 83       	std	Y+5, r21	; 0x05
    17f4:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    17f6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	9d 81       	ldd	r25, Y+5	; 0x05
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	09 f4       	brne	.+2      	; 0x1802 <DIO_u8GetPinValue+0x28>
    1800:	7b c0       	rjmp	.+246    	; 0x18f8 <DIO_u8GetPinValue+0x11e>
	{
		if( Copy_u8Pin <= DIO_u8PIN7)
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	88 30       	cpi	r24, 0x08	; 8
    1806:	08 f0       	brcs	.+2      	; 0x180a <DIO_u8GetPinValue+0x30>
    1808:	74 c0       	rjmp	.+232    	; 0x18f2 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)//which port you want it as input
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3f 83       	std	Y+7, r19	; 0x07
    1812:	2e 83       	std	Y+6, r18	; 0x06
    1814:	4e 81       	ldd	r20, Y+6	; 0x06
    1816:	5f 81       	ldd	r21, Y+7	; 0x07
    1818:	41 30       	cpi	r20, 0x01	; 1
    181a:	51 05       	cpc	r21, r1
    181c:	59 f1       	breq	.+86     	; 0x1874 <DIO_u8GetPinValue+0x9a>
    181e:	8e 81       	ldd	r24, Y+6	; 0x06
    1820:	9f 81       	ldd	r25, Y+7	; 0x07
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	91 05       	cpc	r25, r1
    1826:	34 f4       	brge	.+12     	; 0x1834 <DIO_u8GetPinValue+0x5a>
    1828:	2e 81       	ldd	r18, Y+6	; 0x06
    182a:	3f 81       	ldd	r19, Y+7	; 0x07
    182c:	21 15       	cp	r18, r1
    182e:	31 05       	cpc	r19, r1
    1830:	69 f0       	breq	.+26     	; 0x184c <DIO_u8GetPinValue+0x72>
    1832:	5c c0       	rjmp	.+184    	; 0x18ec <DIO_u8GetPinValue+0x112>
    1834:	4e 81       	ldd	r20, Y+6	; 0x06
    1836:	5f 81       	ldd	r21, Y+7	; 0x07
    1838:	42 30       	cpi	r20, 0x02	; 2
    183a:	51 05       	cpc	r21, r1
    183c:	79 f1       	breq	.+94     	; 0x189c <DIO_u8GetPinValue+0xc2>
    183e:	8e 81       	ldd	r24, Y+6	; 0x06
    1840:	9f 81       	ldd	r25, Y+7	; 0x07
    1842:	83 30       	cpi	r24, 0x03	; 3
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <DIO_u8GetPinValue+0x70>
    1848:	3d c0       	rjmp	.+122    	; 0x18c4 <DIO_u8GetPinValue+0xea>
    184a:	50 c0       	rjmp	.+160    	; 0x18ec <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:*Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
    184c:	e9 e3       	ldi	r30, 0x39	; 57
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a9 01       	movw	r20, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_u8GetPinValue+0x8a>
    1860:	55 95       	asr	r21
    1862:	47 95       	ror	r20
    1864:	8a 95       	dec	r24
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_u8GetPinValue+0x86>
    1868:	ca 01       	movw	r24, r20
    186a:	81 70       	andi	r24, 0x01	; 1
    186c:	ec 81       	ldd	r30, Y+4	; 0x04
    186e:	fd 81       	ldd	r31, Y+5	; 0x05
    1870:	80 83       	st	Z, r24
    1872:	44 c0       	rjmp	.+136    	; 0x18fc <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTB:*Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
    1874:	e6 e3       	ldi	r30, 0x36	; 54
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a9 01       	movw	r20, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_u8GetPinValue+0xb2>
    1888:	55 95       	asr	r21
    188a:	47 95       	ror	r20
    188c:	8a 95       	dec	r24
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_u8GetPinValue+0xae>
    1890:	ca 01       	movw	r24, r20
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	ec 81       	ldd	r30, Y+4	; 0x04
    1896:	fd 81       	ldd	r31, Y+5	; 0x05
    1898:	80 83       	st	Z, r24
    189a:	30 c0       	rjmp	.+96     	; 0x18fc <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTC:*Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
    189c:	e3 e3       	ldi	r30, 0x33	; 51
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a9 01       	movw	r20, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_u8GetPinValue+0xda>
    18b0:	55 95       	asr	r21
    18b2:	47 95       	ror	r20
    18b4:	8a 95       	dec	r24
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <DIO_u8GetPinValue+0xd6>
    18b8:	ca 01       	movw	r24, r20
    18ba:	81 70       	andi	r24, 0x01	; 1
    18bc:	ec 81       	ldd	r30, Y+4	; 0x04
    18be:	fd 81       	ldd	r31, Y+5	; 0x05
    18c0:	80 83       	st	Z, r24
    18c2:	1c c0       	rjmp	.+56     	; 0x18fc <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTD:*Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
    18c4:	e0 e3       	ldi	r30, 0x30	; 48
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a9 01       	movw	r20, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_u8GetPinValue+0x102>
    18d8:	55 95       	asr	r21
    18da:	47 95       	ror	r20
    18dc:	8a 95       	dec	r24
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_u8GetPinValue+0xfe>
    18e0:	ca 01       	movw	r24, r20
    18e2:	81 70       	andi	r24, 0x01	; 1
    18e4:	ec 81       	ldd	r30, Y+4	; 0x04
    18e6:	fd 81       	ldd	r31, Y+5	; 0x05
    18e8:	80 83       	st	Z, r24
    18ea:	08 c0       	rjmp	.+16     	; 0x18fc <DIO_u8GetPinValue+0x122>
			default: Local_u8ErrorState = NOK; break;//Not any port
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_u8GetPinValue+0x122>
		}

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18fe:	27 96       	adiw	r28, 0x07	; 7
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <DIO_u8SetPortDirection+0x6>
    1916:	00 d0       	rcall	.+0      	; 0x1918 <DIO_u8SetPortDirection+0x8>
    1918:	0f 92       	push	r0
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	8a 83       	std	Y+2, r24	; 0x02
    1920:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1922:	19 82       	std	Y+1, r1	; 0x01


				switch(Copy_u8Port)//which port you want it as input
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	3d 83       	std	Y+5, r19	; 0x05
    192c:	2c 83       	std	Y+4, r18	; 0x04
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	9d 81       	ldd	r25, Y+5	; 0x05
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	91 05       	cpc	r25, r1
    1936:	d1 f0       	breq	.+52     	; 0x196c <DIO_u8SetPortDirection+0x5c>
    1938:	2c 81       	ldd	r18, Y+4	; 0x04
    193a:	3d 81       	ldd	r19, Y+5	; 0x05
    193c:	22 30       	cpi	r18, 0x02	; 2
    193e:	31 05       	cpc	r19, r1
    1940:	2c f4       	brge	.+10     	; 0x194c <DIO_u8SetPortDirection+0x3c>
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	61 f0       	breq	.+24     	; 0x1962 <DIO_u8SetPortDirection+0x52>
    194a:	1f c0       	rjmp	.+62     	; 0x198a <DIO_u8SetPortDirection+0x7a>
    194c:	2c 81       	ldd	r18, Y+4	; 0x04
    194e:	3d 81       	ldd	r19, Y+5	; 0x05
    1950:	22 30       	cpi	r18, 0x02	; 2
    1952:	31 05       	cpc	r19, r1
    1954:	81 f0       	breq	.+32     	; 0x1976 <DIO_u8SetPortDirection+0x66>
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	83 30       	cpi	r24, 0x03	; 3
    195c:	91 05       	cpc	r25, r1
    195e:	81 f0       	breq	.+32     	; 0x1980 <DIO_u8SetPortDirection+0x70>
    1960:	14 c0       	rjmp	.+40     	; 0x198a <DIO_u8SetPortDirection+0x7a>
				{
				case DIO_u8PORTA:DDRA = Copy_u8Direction; break;
    1962:	ea e3       	ldi	r30, 0x3A	; 58
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	80 83       	st	Z, r24
    196a:	11 c0       	rjmp	.+34     	; 0x198e <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTB:DDRB = Copy_u8Direction; break;
    196c:	e7 e3       	ldi	r30, 0x37	; 55
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	80 83       	st	Z, r24
    1974:	0c c0       	rjmp	.+24     	; 0x198e <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTC:DDRC = Copy_u8Direction; break;
    1976:	e4 e3       	ldi	r30, 0x34	; 52
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	80 83       	st	Z, r24
    197e:	07 c0       	rjmp	.+14     	; 0x198e <DIO_u8SetPortDirection+0x7e>
				case DIO_u8PORTD:DDRD = Copy_u8Direction; break;
    1980:	e1 e3       	ldi	r30, 0x31	; 49
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	80 83       	st	Z, r24
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_u8SetPortDirection+0x7e>
				default: Local_u8ErrorState = NOK; break;//Not any port
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	89 83       	std	Y+1, r24	; 0x01
				}

		return Local_u8ErrorState;
    198e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <DIO_u8SetPortValue+0x6>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <DIO_u8SetPortValue+0x8>
    19a8:	0f 92       	push	r0
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	8a 83       	std	Y+2, r24	; 0x02
    19b0:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8ErrorState = OK;
    19b2:	19 82       	std	Y+1, r1	; 0x01


				switch(Copy_u8Port)//which port you want it as input
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3d 83       	std	Y+5, r19	; 0x05
    19bc:	2c 83       	std	Y+4, r18	; 0x04
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	91 05       	cpc	r25, r1
    19c6:	d1 f0       	breq	.+52     	; 0x19fc <DIO_u8SetPortValue+0x5c>
    19c8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ca:	3d 81       	ldd	r19, Y+5	; 0x05
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	31 05       	cpc	r19, r1
    19d0:	2c f4       	brge	.+10     	; 0x19dc <DIO_u8SetPortValue+0x3c>
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	61 f0       	breq	.+24     	; 0x19f2 <DIO_u8SetPortValue+0x52>
    19da:	1f c0       	rjmp	.+62     	; 0x1a1a <DIO_u8SetPortValue+0x7a>
    19dc:	2c 81       	ldd	r18, Y+4	; 0x04
    19de:	3d 81       	ldd	r19, Y+5	; 0x05
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	81 f0       	breq	.+32     	; 0x1a06 <DIO_u8SetPortValue+0x66>
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ea:	83 30       	cpi	r24, 0x03	; 3
    19ec:	91 05       	cpc	r25, r1
    19ee:	81 f0       	breq	.+32     	; 0x1a10 <DIO_u8SetPortValue+0x70>
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <DIO_u8SetPortValue+0x7a>
				{
				case DIO_u8PORTA:PORTA = Copy_u8Value; break;
    19f2:	eb e3       	ldi	r30, 0x3B	; 59
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	80 83       	st	Z, r24
    19fa:	11 c0       	rjmp	.+34     	; 0x1a1e <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTB:PORTB = Copy_u8Value; break;
    19fc:	e8 e3       	ldi	r30, 0x38	; 56
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	80 83       	st	Z, r24
    1a04:	0c c0       	rjmp	.+24     	; 0x1a1e <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTC:PORTC = Copy_u8Value; break;
    1a06:	e5 e3       	ldi	r30, 0x35	; 53
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	80 83       	st	Z, r24
    1a0e:	07 c0       	rjmp	.+14     	; 0x1a1e <DIO_u8SetPortValue+0x7e>
				case DIO_u8PORTD:PORTD = Copy_u8Value; break;
    1a10:	e2 e3       	ldi	r30, 0x32	; 50
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	80 83       	st	Z, r24
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_u8SetPortValue+0x7e>
				default: Local_u8ErrorState = NOK; break;//Not any port
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
				}

		return Local_u8ErrorState;
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <DIO_u8TogglePinValue+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <DIO_u8TogglePinValue+0x8>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <DIO_u8TogglePinValue+0xa>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	8a 83       	std	Y+2, r24	; 0x02
    1a40:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1a42:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	88 30       	cpi	r24, 0x08	; 8
    1a48:	08 f0       	brcs	.+2      	; 0x1a4c <DIO_u8TogglePinValue+0x1c>
    1a4a:	74 c0       	rjmp	.+232    	; 0x1b34 <DIO_u8TogglePinValue+0x104>
	{

			switch(Copy_u8Port)//which port you want it as input
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	3e 83       	std	Y+6, r19	; 0x06
    1a54:	2d 83       	std	Y+5, r18	; 0x05
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	49 f1       	breq	.+82     	; 0x1ab2 <DIO_u8TogglePinValue+0x82>
    1a60:	2d 81       	ldd	r18, Y+5	; 0x05
    1a62:	3e 81       	ldd	r19, Y+6	; 0x06
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <DIO_u8TogglePinValue+0x44>
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	61 f0       	breq	.+24     	; 0x1a8a <DIO_u8TogglePinValue+0x5a>
    1a72:	5b c0       	rjmp	.+182    	; 0x1b2a <DIO_u8TogglePinValue+0xfa>
    1a74:	2d 81       	ldd	r18, Y+5	; 0x05
    1a76:	3e 81       	ldd	r19, Y+6	; 0x06
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	71 f1       	breq	.+92     	; 0x1ada <DIO_u8TogglePinValue+0xaa>
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	9e 81       	ldd	r25, Y+6	; 0x06
    1a82:	83 30       	cpi	r24, 0x03	; 3
    1a84:	91 05       	cpc	r25, r1
    1a86:	e9 f1       	breq	.+122    	; 0x1b02 <DIO_u8TogglePinValue+0xd2>
    1a88:	50 c0       	rjmp	.+160    	; 0x1b2a <DIO_u8TogglePinValue+0xfa>
			{
			case DIO_u8PORTA:TOG_BIT(PORTA,Copy_u8Pin); break;
    1a8a:	ab e3       	ldi	r26, 0x3B	; 59
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	eb e3       	ldi	r30, 0x3B	; 59
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <DIO_u8TogglePinValue+0x78>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <DIO_u8TogglePinValue+0x74>
    1aac:	84 27       	eor	r24, r20
    1aae:	8c 93       	st	X, r24
    1ab0:	3e c0       	rjmp	.+124    	; 0x1b2e <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTB:TOG_BIT(PORTB,Copy_u8Pin); break;
    1ab2:	a8 e3       	ldi	r26, 0x38	; 56
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e8 e3       	ldi	r30, 0x38	; 56
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <DIO_u8TogglePinValue+0xa0>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <DIO_u8TogglePinValue+0x9c>
    1ad4:	84 27       	eor	r24, r20
    1ad6:	8c 93       	st	X, r24
    1ad8:	2a c0       	rjmp	.+84     	; 0x1b2e <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTC:TOG_BIT(PORTC,Copy_u8Pin); break;
    1ada:	a5 e3       	ldi	r26, 0x35	; 53
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e5 e3       	ldi	r30, 0x35	; 53
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <DIO_u8TogglePinValue+0xc8>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <DIO_u8TogglePinValue+0xc4>
    1afc:	84 27       	eor	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	16 c0       	rjmp	.+44     	; 0x1b2e <DIO_u8TogglePinValue+0xfe>
			case DIO_u8PORTD:TOG_BIT(PORTD,Copy_u8Pin); break;
    1b02:	a2 e3       	ldi	r26, 0x32	; 50
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e2 e3       	ldi	r30, 0x32	; 50
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	02 2e       	mov	r0, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <DIO_u8TogglePinValue+0xf0>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	0a 94       	dec	r0
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <DIO_u8TogglePinValue+0xec>
    1b24:	84 27       	eor	r24, r20
    1b26:	8c 93       	st	X, r24
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <DIO_u8TogglePinValue+0xfe>
			default: Local_u8ErrorState = NOK; break;//Not any port
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return Local_u8ErrorState;
	}

		return Local_u8ErrorState;
    1b2e:	99 81       	ldd	r25, Y+1	; 0x01
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_u8TogglePinValue+0x108>
			default: Local_u8ErrorState = NOK; break;//Not any port
			}
	}
	else
	{
		return Local_u8ErrorState;
    1b34:	29 81       	ldd	r18, Y+1	; 0x01
    1b36:	2c 83       	std	Y+4, r18	; 0x04
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
	}

		return Local_u8ErrorState;
}
    1b3a:	26 96       	adiw	r28, 0x06	; 6
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <KEYPAD_voidInit>:
#include "Keypad_prv.h"



void KEYPAD_voidInit(void)
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(KPD_u8Row_PORT, 0b00000000); //Set as Input
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(KPD_u8Row_PORT, 0b00111100);//Set as High to get pull up on Rows
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	6c e3       	ldi	r22, 0x3C	; 60
    1b60:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <DIO_u8SetPortValue>

	DIO_u8SetPortDirection(KPD_u8Col_PORT, 0b11101000);
    1b64:	83 e0       	ldi	r24, 0x03	; 3
    1b66:	68 ee       	ldi	r22, 0xE8	; 232
    1b68:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(KPD_u8Col_PORT, 0b11101000);
    1b6c:	83 e0       	ldi	r24, 0x03	; 3
    1b6e:	68 ee       	ldi	r22, 0xE8	; 232
    1b70:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <DIO_u8SetPortValue>
}
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <KEYPAD_GetPressedKey>:

uint8 KEYPAD_GetPressedKey(void)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <KEYPAD_GetPressedKey+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <KEYPAD_GetPressedKey+0x8>
    1b82:	0f 92       	push	r0
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	/** No pressed key**/
	uint8 Local_u8PressedKey = KEY_PRESSED_VAL; //All High Not Pressed
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	8b 83       	std	Y+3, r24	; 0x03



	/** To send the sequence **/
	/** Activate The columns **/
	for(Local_u8ColCounter = 0; Local_u8ColCounter < COL_NUM; Local_u8ColCounter++)
    1b8c:	19 82       	std	Y+1, r1	; 0x01
    1b8e:	6d c0       	rjmp	.+218    	; 0x1c6a <KEYPAD_GetPressedKey+0xf0>
	{

		DIO_u8SetPinValue(KPD_u8Col_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_LOW);
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	fc 01       	movw	r30, r24
    1b98:	e0 56       	subi	r30, 0x60	; 96
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	90 81       	ld	r25, Z
    1b9e:	83 e0       	ldi	r24, 0x03	; 3
    1ba0:	69 2f       	mov	r22, r25
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8SetPinValue>

		for(Local_u8RowCounter = 0; Local_u8RowCounter < ROW_NUM; Local_u8RowCounter++)
    1ba8:	1a 82       	std	Y+2, r1	; 0x02
    1baa:	4c c0       	rjmp	.+152    	; 0x1c44 <KEYPAD_GetPressedKey+0xca>
		{
			/** Read the state of bush button of each row**/
			DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	e4 56       	subi	r30, 0x64	; 100
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	90 81       	ld	r25, Z
    1bba:	9e 01       	movw	r18, r28
    1bbc:	2c 5f       	subi	r18, 0xFC	; 252
    1bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	69 2f       	mov	r22, r25
    1bc4:	a9 01       	movw	r20, r18
    1bc6:	0e 94 ed 0b 	call	0x17da	; 0x17da <DIO_u8GetPinValue>

			/** If low so it is pressed **/
			if(Local_u8KeyState == DIO_u8PIN_LOW)
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	88 23       	and	r24, r24
    1bce:	b9 f5       	brne	.+110    	; 0x1c3e <KEYPAD_GetPressedKey+0xc4>
			{
				//_delay_ms(10); /** debouncing **/
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	48 2f       	mov	r20, r24
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	ca 01       	movw	r24, r20
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	82 0f       	add	r24, r18
    1be8:	93 1f       	adc	r25, r19
    1bea:	fc 01       	movw	r30, r24
    1bec:	e4 57       	subi	r30, 0x74	; 116
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
				DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	e4 56       	subi	r30, 0x64	; 100
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	90 81       	ld	r25, Z
    1c02:	9e 01       	movw	r18, r28
    1c04:	2c 5f       	subi	r18, 0xFC	; 252
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	69 2f       	mov	r22, r25
    1c0c:	a9 01       	movw	r20, r18
    1c0e:	0e 94 ed 0b 	call	0x17da	; 0x17da <DIO_u8GetPinValue>
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <KEYPAD_GetPressedKey+0xb8>
				while(Local_u8KeyState == DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	e4 56       	subi	r30, 0x64	; 100
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	90 81       	ld	r25, Z
    1c22:	9e 01       	movw	r18, r28
    1c24:	2c 5f       	subi	r18, 0xFC	; 252
    1c26:	3f 4f       	sbci	r19, 0xFF	; 255
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	69 2f       	mov	r22, r25
    1c2c:	a9 01       	movw	r20, r18
    1c2e:	0e 94 ed 0b 	call	0x17da	; 0x17da <DIO_u8GetPinValue>
			if(Local_u8KeyState == DIO_u8PIN_LOW)
			{
				//_delay_ms(10); /** debouncing **/
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
				DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
				while(Local_u8KeyState == DIO_u8PIN_LOW)
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	88 23       	and	r24, r24
    1c36:	71 f3       	breq	.-36     	; 0x1c14 <KEYPAD_GetPressedKey+0x9a>
				{
					DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
				}
				return Local_u8PressedKey;
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	1c c0       	rjmp	.+56     	; 0x1c76 <KEYPAD_GetPressedKey+0xfc>
	for(Local_u8ColCounter = 0; Local_u8ColCounter < COL_NUM; Local_u8ColCounter++)
	{

		DIO_u8SetPinValue(KPD_u8Col_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_LOW);

		for(Local_u8RowCounter = 0; Local_u8RowCounter < ROW_NUM; Local_u8RowCounter++)
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	8f 5f       	subi	r24, 0xFF	; 255
    1c42:	8a 83       	std	Y+2, r24	; 0x02
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	84 30       	cpi	r24, 0x04	; 4
    1c48:	08 f4       	brcc	.+2      	; 0x1c4c <KEYPAD_GetPressedKey+0xd2>
    1c4a:	b0 cf       	rjmp	.-160    	; 0x1bac <KEYPAD_GetPressedKey+0x32>
					DIO_u8GetPinValue(KPD_u8Row_PORT, Local_u8CRowArr[Local_u8RowCounter], &Local_u8KeyState);
				}
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_u8Col_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_HIGH);
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	88 2f       	mov	r24, r24
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	fc 01       	movw	r30, r24
    1c54:	e0 56       	subi	r30, 0x60	; 96
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	90 81       	ld	r25, Z
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	69 2f       	mov	r22, r25
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8SetPinValue>



	/** To send the sequence **/
	/** Activate The columns **/
	for(Local_u8ColCounter = 0; Local_u8ColCounter < COL_NUM; Local_u8ColCounter++)
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	8f 5f       	subi	r24, 0xFF	; 255
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	84 30       	cpi	r24, 0x04	; 4
    1c6e:	08 f4       	brcc	.+2      	; 0x1c72 <KEYPAD_GetPressedKey+0xf8>
    1c70:	8f cf       	rjmp	.-226    	; 0x1b90 <KEYPAD_GetPressedKey+0x16>





	return Local_u8PressedKey;
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <main>:
#include "Keypad_interface.h"

#include "util/delay.h"

void main(void)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	a5 97       	sbiw	r28, 0x25	; 37
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
	uint16 Local_u8DigitalVal = 0;
    1c9c:	1b a2       	std	Y+35, r1	; 0x23
    1c9e:	1a a2       	std	Y+34, r1	; 0x22
	uint16 Local_u8DigitalValMV = 0;
    1ca0:	19 a2       	std	Y+33, r1	; 0x21
    1ca2:	18 a2       	std	Y+32, r1	; 0x20
	uint16 Resistance = 0;
    1ca4:	1f 8e       	std	Y+31, r1	; 0x1f
    1ca6:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 Read = 0xFF;
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	8d 8f       	std	Y+29, r24	; 0x1d
/*******************************************/

	/*** Set LDR as input for A0 ***/

	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN0, DIO_u8PIN_INPUT);
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_u8SetPinDirection>

	/*** Initializing LCD and ADC and Keypad ***/
	ADC_voidInit();
    1cb6:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	ADC_voidEnable();
    1cba:	0e 94 21 06 	call	0xc42	; 0xc42 <ADC_voidEnable>

	CLCD_voidInit();
    1cbe:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidInit>
	KEYPAD_voidInit();
    1cc2:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <KEYPAD_voidInit>


	CLCD_u8SendString("System:");
    1cc6:	80 e6       	ldi	r24, 0x60	; 96
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8SendString>
	CLCD_voidGoToXY(1, 0);
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidGoToXY>
	CLCD_u8SendString("1 Vol");
    1cd6:	88 e6       	ldi	r24, 0x68	; 104
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8SendString>
	CLCD_voidGoToXY(2, 0);
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidGoToXY>
	CLCD_u8SendString("2 OHM");
    1ce6:	8e e6       	ldi	r24, 0x6E	; 110
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8SendString>
/*********************************************/


	do
	{
		Read = KEYPAD_GetPressedKey();
    1cee:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <KEYPAD_GetPressedKey>
    1cf2:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	while(Read != 0xFF);
    1cf4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf6:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf8:	d1 f7       	brne	.-12     	; 0x1cee <main+0x66>

	while (1)
	{
		Read = KEYPAD_GetPressedKey();
    1cfa:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <KEYPAD_GetPressedKey>
    1cfe:	8d 8f       	std	Y+29, r24	; 0x1d

		switch (Read)
    1d00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	3d a3       	std	Y+37, r19	; 0x25
    1d08:	2c a3       	std	Y+36, r18	; 0x24
    1d0a:	8c a1       	ldd	r24, Y+36	; 0x24
    1d0c:	9d a1       	ldd	r25, Y+37	; 0x25
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	91 05       	cpc	r25, r1
    1d12:	39 f0       	breq	.+14     	; 0x1d22 <main+0x9a>
    1d14:	2c a1       	ldd	r18, Y+36	; 0x24
    1d16:	3d a1       	ldd	r19, Y+37	; 0x25
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <main+0x98>
    1d1e:	ab c0       	rjmp	.+342    	; 0x1e76 <main+0x1ee>
    1d20:	ec cf       	rjmp	.-40     	; 0x1cfa <main+0x72>
		{
		case 1:
			CLCD_voidClrScr();
    1d22:	0e 94 ab 09 	call	0x1356	; 0x1356 <CLCD_voidClrScr>
			while (1)
			{
				CLCD_voidGoToXY(0, 0);
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidGoToXY>
				CLCD_u8SendString("Vol Sys");
    1d2e:	84 e7       	ldi	r24, 0x74	; 116
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8SendString>
				CLCD_voidGoToXY(1, 0);
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidGoToXY>

				Local_u8DigitalVal = ADC_uint16GetDigitalValue(ADC_uint8_CHANNEL_0);
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ADC_uint16GetDigitalValue>
    1d44:	9b a3       	std	Y+35, r25	; 0x23
    1d46:	8a a3       	std	Y+34, r24	; 0x22
				Local_u8DigitalValMV = (Local_u8DigitalVal * 5000UL) / 1023;
    1d48:	8a a1       	ldd	r24, Y+34	; 0x22
    1d4a:	9b a1       	ldd	r25, Y+35	; 0x23
    1d4c:	cc 01       	movw	r24, r24
    1d4e:	a0 e0       	ldi	r26, 0x00	; 0
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	28 e8       	ldi	r18, 0x88	; 136
    1d54:	33 e1       	ldi	r19, 0x13	; 19
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	50 e0       	ldi	r21, 0x00	; 0
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__mulsi3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	2f ef       	ldi	r18, 0xFF	; 255
    1d68:	33 e0       	ldi	r19, 0x03	; 3
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 22 10 	call	0x2044	; 0x2044 <__udivmodsi4>
    1d76:	da 01       	movw	r26, r20
    1d78:	c9 01       	movw	r24, r18
    1d7a:	99 a3       	std	Y+33, r25	; 0x21
    1d7c:	88 a3       	std	Y+32, r24	; 0x20
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e8       	ldi	r25, 0x80	; 128
    1d82:	ab eb       	ldi	r26, 0xBB	; 187
    1d84:	b4 e4       	ldi	r27, 0x44	; 68
    1d86:	89 8f       	std	Y+25, r24	; 0x19
    1d88:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	4a e7       	ldi	r20, 0x7A	; 122
    1d9c:	55 e4       	ldi	r21, 0x45	; 69
    1d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8d 8b       	std	Y+21, r24	; 0x15
    1da8:	9e 8b       	std	Y+22, r25	; 0x16
    1daa:	af 8b       	std	Y+23, r26	; 0x17
    1dac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dae:	6d 89       	ldd	r22, Y+21	; 0x15
    1db0:	7e 89       	ldd	r23, Y+22	; 0x16
    1db2:	8f 89       	ldd	r24, Y+23	; 0x17
    1db4:	98 8d       	ldd	r25, Y+24	; 0x18
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e8       	ldi	r20, 0x80	; 128
    1dbc:	5f e3       	ldi	r21, 0x3F	; 63
    1dbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc2:	88 23       	and	r24, r24
    1dc4:	2c f4       	brge	.+10     	; 0x1dd0 <main+0x148>
		__ticks = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9c 8b       	std	Y+20, r25	; 0x14
    1dcc:	8b 8b       	std	Y+19, r24	; 0x13
    1dce:	3f c0       	rjmp	.+126    	; 0x1e4e <main+0x1c6>
	else if (__tmp > 65535)
    1dd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	4f e7       	ldi	r20, 0x7F	; 127
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	4c f5       	brge	.+82     	; 0x1e3a <main+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e2       	ldi	r20, 0x20	; 32
    1df6:	51 e4       	ldi	r21, 0x41	; 65
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9c 8b       	std	Y+20, r25	; 0x14
    1e0e:	8b 8b       	std	Y+19, r24	; 0x13
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <main+0x1a8>
    1e12:	80 e9       	ldi	r24, 0x90	; 144
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	9a 8b       	std	Y+18, r25	; 0x12
    1e18:	89 8b       	std	Y+17, r24	; 0x11
    1e1a:	89 89       	ldd	r24, Y+17	; 0x11
    1e1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <main+0x196>
    1e22:	9a 8b       	std	Y+18, r25	; 0x12
    1e24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	9c 8b       	std	Y+20, r25	; 0x14
    1e2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	8b 89       	ldd	r24, Y+19	; 0x13
    1e32:	9c 89       	ldd	r25, Y+20	; 0x14
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	69 f7       	brne	.-38     	; 0x1e12 <main+0x18a>
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <main+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e40:	98 8d       	ldd	r25, Y+24	; 0x18
    1e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9c 8b       	std	Y+20, r25	; 0x14
    1e4c:	8b 8b       	std	Y+19, r24	; 0x13
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	98 8b       	std	Y+16, r25	; 0x10
    1e54:	8f 87       	std	Y+15, r24	; 0x0f
    1e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e58:	98 89       	ldd	r25, Y+16	; 0x10
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <main+0x1d2>
    1e5e:	98 8b       	std	Y+16, r25	; 0x10
    1e60:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1500);

				CLCD_voidSendNumber(Local_u8DigitalValMV);
    1e62:	88 a1       	ldd	r24, Y+32	; 0x20
    1e64:	99 a1       	ldd	r25, Y+33	; 0x21
    1e66:	cc 01       	movw	r24, r24
    1e68:	a0 e0       	ldi	r26, 0x00	; 0
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 db 08 	call	0x11b6	; 0x11b6 <CLCD_voidSendNumber>
    1e74:	58 cf       	rjmp	.-336    	; 0x1d26 <main+0x9e>
			}
			break;

		case 2:
			CLCD_voidClrScr();
    1e76:	0e 94 ab 09 	call	0x1356	; 0x1356 <CLCD_voidClrScr>
			while (1)
			{
				CLCD_voidGoToXY(0, 0);
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidGoToXY>
				CLCD_u8SendString("OHM SYS");
    1e82:	8c e7       	ldi	r24, 0x7C	; 124
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8SendString>
				CLCD_voidGoToXY(1, 0);
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidGoToXY>

				Local_u8DigitalVal = ADC_uint16GetDigitalValue(ADC_uint8_CHANNEL_0);
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ADC_uint16GetDigitalValue>
    1e98:	9b a3       	std	Y+35, r25	; 0x23
    1e9a:	8a a3       	std	Y+34, r24	; 0x22
				Local_u8DigitalValMV = (Local_u8DigitalVal * 5000UL) / 1023;
    1e9c:	8a a1       	ldd	r24, Y+34	; 0x22
    1e9e:	9b a1       	ldd	r25, Y+35	; 0x23
    1ea0:	cc 01       	movw	r24, r24
    1ea2:	a0 e0       	ldi	r26, 0x00	; 0
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	28 e8       	ldi	r18, 0x88	; 136
    1ea8:	33 e1       	ldi	r19, 0x13	; 19
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__mulsi3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	2f ef       	ldi	r18, 0xFF	; 255
    1ebc:	33 e0       	ldi	r19, 0x03	; 3
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	50 e0       	ldi	r21, 0x00	; 0
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	0e 94 22 10 	call	0x2044	; 0x2044 <__udivmodsi4>
    1eca:	da 01       	movw	r26, r20
    1ecc:	c9 01       	movw	r24, r18
    1ece:	99 a3       	std	Y+33, r25	; 0x21
    1ed0:	88 a3       	std	Y+32, r24	; 0x20
				Resistance = Local_u8DigitalValMV / 40;
    1ed2:	88 a1       	ldd	r24, Y+32	; 0x20
    1ed4:	99 a1       	ldd	r25, Y+33	; 0x21
    1ed6:	28 e2       	ldi	r18, 0x28	; 40
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	b9 01       	movw	r22, r18
    1edc:	0e 94 0e 10 	call	0x201c	; 0x201c <__udivmodhi4>
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ee4:	8e 8f       	std	Y+30, r24	; 0x1e
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e8       	ldi	r25, 0x80	; 128
    1eea:	ab eb       	ldi	r26, 0xBB	; 187
    1eec:	b4 e4       	ldi	r27, 0x44	; 68
    1eee:	8b 87       	std	Y+11, r24	; 0x0b
    1ef0:	9c 87       	std	Y+12, r25	; 0x0c
    1ef2:	ad 87       	std	Y+13, r26	; 0x0d
    1ef4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a e7       	ldi	r20, 0x7A	; 122
    1f04:	55 e4       	ldi	r21, 0x45	; 69
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8f 83       	std	Y+7, r24	; 0x07
    1f10:	98 87       	std	Y+8, r25	; 0x08
    1f12:	a9 87       	std	Y+9, r26	; 0x09
    1f14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f16:	6f 81       	ldd	r22, Y+7	; 0x07
    1f18:	78 85       	ldd	r23, Y+8	; 0x08
    1f1a:	89 85       	ldd	r24, Y+9	; 0x09
    1f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <main+0x2b0>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <main+0x32e>
	else if (__tmp > 65535)
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <main+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <main+0x310>
    1f7a:	80 e9       	ldi	r24, 0x90	; 144
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	9c 83       	std	Y+4, r25	; 0x04
    1f80:	8b 83       	std	Y+3, r24	; 0x03
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <main+0x2fe>
    1f8a:	9c 83       	std	Y+4, r25	; 0x04
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9e 83       	std	Y+6, r25	; 0x06
    1f96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <main+0x2f2>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <main+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa4:	78 85       	ldd	r23, Y+8	; 0x08
    1fa6:	89 85       	ldd	r24, Y+9	; 0x09
    1fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <main+0x33a>
    1fc6:	9a 83       	std	Y+2, r25	; 0x02
    1fc8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1500);

				CLCD_voidSendNumber(Resistance);
    1fca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fce:	cc 01       	movw	r24, r24
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <CLCD_voidSendNumber>
    1fdc:	4e cf       	rjmp	.-356    	; 0x1e7a <main+0x1f2>

00001fde <__mulsi3>:
    1fde:	62 9f       	mul	r22, r18
    1fe0:	d0 01       	movw	r26, r0
    1fe2:	73 9f       	mul	r23, r19
    1fe4:	f0 01       	movw	r30, r0
    1fe6:	82 9f       	mul	r24, r18
    1fe8:	e0 0d       	add	r30, r0
    1fea:	f1 1d       	adc	r31, r1
    1fec:	64 9f       	mul	r22, r20
    1fee:	e0 0d       	add	r30, r0
    1ff0:	f1 1d       	adc	r31, r1
    1ff2:	92 9f       	mul	r25, r18
    1ff4:	f0 0d       	add	r31, r0
    1ff6:	83 9f       	mul	r24, r19
    1ff8:	f0 0d       	add	r31, r0
    1ffa:	74 9f       	mul	r23, r20
    1ffc:	f0 0d       	add	r31, r0
    1ffe:	65 9f       	mul	r22, r21
    2000:	f0 0d       	add	r31, r0
    2002:	99 27       	eor	r25, r25
    2004:	72 9f       	mul	r23, r18
    2006:	b0 0d       	add	r27, r0
    2008:	e1 1d       	adc	r30, r1
    200a:	f9 1f       	adc	r31, r25
    200c:	63 9f       	mul	r22, r19
    200e:	b0 0d       	add	r27, r0
    2010:	e1 1d       	adc	r30, r1
    2012:	f9 1f       	adc	r31, r25
    2014:	bd 01       	movw	r22, r26
    2016:	cf 01       	movw	r24, r30
    2018:	11 24       	eor	r1, r1
    201a:	08 95       	ret

0000201c <__udivmodhi4>:
    201c:	aa 1b       	sub	r26, r26
    201e:	bb 1b       	sub	r27, r27
    2020:	51 e1       	ldi	r21, 0x11	; 17
    2022:	07 c0       	rjmp	.+14     	; 0x2032 <__udivmodhi4_ep>

00002024 <__udivmodhi4_loop>:
    2024:	aa 1f       	adc	r26, r26
    2026:	bb 1f       	adc	r27, r27
    2028:	a6 17       	cp	r26, r22
    202a:	b7 07       	cpc	r27, r23
    202c:	10 f0       	brcs	.+4      	; 0x2032 <__udivmodhi4_ep>
    202e:	a6 1b       	sub	r26, r22
    2030:	b7 0b       	sbc	r27, r23

00002032 <__udivmodhi4_ep>:
    2032:	88 1f       	adc	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	5a 95       	dec	r21
    2038:	a9 f7       	brne	.-22     	; 0x2024 <__udivmodhi4_loop>
    203a:	80 95       	com	r24
    203c:	90 95       	com	r25
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	08 95       	ret

00002044 <__udivmodsi4>:
    2044:	a1 e2       	ldi	r26, 0x21	; 33
    2046:	1a 2e       	mov	r1, r26
    2048:	aa 1b       	sub	r26, r26
    204a:	bb 1b       	sub	r27, r27
    204c:	fd 01       	movw	r30, r26
    204e:	0d c0       	rjmp	.+26     	; 0x206a <__udivmodsi4_ep>

00002050 <__udivmodsi4_loop>:
    2050:	aa 1f       	adc	r26, r26
    2052:	bb 1f       	adc	r27, r27
    2054:	ee 1f       	adc	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	a2 17       	cp	r26, r18
    205a:	b3 07       	cpc	r27, r19
    205c:	e4 07       	cpc	r30, r20
    205e:	f5 07       	cpc	r31, r21
    2060:	20 f0       	brcs	.+8      	; 0x206a <__udivmodsi4_ep>
    2062:	a2 1b       	sub	r26, r18
    2064:	b3 0b       	sbc	r27, r19
    2066:	e4 0b       	sbc	r30, r20
    2068:	f5 0b       	sbc	r31, r21

0000206a <__udivmodsi4_ep>:
    206a:	66 1f       	adc	r22, r22
    206c:	77 1f       	adc	r23, r23
    206e:	88 1f       	adc	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	1a 94       	dec	r1
    2074:	69 f7       	brne	.-38     	; 0x2050 <__udivmodsi4_loop>
    2076:	60 95       	com	r22
    2078:	70 95       	com	r23
    207a:	80 95       	com	r24
    207c:	90 95       	com	r25
    207e:	9b 01       	movw	r18, r22
    2080:	ac 01       	movw	r20, r24
    2082:	bd 01       	movw	r22, r26
    2084:	cf 01       	movw	r24, r30
    2086:	08 95       	ret

00002088 <__divmodsi4>:
    2088:	97 fb       	bst	r25, 7
    208a:	09 2e       	mov	r0, r25
    208c:	05 26       	eor	r0, r21
    208e:	0e d0       	rcall	.+28     	; 0x20ac <__divmodsi4_neg1>
    2090:	57 fd       	sbrc	r21, 7
    2092:	04 d0       	rcall	.+8      	; 0x209c <__divmodsi4_neg2>
    2094:	d7 df       	rcall	.-82     	; 0x2044 <__udivmodsi4>
    2096:	0a d0       	rcall	.+20     	; 0x20ac <__divmodsi4_neg1>
    2098:	00 1c       	adc	r0, r0
    209a:	38 f4       	brcc	.+14     	; 0x20aa <__divmodsi4_exit>

0000209c <__divmodsi4_neg2>:
    209c:	50 95       	com	r21
    209e:	40 95       	com	r20
    20a0:	30 95       	com	r19
    20a2:	21 95       	neg	r18
    20a4:	3f 4f       	sbci	r19, 0xFF	; 255
    20a6:	4f 4f       	sbci	r20, 0xFF	; 255
    20a8:	5f 4f       	sbci	r21, 0xFF	; 255

000020aa <__divmodsi4_exit>:
    20aa:	08 95       	ret

000020ac <__divmodsi4_neg1>:
    20ac:	f6 f7       	brtc	.-4      	; 0x20aa <__divmodsi4_exit>
    20ae:	90 95       	com	r25
    20b0:	80 95       	com	r24
    20b2:	70 95       	com	r23
    20b4:	61 95       	neg	r22
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255
    20b8:	8f 4f       	sbci	r24, 0xFF	; 255
    20ba:	9f 4f       	sbci	r25, 0xFF	; 255
    20bc:	08 95       	ret

000020be <__prologue_saves__>:
    20be:	2f 92       	push	r2
    20c0:	3f 92       	push	r3
    20c2:	4f 92       	push	r4
    20c4:	5f 92       	push	r5
    20c6:	6f 92       	push	r6
    20c8:	7f 92       	push	r7
    20ca:	8f 92       	push	r8
    20cc:	9f 92       	push	r9
    20ce:	af 92       	push	r10
    20d0:	bf 92       	push	r11
    20d2:	cf 92       	push	r12
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	ca 1b       	sub	r28, r26
    20e8:	db 0b       	sbc	r29, r27
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	09 94       	ijmp

000020f6 <__epilogue_restores__>:
    20f6:	2a 88       	ldd	r2, Y+18	; 0x12
    20f8:	39 88       	ldd	r3, Y+17	; 0x11
    20fa:	48 88       	ldd	r4, Y+16	; 0x10
    20fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    20fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2100:	7d 84       	ldd	r7, Y+13	; 0x0d
    2102:	8c 84       	ldd	r8, Y+12	; 0x0c
    2104:	9b 84       	ldd	r9, Y+11	; 0x0b
    2106:	aa 84       	ldd	r10, Y+10	; 0x0a
    2108:	b9 84       	ldd	r11, Y+9	; 0x09
    210a:	c8 84       	ldd	r12, Y+8	; 0x08
    210c:	df 80       	ldd	r13, Y+7	; 0x07
    210e:	ee 80       	ldd	r14, Y+6	; 0x06
    2110:	fd 80       	ldd	r15, Y+5	; 0x05
    2112:	0c 81       	ldd	r16, Y+4	; 0x04
    2114:	1b 81       	ldd	r17, Y+3	; 0x03
    2116:	aa 81       	ldd	r26, Y+2	; 0x02
    2118:	b9 81       	ldd	r27, Y+1	; 0x01
    211a:	ce 0f       	add	r28, r30
    211c:	d1 1d       	adc	r29, r1
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	ed 01       	movw	r28, r26
    212a:	08 95       	ret

0000212c <_exit>:
    212c:	f8 94       	cli

0000212e <__stop_program>:
    212e:	ff cf       	rjmp	.-2      	; 0x212e <__stop_program>
